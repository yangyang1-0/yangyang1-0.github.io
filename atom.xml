<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>洋群满满</title>
  
  
  <link href="https://yangyangmm.cn/atom.xml" rel="self"/>
  
  <link href="https://yangyangmm.cn/"/>
  <updated>2021-01-14T02:59:43.078Z</updated>
  <id>https://yangyangmm.cn/</id>
  
  <author>
    <name>洋群满满</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python基础------末篇</title>
    <link href="https://yangyangmm.cn/2021/01/14/Python%E5%9F%BA%E7%A1%80-%E6%9C%AB%E7%AF%87/"/>
    <id>https://yangyangmm.cn/2021/01/14/Python%E5%9F%BA%E7%A1%80-%E6%9C%AB%E7%AF%87/</id>
    <published>2021-01-14T02:53:48.000Z</published>
    <updated>2021-01-14T02:59:43.078Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a> <h1 id="Python——末篇"><a href="#Python——末篇" class="headerlink" title="Python——末篇"></a>Python——末篇</h1><h3 id="1、-异常处理"><a href="#1、-异常处理" class="headerlink" title="1、 异常处理"></a>1、 异常处理</h3><blockquote><p><strong>何谓异常呢？</strong> 就是我们IT界鼎鼎有名的 “ bug “ 兄。bug 也就是指程序没有按照我们所期望的去运行而出现的一些错误情况。比如一个除法表达式 a / b ，如果我们不加处理，那么就会出现 a / 0 的情况，此时程序就会出现异常。那么这就是一个 bug 。</p><p><strong>何谓异常处理呢？</strong> 顾名思义就是当程序出现异常的时候，我们针对这些异常进行处理的机制。在 python 中默认的处理方法是出现异常后，程序会在出现异常的地方终止，然而这可能不是我们想要的。所以我们可以通过几个内置的关键字来进行自定义处理方式。</p><p>我们先来了解两个 python 的异常处理类：<br><strong>- BaseException<br>- Exception</strong></p></blockquote><h4 id="1-1、-BaseException"><a href="#1-1、-BaseException" class="headerlink" title="1.1、  BaseException"></a>1.1、  BaseException</h4><blockquote><p>这个异常处理类是所有 python 异常处理的基类。我们在自定义异常处理时，可以继承这个类。**(官方不推荐)**</p></blockquote><h4 id="1-2、-Exception"><a href="#1-2、-Exception" class="headerlink" title="1.2、  Exception"></a>1.2、  Exception</h4><blockquote><p>这个异常处理类是常规处理的基类，但是 Exception 也继承于 BaseException ，官方推荐我们自定义异常类时，继承于 Exception 。<a href="https://docs.python.org/zh-cn/3.7/library/exceptions.html#Exception">(官方文档）</a></p></blockquote><h4 id="1-3、-异常处理关键字"><a href="#1-3、-异常处理关键字" class="headerlink" title="1.3、  异常处理关键字"></a>1.3、  异常处理关键字</h4><h5 id="1-3-1、-关键字"><a href="#1-3-1、-关键字" class="headerlink" title="1.3.1、 关键字"></a>1.3.1、 关键字</h5><table><thead><tr><th>try</th><th>except</th><th>else</th><th>finally</th><th>raise</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h5 id="1-3-2、-语法-try、except、else、finally"><a href="#1-3-2、-语法-try、except、else、finally" class="headerlink" title="1.3.2、 语法 - try、except、else、finally"></a>1.3.2、 语法 - try、except、else、finally</h5><blockquote><p>try:<br>　可能异常的代码<br>except Error… as e:<br>　当出现 Error 后处理的代码<br>else:<br>　如果不出现异常，执行的代码<br>finally:<br>　无论是否发生异常都执行的代码<br>注意：一般时候只需要 try / except 即可，try 不可以单独使用。</p></blockquote><h5 id="1-3-3、-示例1"><a href="#1-3-3、-示例1" class="headerlink" title="1.3.3、 示例1"></a>1.3.3、 示例1</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a = <span class="number">1</span> / <span class="number">0</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">f&quot;异常是<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">输出: 异常是division by zero</span><br></pre></td></tr></table></figure><h5 id="1-3-4、-示例2"><a href="#1-3-4、-示例2" class="headerlink" title="1.3.4、 示例2"></a>1.3.4、 示例2</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a = <span class="number">1</span> / <span class="number">0</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">f&quot;异常是<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;没有异常执行&quot;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">&quot;执行了finally&quot;</span>)</span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">输出: 异常是division by zero（执行了<span class="keyword">finally</span>）</span><br></pre></td></tr></table></figure><h5 id="1-3-5、-语法-raise"><a href="#1-3-5、-语法-raise" class="headerlink" title="1.3.5、 语法 - raise"></a>1.3.5、 语法 - raise</h5><blockquote><p>raise 异常类(描述信息)<br>注：raise 用于主动抛出异常。</p></blockquote><h5 id="1-3-6、-示例"><a href="#1-3-6、-示例" class="headerlink" title="1.3.6、 示例"></a>1.3.6、 示例</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a = <span class="number">2</span></span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">&quot;a不能等于2&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">f&quot;异常是<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">输出 异常是a不能等于<span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="2、-函数"><a href="#2、-函数" class="headerlink" title="2、 函数"></a>2、 函数</h3><p>​        <a href="https://yangyangmm.cn/2021/01/06/Python%E5%87%BD%E6%95%B0/">函数部分</a>的内容，我在前面已经详细讲解过了，在此我就不过多叙述了，大家没看过的阔以移步瞅瞅！！！</p><h3 id="3、-类"><a href="#3、-类" class="headerlink" title="3、 类"></a>3、 类</h3><p>​        <a href="https://yangyangmm.cn/2021/01/06/Python%E5%87%BD%E6%95%B0/">类部分</a>的内容，我在后面会详细讲解，在此我就不过多叙述了，大家稍等片刻！！！</p><h3 id="4、-模块和包"><a href="#4、-模块和包" class="headerlink" title="4、 模块和包"></a>4、 模块和包</h3><h4 id="4-1、-模块"><a href="#4-1、-模块" class="headerlink" title="4.1、  模块"></a>4.1、  模块</h4><p>​        Python 中一个以 <code>.py</code> 结尾的文件就是一个模块，模块中定义了变量、函数等来实现一些类似的功能。Python 有很多自带的模块（标准库）和第三方模块，一个模块可以被其他模块引用，实现了代码的复用性。</p><h4 id="4-2、-包"><a href="#4-2、-包" class="headerlink" title="4.2、  包"></a>4.2、  包</h4><p>​        包是存放模块的文件夹，包中包含 <code>__init__.py</code> 和其他模块，<code>__init__.py</code> 可为空也可定义属性和方法，在 Python3.3 之前的版本，一个文件夹中只有包含 <code>__init__.py</code>，其他程序才能从该文件夹引入相应的模块、函数等，之后的版本没有 <code>__init__.py</code> 也能正常导入，简单来说就是 Python3.3 之前的版本，<code>__init__.py</code> 是包的标识，是必须要有的，之后的版本可以没有。</p><h4 id="4-3、-创建包"><a href="#4-3、-创建包" class="headerlink" title="4.3、  创建包"></a>4.3、  创建包</h4><p>​        使用 PyCharm 创建包，步骤为：①打开 PyCharm 选中项目 ②右击鼠标选中 <code>New</code> 选项，然后再选中 <code>Python Package</code> 后单击鼠标，此时弹出创建窗口，如下所示：</p><img src="/2021/01/14/Python%E5%9F%BA%E7%A1%80-%E6%9C%AB%E7%AF%87/Python创建包之Python基础.jpg" style="zoom:80%;"><p>​        我们填好名字后点击 <code>OK</code> 按钮即可。创建好后我们会发现 PyCharm 已经自动帮我们创建了空文件 <code>__init__.py</code>。</p><h4 id="4-4、-创建模块"><a href="#4-4、-创建模块" class="headerlink" title="4.4、 创建模块"></a>4.4、 创建模块</h4><p>​        使用 PyCharm 创建模块，步骤为：①选中刚刚创建的包 ②右击鼠标选中 <code>New</code> 选项，然后再选中 <code>Python File</code> 后单击鼠标，此时弹出创建窗口，如下所示：</p><img src="/2021/01/14/Python%E5%9F%BA%E7%A1%80-%E6%9C%AB%E7%AF%87/Python创建模块之Python基础.jpg" style="zoom:80%;">        我们填好名字后点击 `OK` 按钮即可。<p>​        我们创建包和模块的最终目录结构为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package</span><br><span class="line">|- pg1</span><br><span class="line">|- - __init__.py</span><br><span class="line">|- - a.py</span><br><span class="line">|- - b.py</span><br><span class="line">|- pg2</span><br><span class="line">|- - __init__.py</span><br><span class="line">|- - c.py</span><br><span class="line">|- - d.py</span><br></pre></td></tr></table></figure><p><code>a.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;a&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>b.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">b</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;b&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>c.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">c</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;c&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>d.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">d</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;d&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="4-5、-引用"><a href="#4-5、-引用" class="headerlink" title="4.5、  引用"></a>4.5、  引用</h4><p>​        从包中引入模块有如下两种方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import ...</span><br><span class="line">import 包名1.包名2...模块名</span><br><span class="line">1</span><br><span class="line">from ... import ...</span><br><span class="line">from 包名1.包名2... import 模块名</span><br><span class="line">from 包名1.包名2...模块名 import 变量名&#x2F;函数名</span><br><span class="line">12</span><br></pre></td></tr></table></figure><p>​        下面我们使用创建好的包和模块演示一下，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># a 模块中引入 b 模块</span></span><br><span class="line"><span class="keyword">import</span> pg1.b</span><br><span class="line"><span class="keyword">from</span> pg1 <span class="keyword">import</span> b</span><br><span class="line"></span><br><span class="line"><span class="comment"># a 模块中引入 c 模块</span></span><br><span class="line"><span class="keyword">import</span> pg2.c</span><br><span class="line"><span class="keyword">from</span> pg2 <span class="keyword">import</span> c</span><br><span class="line"></span><br><span class="line"><span class="comment"># a 模块中引入 c 模块和 d 模块</span></span><br><span class="line"><span class="keyword">import</span> pg2.c,pg2.d</span><br><span class="line"><span class="keyword">from</span> pg2 <span class="keyword">import</span> c,d</span><br><span class="line"></span><br><span class="line"><span class="comment"># a 模块中引入包 pg2 下的所有模块</span></span><br><span class="line"><span class="keyword">from</span> pg2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># a 模块中引入 d 模块中函数 d()</span></span><br><span class="line"><span class="keyword">from</span> pg2.d <span class="keyword">import</span> d</span><br><span class="line"><span class="comment"># 调用函数 d()</span></span><br><span class="line">d()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">这是对Python基础的末期讲解！</summary>
    
    
    
    <category term="Python" scheme="https://yangyangmm.cn/categories/Python/"/>
    
    <category term="Python基础" scheme="https://yangyangmm.cn/categories/Python/Python%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Python" scheme="https://yangyangmm.cn/tags/Python/"/>
    
    <category term="Python基础" scheme="https://yangyangmm.cn/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python基础------中篇</title>
    <link href="https://yangyangmm.cn/2021/01/12/Python%E5%9F%BA%E7%A1%80-%E4%B8%AD%E7%AF%87/"/>
    <id>https://yangyangmm.cn/2021/01/12/Python%E5%9F%BA%E7%A1%80-%E4%B8%AD%E7%AF%87/</id>
    <published>2021-01-12T09:12:04.000Z</published>
    <updated>2021-01-14T02:59:54.867Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a> <h1 id="Python——中篇"><a href="#Python——中篇" class="headerlink" title="Python——中篇"></a>Python——中篇</h1><h3 id="1、-字符串的常用方法"><a href="#1、-字符串的常用方法" class="headerlink" title="1、 字符串的常用方法"></a>1、 字符串的常用方法</h3><h4 id="1-1、-拼接"><a href="#1-1、-拼接" class="headerlink" title="1.1、  拼接"></a>1.1、  拼接</h4><h5 id="1-1-1、-示例1-常用-："><a href="#1-1-1、-示例1-常用-：" class="headerlink" title="1.1.1、 示例1(常用)："></a>1.1.1、 示例1(常用)：</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;洋群满满&quot;</span></span><br><span class="line">b = <span class="string">&quot;爱python&quot;</span></span><br><span class="line">c = a + b</span><br><span class="line">print(c)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; 洋群满满爱python</span><br></pre></td></tr></table></figure><p>​        注意：如果是str和number则需要对number转换，通过str(number)转换。</p><h5 id="1-1-2、-示例2-极少使用-："><a href="#1-1-2、-示例2-极少使用-：" class="headerlink" title="1.1.2、 示例2(极少使用)："></a>1.1.2、 示例2(极少使用)：</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;洋群满满&quot;</span> <span class="string">&quot;爱python&quot;</span></span><br><span class="line">print(a)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; 洋群满满爱python</span><br></pre></td></tr></table></figure><h4 id="1-2、-切片-截取"><a href="#1-2、-切片-截取" class="headerlink" title="1.2、  切片(截取)"></a>1.2、  切片(截取)</h4><p>​        用法灵活，需要对上一篇的索引已有深刻的理解。</p><h5 id="1-2-1、-语法"><a href="#1-2-1、-语法" class="headerlink" title="1.2.1、 语法"></a>1.2.1、 语法</h5><blockquote><p>string[start : end : step]<br>注意：<strong>左开右闭</strong></p></blockquote><h5 id="1-2-2、-示例1：截取python"><a href="#1-2-2、-示例1：截取python" class="headerlink" title="1.2.2、 示例1：截取python"></a>1.2.2、 示例1：截取python</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;洋群满4爱python&quot;</span></span><br><span class="line">b = a[<span class="number">3</span>:]</span><br><span class="line">print(b)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; python</span><br></pre></td></tr></table></figure><h5 id="1-2-3、-示例2-截取洋满真爱"><a href="#1-2-3、-示例2-截取洋满真爱" class="headerlink" title="1.2.3、 示例2: 截取洋满真爱"></a>1.2.3、 示例2: 截取洋满真爱</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;洋群满满真可爱&quot;</span></span><br><span class="line">b = a[::<span class="number">2</span>] <span class="comment"># 或者 b = a[0::2]</span></span><br><span class="line">print(b)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; 洋满真爱</span><br></pre></td></tr></table></figure><h4 id="1-3、-获取字符串长度"><a href="#1-3、-获取字符串长度" class="headerlink" title="1.3、  获取字符串长度"></a>1.3、  获取字符串长度</h4><p>​        获取字符串长度由于比较少用，洋群满满就不写了，需要了解的可以私聊。</p><h5 id="1-3-1、-语法"><a href="#1-3-1、-语法" class="headerlink" title="1.3.1、 语法"></a>1.3.1、 语法</h5><blockquote><p>len(string)</p></blockquote><h5 id="1-3-2、-示例—len-string"><a href="#1-3-2、-示例—len-string" class="headerlink" title="1.3.2、 示例—len(string)"></a>1.3.2、 示例—len(string)</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;洋群满满爱python&quot;</span></span><br><span class="line">b = <span class="built_in">len</span>(a)</span><br><span class="line">print(b)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; 11</span><br></pre></td></tr></table></figure><h4 id="1-4、-分割字符串"><a href="#1-4、-分割字符串" class="headerlink" title="1.4、  分割字符串"></a>1.4、  分割字符串</h4><p>​        通过split分割字符串,常用于将字符串转换成列表。</p><h5 id="1-4-1、-语法"><a href="#1-4-1、-语法" class="headerlink" title="1.4.1、 语法"></a>1.4.1、 语法</h5><blockquote><p>str.split(sep,maxsplit)<br>str.rsplit(sep,maxsplit)<br>- sep：分割符，默认为None。<br>- maxsplit：最大分割数，默认无限制。<br>- split：从左往右分割。<br>- rsplit：从右往左分割 。</p></blockquote><h5 id="1-4-2、-示例1—split"><a href="#1-4-2、-示例1—split" class="headerlink" title="1.4.2、 示例1—split"></a>1.4.2、 示例1—split</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;洋群满满,爱,python&quot;</span></span><br><span class="line">b = a.split(<span class="string">&quot;,&quot;</span>,<span class="number">1</span>)</span><br><span class="line">print(b)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; [&#x27;洋群满满&#x27;, &#x27;爱,python&#x27;]</span><br></pre></td></tr></table></figure><h5 id="1-4-3、-示例2—rsplit"><a href="#1-4-3、-示例2—rsplit" class="headerlink" title="1.4.3、 示例2—rsplit"></a>1.4.3、 示例2—rsplit</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;洋群满满,爱,python&quot;</span></span><br><span class="line">b = a.rsplit(<span class="string">&quot;,&quot;</span>,<span class="number">1</span>)</span><br><span class="line">print(b)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; [&#x27;洋群满满,爱&#x27;, &#x27;python&#x27;]</span><br></pre></td></tr></table></figure><h4 id="1-5、-合并字符串"><a href="#1-5、-合并字符串" class="headerlink" title="1.5、  合并字符串"></a>1.5、  合并字符串</h4><p>​        可以将<strong>可迭代对象</strong>通过<strong>join()**方法</strong>合并成字符串<strong>。（可迭代对象：后续洋群满满会在高级部分进行讲解，并自定义我们想要的可迭代对象）在这里大家可以通俗的理解为可迭代对象就是</strong>str,dict,list,tuple**。</p><h5 id="1-5-1、-语法"><a href="#1-5-1、-语法" class="headerlink" title="1.5.1、 语法"></a>1.5.1、 语法</h5><blockquote><p>str.join(iterable)</p></blockquote><h5 id="1-5-2、-示例1-join"><a href="#1-5-2、-示例1-join" class="headerlink" title="1.5.2、 示例1(join)"></a>1.5.2、 示例1(join)</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="string">&quot;洋群满满&quot;</span>, <span class="string">&quot;爱&quot;</span>, <span class="string">&quot;python&quot;</span>]</span><br><span class="line">b = <span class="string">&quot;&quot;</span>.join(a)</span><br><span class="line">print(b)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; 洋群满满爱python</span><br></pre></td></tr></table></figure><h5 id="1-5-3、-示例2-不常用"><a href="#1-5-3、-示例2-不常用" class="headerlink" title="1.5.3、 示例2(不常用)"></a>1.5.3、 示例2(不常用)</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="string">&quot;洋洋爱&quot;</span>: <span class="string">&quot;当然&quot;</span>, <span class="string">&quot;群群&quot;</span>: <span class="string">&quot;是的&quot;</span>&#125;</span><br><span class="line">b = <span class="string">&quot;&quot;</span>.join(a)</span><br><span class="line">print(b)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; 洋洋爱群群</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1-6、-检测子字符串在字符串的索引"><a href="#1-6、-检测子字符串在字符串的索引" class="headerlink" title="1.6、  检测子字符串在字符串的索引"></a>1.6、  检测子字符串在字符串的索引</h4><p>​        <strong>ps</strong>：当子字符串不存在时，会报错！可以利用这个特性来<strong>判断子字符串是否存在</strong>。</p><h5 id="1-6-1、-语法"><a href="#1-6-1、-语法" class="headerlink" title="1.6.1、 语法"></a>1.6.1、 语法</h5><blockquote><p>str.index(sub[, start[, end]]) -&gt; int<br>- sub：要检测的子字符串。<br>- start：检测的开始位置索引，默认从头开始。<br>- end：检测的结束位置索引，默认到最后。<br>可灵活使用！</p></blockquote><h5 id="1-6-2、-示例1"><a href="#1-6-2、-示例1" class="headerlink" title="1.6.2、 示例1"></a>1.6.2、 示例1</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;洋洋是群群的呀&quot;</span></span><br><span class="line">b = a.index(<span class="string">&quot;洋洋&quot;</span>)</span><br><span class="line"><span class="comment"># b = a.index(&quot;洋洋&quot;, 0, -1)</span></span><br><span class="line">print(b)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="1-6-3、-示例2"><a href="#1-6-3、-示例2" class="headerlink" title="1.6.3、 示例2"></a>1.6.3、 示例2</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;洋洋是群群的呀&quot;</span></span><br><span class="line">b = a.index(<span class="string">&quot;洋群&quot;</span>)</span><br><span class="line"><span class="comment"># b = a.index(&quot;洋群&quot;, 0, -1)</span></span><br><span class="line">print(b)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">抛出异常 ValueError</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1-7、-指定字符串开头或者结尾"><a href="#1-7、-指定字符串开头或者结尾" class="headerlink" title="1.7、  指定字符串开头或者结尾"></a>1.7、  指定字符串开头或者结尾</h4><p><strong>startswith()**指定</strong>某个字符串开头<strong>。如果</strong>是<strong>，返回</strong>True<strong>，</strong>反之<strong>返回</strong>False<strong>。<br>**endswith()**指定</strong>某个字符串结尾<strong>。如果</strong>是<strong>，返回</strong>True<strong>，</strong>反之<strong>返回</strong>False**。</p><h5 id="1-7-1、语法"><a href="#1-7-1、语法" class="headerlink" title="1.7.1、语法"></a>1.7.1、语法</h5><blockquote><p>str.startswith(prefix[, start[, end]]) -&gt; bool<br>str.endswith(suffix[, start[, end]]) -&gt; bool<br>- prefix/suffix: 要检测的子字符串。<br>- start: 检测的开始位置索引, 默认从头开始。<br>- end: 检测的结束位置索引, 默认到最后。</p></blockquote><h5 id="1-7-2、-示例1"><a href="#1-7-2、-示例1" class="headerlink" title="1.7.2、 示例1"></a>1.7.2、 示例1</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;洋洋是群群的呀&quot;</span></span><br><span class="line">b = a.startswith(<span class="string">&quot;洋洋&quot;</span>)</span><br><span class="line"><span class="comment"># b = a.startswith(&quot;洋洋&quot;,0,-1)</span></span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; True</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="1-7-3、-示例2"><a href="#1-7-3、-示例2" class="headerlink" title="1.7.3、 示例2"></a>1.7.3、 示例2</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;洋洋是群群呀&quot;</span></span><br><span class="line">b = a.endswith(<span class="string">&quot;群群&quot;</span>)</span><br><span class="line"><span class="comment"># b = a.endswith(&quot;群群&quot;,0,-1)  输出Ture</span></span><br><span class="line">print(b)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; False</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        思考一下为什么b=a.endswith(“洋群满满”,0,-1)的时候输出True, 洋洋会在下篇进行解释</p><h4 id="1-8、-字符串转全部大写"><a href="#1-8、-字符串转全部大写" class="headerlink" title="1.8、  字符串转全部大写"></a>1.8、  字符串转全部大写</h4><h5 id="1-8-1、-语法"><a href="#1-8-1、-语法" class="headerlink" title="1.8.1、 语法"></a>1.8.1、 语法</h5><blockquote><p>str.upper()</p></blockquote><h5 id="1-8-2、-示例—upper"><a href="#1-8-2、-示例—upper" class="headerlink" title="1.8.2、 示例—upper"></a>1.8.2、 示例—upper</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;abc&quot;</span></span><br><span class="line">b = a.upper()</span><br><span class="line">print(b)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; ABC</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1-9、-字符串转全部小写"><a href="#1-9、-字符串转全部小写" class="headerlink" title="1.9、  字符串转全部小写"></a>1.9、  字符串转全部小写</h4><h5 id="1-9-1、-语法"><a href="#1-9-1、-语法" class="headerlink" title="1.9.1、 语法"></a>1.9.1、 语法</h5><blockquote><p>str.lower()</p></blockquote><h5 id="1-9-2、-示例—lower"><a href="#1-9-2、-示例—lower" class="headerlink" title="1.9.2、 示例—lower"></a>1.9.2、 示例—lower</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;ABC&quot;</span></span><br><span class="line">b = a.lower()</span><br><span class="line">print(b)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; abc</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1-10、-字符串格式化"><a href="#1-10、-字符串格式化" class="headerlink" title="1.10、  字符串格式化"></a>1.10、  字符串格式化</h4><h5 id="1-10-1、-语法"><a href="#1-10-1、-语法" class="headerlink" title="1.10.1、 语法"></a>1.10.1、 语法</h5><blockquote><p>① %<br>② format()<br>③ f-string<br>注意：第一种方式官方并不太建议, 详细请看<a href="https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting">官方文档</a><br><img src="https://img-blog.csdnimg.cn/img_convert/98083ad42addae13b1abfc3595262333.png" alt="img"><br>第三种f-string格式化方式需要python3.7以上的版本!!!</p></blockquote><h5 id="1-10-2、-示例—"><a href="#1-10-2、-示例—" class="headerlink" title="1.10.2、 示例—%"></a>1.10.2、 示例—%</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;洋群满满&quot;</span></span><br><span class="line">b = <span class="string">&quot;hello %s&quot;</span> % a</span><br><span class="line">print(b)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; hello 洋群满满</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="1-10-3、-示例—-format"><a href="#1-10-3、-示例—-format" class="headerlink" title="1.10.3、 示例— format()"></a>1.10.3、 示例— format()</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;洋群满满&quot;</span></span><br><span class="line">b = <span class="string">&quot;hello &#123;&#125;&quot;</span>.<span class="built_in">format</span>(a)</span><br><span class="line">print(b)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; hello 洋群满满</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="1-10-4、-示例—-f-string"><a href="#1-10-4、-示例—-f-string" class="headerlink" title="1.10.4、 示例— f-string"></a>1.10.4、 示例— f-string</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;洋群满满&quot;</span></span><br><span class="line">b = <span class="string">f&quot;hello <span class="subst">&#123;a&#125;</span>&quot;</span></span><br><span class="line">print(b)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; hello 洋群满满</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1-11、-编解码"><a href="#1-11、-编解码" class="headerlink" title="1.11、  编解码"></a>1.11、  编解码</h4><h5 id="1-11-1、-概念"><a href="#1-11-1、-概念" class="headerlink" title="1.11.1、 概念"></a>1.11.1、 概念</h5><blockquote><p>编码: 将字符串编码成字节。<br>解码: 将字节解码成字符串。</p></blockquote><h5 id="1-11-2、-语法"><a href="#1-11-2、-语法" class="headerlink" title="1.11.2、 语法"></a>1.11.2、 语法</h5><blockquote><p>编码: str.encode(encoding,errors)<br>解码: str.decode(encoding,errors)<br>- encoding: 需要编码或者解码的格式, 一般为utf-8, 或者gbk。<br>- errors: 错误的处理方式, 默认是strict, 遇到非法字符抛出异常, 默认即可。<br>后续洋群满满会专门加一篇ASCII和Unicode和UTF-8和gbk的文章。</p></blockquote><h5 id="1-11-3、-示例—encode"><a href="#1-11-3、-示例—encode" class="headerlink" title="1.11.3、 示例—encode"></a>1.11.3、 示例—encode</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;洋群满满&quot;</span></span><br><span class="line">b = a.encode()</span><br><span class="line">print(b)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; b&#x27;\xe6\xb4\x8b\xe7\xbe\xa4\xe6\xbb\xa1\xe6\xbb\xa1&#x27;</span><br><span class="line">注：输出的是以<span class="number">16</span>进制形式的字符编码值</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="1-11-4、-示例—decode"><a href="#1-11-4、-示例—decode" class="headerlink" title="1.11.4、 示例—decode"></a>1.11.4、 示例—decode</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">b&#x27;\xe6\xb4\x8b\xe7\xbe\xa4\xe6\xbb\xa1\xe6\xbb\xa1&#x27;</span></span><br><span class="line">b = a.decode()</span><br><span class="line">print(b)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; 洋群满满</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2、-数字型常用方法"><a href="#2、-数字型常用方法" class="headerlink" title="2、 数字型常用方法"></a>2、 数字型常用方法</h3><h4 id="2-1、-浮点型转整型"><a href="#2-1、-浮点型转整型" class="headerlink" title="2.1、  浮点型转整型"></a>2.1、  浮点型转整型</h4><h5 id="2-1-1、-语法"><a href="#2-1-1、-语法" class="headerlink" title="2.1.1、 语法"></a>2.1.1、 语法</h5><blockquote><p>int()</p></blockquote><h5 id="2-1-2、-示例—int"><a href="#2-1-2、-示例—int" class="headerlink" title="2.1.2、 示例—int"></a>2.1.2、 示例—int</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1.1</span></span><br><span class="line">b = <span class="built_in">int</span>(a)</span><br><span class="line">print(b)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; 1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-2、-保留小数位并四舍五入"><a href="#2-2、-保留小数位并四舍五入" class="headerlink" title="2.2、  保留小数位并四舍五入"></a>2.2、  保留小数位并四舍五入</h4><h5 id="2-2-1、-语法"><a href="#2-2-1、-语法" class="headerlink" title="2.2.1、 语法"></a>2.2.1、 语法</h5><blockquote><p>round(number, digits)<br>- digits: 四舍五入时要使用的小数位数，默认为0。</p></blockquote><h5 id="2-2-2、-示例—round"><a href="#2-2-2、-示例—round" class="headerlink" title="2.2.2、 示例—round"></a>2.2.2、 示例—round</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">3.1415</span></span><br><span class="line">b = <span class="built_in">round</span>(a, <span class="number">3</span>)</span><br><span class="line">print(b)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; 3.142</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3、-列表常用方法"><a href="#3、-列表常用方法" class="headerlink" title="3、 列表常用方法"></a>3、 列表常用方法</h3><p>​        <strong>注意: 想要熟悉掌握列表常用方法, 必须熟悉上一篇的索引, 以及可变类型。</strong></p><h4 id="3-1、-将其他类型转换成列表"><a href="#3-1、-将其他类型转换成列表" class="headerlink" title="3.1、  将其他类型转换成列表"></a>3.1、  将其他类型转换成列表</h4><h5 id="3-1-1、-语法"><a href="#3-1-1、-语法" class="headerlink" title="3.1.1、 语法"></a>3.1.1、 语法</h5><blockquote><p>list(iterable)<br>可迭代对象iterable字符串部分已经备注, 这里洋群满满就不备注了。</p></blockquote><h5 id="3-1-2、-示例—list"><a href="#3-1-2、-示例—list" class="headerlink" title="3.1.2、 示例—list"></a>3.1.2、 示例—list</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">b = <span class="built_in">list</span>(a)</span><br><span class="line">print(b)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; [1, 2, 3]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-2、-指定位置插入数据"><a href="#3-2、-指定位置插入数据" class="headerlink" title="3.2、  指定位置插入数据"></a>3.2、  指定位置插入数据</h4><h5 id="3-2-1、-语法"><a href="#3-2-1、-语法" class="headerlink" title="3.2.1、 语法"></a>3.2.1、 语法</h5><blockquote><p>list.insert(index,obj)</p></blockquote><h5 id="3-2-2、-示例—insert"><a href="#3-2-2、-示例—insert" class="headerlink" title="3.2.2、 示例—insert"></a>3.2.2、 示例—insert</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">a.insert(<span class="number">1</span>, <span class="string">&quot;洋群满满&quot;</span>)</span><br><span class="line">print(a)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; [1, &#x27;洋群满满&#x27;, 2, 3]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-3、-在列表末尾添加数据"><a href="#3-3、-在列表末尾添加数据" class="headerlink" title="3.3、  在列表末尾添加数据"></a>3.3、  在列表末尾添加数据</h4><h5 id="3-3-1、-语法"><a href="#3-3-1、-语法" class="headerlink" title="3.3.1、 语法"></a>3.3.1、 语法</h5><blockquote><p>list.append(obj)</p></blockquote><h5 id="3-3-2、-示例—append"><a href="#3-3-2、-示例—append" class="headerlink" title="3.3.2、 示例—append"></a>3.3.2、 示例—append</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">a.append(<span class="string">&quot;洋群满满&quot;</span>)</span><br><span class="line">print(a)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; [1, 2, 3, &#x27;洋群满满&#x27;]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-4、-将其他可迭代对象追加到列表中"><a href="#3-4、-将其他可迭代对象追加到列表中" class="headerlink" title="3.4、  将其他可迭代对象追加到列表中"></a>3.4、  将其他可迭代对象追加到列表中</h4><h5 id="3-4-1、-语法"><a href="#3-4-1、-语法" class="headerlink" title="3.4.1、 语法"></a>3.4.1、 语法</h5><blockquote><p>list.extend(iterable)</p></blockquote><h5 id="3-4-2、-示例—extend"><a href="#3-4-2、-示例—extend" class="headerlink" title="3.4.2、 示例—extend"></a>3.4.2、 示例—extend</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">a.extend((<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>))</span><br><span class="line">print(a)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; [1, 2, 3, 4, 5, 6]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-5、-修改指定索引的数据"><a href="#3-5、-修改指定索引的数据" class="headerlink" title="3.5、  修改指定索引的数据"></a>3.5、  修改指定索引的数据</h4><h5 id="3-5-1、-语法"><a href="#3-5-1、-语法" class="headerlink" title="3.5.1、 语法"></a>3.5.1、 语法</h5><blockquote><p>list[index] = obj</p></blockquote><h5 id="3-5-2、-示例—index"><a href="#3-5-2、-示例—index" class="headerlink" title="3.5.2、 示例—index"></a>3.5.2、 示例—index</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">a[<span class="number">0</span>] = <span class="string">&quot;洋群满满&quot;</span></span><br><span class="line">print(a)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; [&#x27;洋群满满&#x27;, 2, 3]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-6、-删除指定索引的数据"><a href="#3-6、-删除指定索引的数据" class="headerlink" title="3.6、  删除指定索引的数据"></a>3.6、  删除指定索引的数据</h4><h5 id="3-6-1、-语法"><a href="#3-6-1、-语法" class="headerlink" title="3.6.1、 语法"></a>3.6.1、 语法</h5><blockquote><p>① del list[index]<br>② list.pop(index)</p></blockquote><h5 id="3-6-2、-示例—del"><a href="#3-6-2、-示例—del" class="headerlink" title="3.6.2、 示例—del"></a>3.6.2、 示例—del</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">del</span> a[<span class="number">2</span>]</span><br><span class="line">print(a)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; [1, 2]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="3-6-3、-示例—pop"><a href="#3-6-3、-示例—pop" class="headerlink" title="3.6.3、 示例—pop"></a>3.6.3、 示例—pop</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">a.pop(<span class="number">2</span>)</span><br><span class="line">print(a)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; [1, 2]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-7、-删除第一个出现的指定数据"><a href="#3-7、-删除第一个出现的指定数据" class="headerlink" title="3.7、  删除第一个出现的指定数据"></a>3.7、  删除第一个出现的指定数据</h4><h5 id="3-7-1、-语法"><a href="#3-7-1、-语法" class="headerlink" title="3.7.1、 语法"></a>3.7.1、 语法</h5><blockquote><p>list.remove(value)</p></blockquote><h5 id="3-7-2、-示例—remove"><a href="#3-7-2、-示例—remove" class="headerlink" title="3.7.2、 示例—remove"></a>3.7.2、 示例—remove</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>]</span><br><span class="line">a.remove(<span class="number">2</span>)</span><br><span class="line">print(a)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; [1, 3, 2]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-8、-清空列表"><a href="#3-8、-清空列表" class="headerlink" title="3.8、  清空列表"></a>3.8、  清空列表</h4><h5 id="3-8-1、-语法"><a href="#3-8-1、-语法" class="headerlink" title="3.8.1、 语法"></a>3.8.1、 语法</h5><blockquote><p>list.clear()</p></blockquote><h5 id="3-8-2、-示例—clear"><a href="#3-8-2、-示例—clear" class="headerlink" title="3.8.2、 示例—clear"></a>3.8.2、 示例—clear</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">a.clear()</span><br><span class="line">print(a)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; []</span><br><span class="line"><span class="number">12345</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-9、-统计列表长度"><a href="#3-9、-统计列表长度" class="headerlink" title="3.9、  统计列表长度"></a>3.9、  统计列表长度</h4><h5 id="3-9-1、-语法"><a href="#3-9-1、-语法" class="headerlink" title="3.9.1、 语法"></a>3.9.1、 语法</h5><blockquote><p>len(list)</p></blockquote><h5 id="3-9-2、-示例—len"><a href="#3-9-2、-示例—len" class="headerlink" title="3.9.2、 示例—len"></a>3.9.2、 示例—len</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = <span class="built_in">len</span>(a)</span><br><span class="line">print(b)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; 3</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-10、-统计数据在列表中出现的次数"><a href="#3-10、-统计数据在列表中出现的次数" class="headerlink" title="3.10、  统计数据在列表中出现的次数"></a>3.10、  统计数据在列表中出现的次数</h4><h5 id="3-10-1、-语法"><a href="#3-10-1、-语法" class="headerlink" title="3.10.1、 语法"></a>3.10.1、 语法</h5><blockquote><p>list.count(value)</p></blockquote><h5 id="3-10-2、-示例—count"><a href="#3-10-2、-示例—count" class="headerlink" title="3.10.2、 示例—count"></a>3.10.2、 示例—count</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>]</span><br><span class="line">b = a.count(<span class="number">2</span>)</span><br><span class="line">print(b)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; 2</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-11、-列表排序"><a href="#3-11、-列表排序" class="headerlink" title="3.11、  列表排序"></a>3.11、  列表排序</h4><h5 id="3-11-1、-语法"><a href="#3-11-1、-语法" class="headerlink" title="3.11.1、 语法"></a>3.11.1、 语法</h5><blockquote><p>list.sort(key,reverse)<br>- key: 指定排序方式的函数。<br>- reverse: 等于True降序, 等于False升序, 默认False。</p></blockquote><h5 id="3-11-2、-示例—sort"><a href="#3-11-2、-示例—sort" class="headerlink" title="3.11.2、 示例—sort"></a>3.11.2、 示例—sort</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>]</span><br><span class="line">a.sort()</span><br><span class="line">print(a)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; [1, 2, 2, 3]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="3-11-3、-示例—根据字典的-key-洋群满满-进行升序排序"><a href="#3-11-3、-示例—根据字典的-key-洋群满满-进行升序排序" class="headerlink" title="3.11.3、 示例—根据字典的 key=洋群满满 进行升序排序"></a>3.11.3、 示例—根据字典的 key=洋群满满 进行升序排序</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_list</span>(<span class="params">e</span>):</span></span><br><span class="line">    <span class="keyword">return</span> e[<span class="string">&quot;洋群满满&quot;</span>]</span><br><span class="line"></span><br><span class="line">a = [&#123;<span class="string">&quot;洋群满满&quot;</span>: <span class="number">18</span>&#125;, &#123;<span class="string">&quot;洋群满满&quot;</span>: <span class="number">26</span>&#125;, &#123;<span class="string">&quot;洋群满满&quot;</span>: <span class="number">20</span>&#125;]</span><br><span class="line">a.sort(key=hello_list)</span><br><span class="line">print(a)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; [&#123;&#x27;洋群满满&#x27;: 18&#125;, &#123;&#x27;洋群满满&#x27;: 20&#125;, &#123;&#x27;洋群满满&#x27;: 26&#125;]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        <strong>备注：<a href="https://yangyangmm.cn/2021/01/06/Python%E5%87%BD%E6%95%B0/">函数</a>在前面已经详细讲解, 上述示例只是演示key的作用。</strong></p><h4 id="3-12、-列表反转"><a href="#3-12、-列表反转" class="headerlink" title="3.12、  列表反转"></a>3.12、  列表反转</h4><h5 id="3-12-1、-语法"><a href="#3-12-1、-语法" class="headerlink" title="3.12.1、 语法"></a>3.12.1、 语法</h5><blockquote><p>list.reverse()</p></blockquote><h5 id="3-12-2、-示例—reverse"><a href="#3-12-2、-示例—reverse" class="headerlink" title="3.12.2、 示例—reverse"></a>3.12.2、 示例—reverse</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">a.reverse()</span><br><span class="line">print(a)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; [4, 3, 2, 1]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4、-元组的常用方法"><a href="#4、-元组的常用方法" class="headerlink" title="4、 元组的常用方法"></a>4、 元组的常用方法</h3><h4 id="4-1、-创建空元组"><a href="#4-1、-创建空元组" class="headerlink" title="4.1、  创建空元组"></a>4.1、  创建空元组</h4><h5 id="4-1-1、-语法"><a href="#4-1-1、-语法" class="headerlink" title="4.1.1、 语法"></a>4.1.1、 语法</h5><blockquote><p>① tuple()<br>② ()</p></blockquote><h5 id="4-1-2、-示例—tuple"><a href="#4-1-2、-示例—tuple" class="headerlink" title="4.1.2、 示例—tuple()"></a>4.1.2、 示例—tuple()</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">tuple</span>()</span><br><span class="line"><span class="comment"># a = ()</span></span><br><span class="line">print(a)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; ()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-2、-通过索引访问元组的值"><a href="#4-2、-通过索引访问元组的值" class="headerlink" title="4.2、  通过索引访问元组的值"></a>4.2、  通过索引访问元组的值</h4><h5 id="4-2-1、-语法"><a href="#4-2-1、-语法" class="headerlink" title="4.2.1、 语法"></a>4.2.1、 语法</h5><blockquote><p>tuple[index]</p></blockquote><h5 id="4-2-2、-示例—tuple-index"><a href="#4-2-2、-示例—tuple-index" class="headerlink" title="4.2.2、 示例—tuple[index]"></a>4.2.2、 示例—tuple[index]</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">b = a[<span class="number">0</span>]</span><br><span class="line">print(b)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; 1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-3、-删除元组"><a href="#4-3、-删除元组" class="headerlink" title="4.3、  删除元组"></a>4.3、  删除元组</h4><h5 id="4-3-1、-语法"><a href="#4-3-1、-语法" class="headerlink" title="4.3.1、 语法"></a>4.3.1、 语法</h5><blockquote><p>del tuple</p></blockquote><h5 id="4-3-2、示例—del-tuple"><a href="#4-3-2、示例—del-tuple" class="headerlink" title="4.3.2、示例—del tuple"></a>4.3.2、示例—del tuple</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">print(a)</span><br><span class="line"><span class="keyword">del</span> a</span><br><span class="line">print(a)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">第一行输出 ---&gt; (1,2,3,4)</span><br><span class="line">第二行抛出 NameError</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        <strong>注意: 上篇已经明确表示元组是不可变类型, 所以对于元组来说不存在修改和切片。因为当你修改元组时, 实际情况是会在内存中开辟新的内存地址用来存放新的元组。</strong></p><p>​        下面用代码给大家演示一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">print(<span class="string">f&quot;原元组的值是<span class="subst">&#123;a&#125;</span>&quot;</span>)</span><br><span class="line">print(<span class="string">f&quot;原元组的内存地址是<span class="subst">&#123;<span class="built_in">id</span>(a)&#125;</span>&quot;</span>)</span><br><span class="line">b = a[:<span class="number">2</span>]</span><br><span class="line">print(<span class="string">f&quot;修改后元组的值是<span class="subst">&#123;b&#125;</span>&quot;</span>)</span><br><span class="line">print(<span class="string">f&quot;修改后元组的内存地址是<span class="subst">&#123;<span class="built_in">id</span>(b)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        <strong>备注: python通过内置函数id()来访问值的内存地址</strong></p><p>​        输出结果如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">C:\Python\python.exe D:/Desktop/test/demo.py</span><br><span class="line">原元组的值是(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">原元组的内存地址是<span class="number">2745085044200</span></span><br><span class="line">修改后元组的值是(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">修改后元组的内存地址是<span class="number">2745085729928</span></span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5、-字典的常用方法"><a href="#5、-字典的常用方法" class="headerlink" title="5、 字典的常用方法"></a>5、 字典的常用方法</h3><p>​        想要熟练掌握字典的常用方法，需要对上一篇字典的key-value(键值对)的格式比较熟悉，字典的key必须是不可变类型，value可以是任何类型。</p><h4 id="5-1、-创建空字典"><a href="#5-1、-创建空字典" class="headerlink" title="5.1、  创建空字典"></a>5.1、  创建空字典</h4><h5 id="5-1-1、-语法"><a href="#5-1-1、-语法" class="headerlink" title="5.1.1、 语法"></a>5.1.1、 语法</h5><blockquote><p>① dict()<br>② {}</p></blockquote><h5 id="5-1-2、-示例—dict"><a href="#5-1-2、-示例—dict" class="headerlink" title="5.1.2、 示例—dict"></a>5.1.2、 示例—dict</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;&#125;</span><br><span class="line"><span class="comment">#a = dict()</span></span><br><span class="line">print(a)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-2、-获取字典的值"><a href="#5-2、-获取字典的值" class="headerlink" title="5.2、  获取字典的值"></a>5.2、  获取字典的值</h4><h5 id="5-2-1、-语法"><a href="#5-2-1、-语法" class="headerlink" title="5.2.1、 语法"></a>5.2.1、 语法</h5><blockquote><p>① dict[key]<br>② dict.get(key, default=None)</p></blockquote><h5 id="5-2-2、-示例1—dict-key"><a href="#5-2-2、-示例1—dict-key" class="headerlink" title="5.2.2、 示例1—dict[key]"></a>5.2.2、 示例1—dict[key]</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;洋群满满&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">23</span>&#125;</span><br><span class="line">print(a[<span class="string">&quot;name&quot;</span>])</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; 洋群满满</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="5-2-3、-示例2—dict-get"><a href="#5-2-3、-示例2—dict-get" class="headerlink" title="5.2.3、 示例2—dict.get"></a>5.2.3、 示例2—dict.get</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;洋群满满&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="string">&quot;23&quot;</span>&#125;</span><br><span class="line">b = a.get(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">print(b)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; 洋群满满</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        <strong>注意: 在第一种方式中, 如果key不存在, 会抛出异常；第二种方式如果key不存在, 则返回默认值。</strong></p><h4 id="5-3、-修改字典的值"><a href="#5-3、-修改字典的值" class="headerlink" title="5.3、  修改字典的值"></a>5.3、  修改字典的值</h4><h5 id="5-3-1、-语法"><a href="#5-3-1、-语法" class="headerlink" title="5.3.1、 语法"></a>5.3.1、 语法</h5><blockquote><p>① dict[key] = value<br>② dict.update(new_dict)</p></blockquote><h5 id="5-3-2、-示例1—dict-key-value"><a href="#5-3-2、-示例1—dict-key-value" class="headerlink" title="5.3.2、 示例1—dict[key] = value"></a>5.3.2、 示例1—dict[key] = value</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;洋洋&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">23</span>&#125;</span><br><span class="line">a[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;洋群满满&quot;</span></span><br><span class="line">print(a)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; &#123;&#x27;name&#x27;: &#x27;洋群满满&#x27;, &#x27;age&#x27;: 23&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="5-3-4、-示例2—dict-update-new-dict"><a href="#5-3-4、-示例2—dict-update-new-dict" class="headerlink" title="5.3.4、 示例2—dict.update(new_dict)"></a>5.3.4、 示例2—dict.update(new_dict)</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;洋群满满&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">23</span>&#125;</span><br><span class="line">a.update(&#123;<span class="string">&quot;python&quot;</span>: <span class="string">&quot;hello&quot;</span>&#125;)</span><br><span class="line">print(a)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; &#123;&#x27;name&#x27;: &#x27;洋群满满&#x27;, &#x27;age&#x27;: 23, &#x27;python&#x27;: &#x27;hello&#x27;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        <strong>注意: 如果指定的key在字典中不存在, 那么就是增加一个键值对。</strong></p><h4 id="5-4、-计算字典元素个数"><a href="#5-4、-计算字典元素个数" class="headerlink" title="5.4、  计算字典元素个数"></a>5.4、  计算字典元素个数</h4><h5 id="5-4-1、-语法"><a href="#5-4-1、-语法" class="headerlink" title="5.4.1、 语法"></a>5.4.1、 语法</h5><blockquote><p>len(dict)</p></blockquote><h5 id="5-4-2、-示例—len-dict"><a href="#5-4-2、-示例—len-dict" class="headerlink" title="5.4.2、 示例—len(dict)"></a>5.4.2、 示例—len(dict)</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;洋群满满&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">23</span>&#125;</span><br><span class="line">b = <span class="built_in">len</span>(a)</span><br><span class="line">print(b)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; 2</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-5、-获取字典所有的key"><a href="#5-5、-获取字典所有的key" class="headerlink" title="5.5、  获取字典所有的key"></a>5.5、  获取字典所有的key</h4><h5 id="5-5-1、-语法"><a href="#5-5-1、-语法" class="headerlink" title="5.5.1、 语法"></a>5.5.1、 语法</h5><blockquote><p>dict.keys()</p></blockquote><h5 id="5-5-2、-示例—dict-keys"><a href="#5-5-2、-示例—dict-keys" class="headerlink" title="5.5.2、 示例—dict.keys()"></a>5.5.2、 示例—dict.keys()</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;洋群满满&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">23</span>&#125;</span><br><span class="line">b = a.keys()</span><br><span class="line">print(b)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; [&quot;name&quot;,&quot;age&quot;]</span><br><span class="line"><span class="number">12345</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-6、-获取字典所有的value"><a href="#5-6、-获取字典所有的value" class="headerlink" title="5.6、 获取字典所有的value"></a>5.6、 获取字典所有的value</h4><h5 id="5-6-1、-语法"><a href="#5-6-1、-语法" class="headerlink" title="5.6.1、 语法"></a>5.6.1、 语法</h5><blockquote><p>dict.values()</p></blockquote><h5 id="5-6-2、-示例—dict-values"><a href="#5-6-2、-示例—dict-values" class="headerlink" title="5.6.2、 示例—dict.values()"></a>5.6.2、 示例—dict.values()</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;洋群满满&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">23</span>&#125;</span><br><span class="line">b = a.values()</span><br><span class="line">print(b)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; [&#x27;洋群满满&#x27;, &#x27;23&#x27;]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-7、-获取字典的key-value"><a href="#5-7、-获取字典的key-value" class="headerlink" title="5.7、  获取字典的key-value"></a>5.7、  获取字典的key-value</h4><h5 id="5-7-1、-语法"><a href="#5-7-1、-语法" class="headerlink" title="5.7.1、 语法"></a>5.7.1、 语法</h5><blockquote><p>dict.items()</p></blockquote><h5 id="5-7-2、-示例—dict-items"><a href="#5-7-2、-示例—dict-items" class="headerlink" title="5.7.2、 示例—dict.items()"></a>5.7.2、 示例—dict.items()</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;洋群满满&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="string">&quot;23&quot;</span>&#125;</span><br><span class="line">b = a.items()</span><br><span class="line">print(b)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; [(&#x27;name&#x27;, &#x27;洋群满满&#x27;), (&#x27;age&#x27;, &#x27;23&#x27;)]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6、-条件语句"><a href="#6、-条件语句" class="headerlink" title="6、 条件语句"></a>6、 条件语句</h3><p>​        在python中条件语句就是三个关键字 if elif else 。</p><h4 id="6-1、-语法"><a href="#6-1、-语法" class="headerlink" title="6.1、 语法"></a>6.1、 语法</h4><blockquote><p>if 判断条件:<br>　执行代码<br>elif 判断条件:<br>　执行代码<br>else:<br>　执行代码<br>说明: 在上述的条件判断中是互斥的, 也就是说要么执行if的代码, 要么执行elif的代码, 要么执行else的代码, 并且只要其中一个符合条件, 那么程序便不会判断后面的条件了。这部分可以优化代码。</p></blockquote><h5 id="6-1-1、-示例1—if-elif…-else"><a href="#6-1-1、-示例1—if-elif…-else" class="headerlink" title="6.1.1、 示例1—if/elif…/else"></a>6.1.1、 示例1—if/elif…/else</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;洋群满满&quot;</span></span><br><span class="line"><span class="keyword">if</span> a == <span class="string">&quot;洋群满满&quot;</span>:</span><br><span class="line">    print(<span class="string">&quot;洋群满满1&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> a == <span class="string">&quot;洋群满满&quot;</span>:</span><br><span class="line">    print(<span class="string">&quot;洋群满满2&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;什么都不是&quot;</span>)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; 洋群满满1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="6-1-2、-示例2—if-if-if…"><a href="#6-1-2、-示例2—if-if-if…" class="headerlink" title="6.1.2、 示例2—if/if/if…"></a>6.1.2、 示例2—if/if/if…</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;洋群满满&quot;</span></span><br><span class="line"><span class="keyword">if</span> a == <span class="string">&quot;洋群满满&quot;</span>:</span><br><span class="line">    print(<span class="string">&quot;洋群满满1&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> a == <span class="string">&quot;洋群满满&quot;</span>:</span><br><span class="line">    print(<span class="string">&quot;洋群满满2&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> a == <span class="string">&quot;洋群满满&quot;</span>:</span><br><span class="line">    print(<span class="string">&quot;洋群满满3&quot;</span>)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; 洋群满满1</span><br><span class="line">输出 ---&gt; 洋群满满2</span><br><span class="line">输出 ---&gt; 洋群满满3</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7、-循环语句"><a href="#7、-循环语句" class="headerlink" title="7、 循环语句"></a>7、 循环语句</h3><p>​        python中循环包括while循环和for循环。</p><ul><li>while循环：表示给定一个判断条件为True时, 进入循环体, 为False跳出循环体；</li><li>for循环：表示会重复的执行语句；</li><li>死循环：表示程序一直在循环体当中跳不出来。一定要避免死循环!!!</li></ul><h4 id="7-1、-while循环"><a href="#7-1、-while循环" class="headerlink" title="7.1、  while循环"></a>7.1、  while循环</h4><h5 id="7-1-1、-语法"><a href="#7-1-1、-语法" class="headerlink" title="7.1.1、 语法"></a>7.1.1、 语法</h5><blockquote><p>while 判断条件:<br>　执行代码</p></blockquote><h5 id="7-1-2、-示例—while"><a href="#7-1-2、-示例—while" class="headerlink" title="7.1.2、 示例—while"></a>7.1.2、 示例—while</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> a &lt; <span class="number">10</span>:</span><br><span class="line">    print(a)</span><br><span class="line">    a += <span class="number">1</span></span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; 0-9</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="7-2、-for循环"><a href="#7-2、-for循环" class="headerlink" title="7.2、  for循环"></a>7.2、  for循环</h4><h5 id="7-2-1、-语法"><a href="#7-2-1、-语法" class="headerlink" title="7.2.1、 语法"></a>7.2.1、 语法</h5><blockquote><p>① for iterating_var in iterable:<br>　　　执行代码<br>② for iterating_var in range(start,stop,step)<br>　　　执行代码<br>- start是开始数据<br>- stop是结束数据<br>- step是步长</p></blockquote><h5 id="7-2-3、-示例1—in"><a href="#7-2-3、-示例1—in" class="headerlink" title="7.2.3、 示例1—in"></a>7.2.3、 示例1—in</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]:</span><br><span class="line">    print(i)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; 1~3</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="7-2-4、-示例２—in-range"><a href="#7-2-4、-示例２—in-range" class="headerlink" title="7.2.4、 示例２—in range"></a>7.2.4、 示例２—in range</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>):</span><br><span class="line">    print(i)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; 1 3 5 7 9</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="7-3、-循环控制语句"><a href="#7-3、-循环控制语句" class="headerlink" title="7.3、  循环控制语句"></a>7.3、  循环控制语句</h4><h5 id="7-3-1、-语法"><a href="#7-3-1、-语法" class="headerlink" title="7.3.1、 语法"></a>7.3.1、 语法</h5><blockquote><p>① break<br>② continue<br>说明:<br>- break会终止循环体，程序不再往下循环；<br>- continue结束本次循环，程序继续下一次的循环。<br>注意: 如果是嵌套循环, 那么break终止的是当前所在的循环体, 而不是整个循环嵌套体。</p></blockquote><h5 id="7-3-2、-示例1—break"><a href="#7-3-2、-示例1—break" class="headerlink" title="7.3.2、 示例1—break"></a>7.3.2、 示例1—break</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]:</span><br><span class="line">        <span class="keyword">if</span> j == <span class="number">5</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        print(j)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; 4 4 4</span><br><span class="line">解释一下: 在程序中是一个循环嵌套, 当j==<span class="number">5</span>时, 内层循环会终止进入外层循环的下一次循环。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="7-3-4、-示例2—continue"><a href="#7-3-4、-示例2—continue" class="headerlink" title="7.3.4、 示例2—continue"></a>7.3.4、 示例2—continue</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]:</span><br><span class="line">        <span class="keyword">if</span> j == <span class="number">5</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        print(j)</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">输出 ---&gt; 4 6 4 6 4 6</span><br><span class="line">解释一下: 在程序中是一个循环嵌套, 当j==<span class="number">5</span>时, 内层循环会跳出本次循环, 进入内层循环的下一次循环。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>到此我们在本篇中学习了<strong>python数据类型的常用方法，条件语句和循环语句</strong>。各位coder在学习过程中可在底下评论区发表你们的想法。看到了都会回复的。</p><p>那么下一篇洋群满满将和大家看一下<strong>python当中的异常处理，函数和模块</strong>。</p>]]></content>
    
    
    <summary type="html">这是对Python基础的中期讲解！</summary>
    
    
    
    <category term="Python" scheme="https://yangyangmm.cn/categories/Python/"/>
    
    <category term="Python基础" scheme="https://yangyangmm.cn/categories/Python/Python%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Python" scheme="https://yangyangmm.cn/tags/Python/"/>
    
    <category term="Python基础" scheme="https://yangyangmm.cn/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python基础------初篇</title>
    <link href="https://yangyangmm.cn/2021/01/12/Python%E5%9F%BA%E7%A1%80-%E5%88%9D%E7%AF%87/"/>
    <id>https://yangyangmm.cn/2021/01/12/Python%E5%9F%BA%E7%A1%80-%E5%88%9D%E7%AF%87/</id>
    <published>2021-01-12T06:50:57.000Z</published>
    <updated>2021-01-14T03:00:06.178Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a> <h1 id="Python基础——初篇"><a href="#Python基础——初篇" class="headerlink" title="Python基础——初篇"></a>Python基础——初篇</h1><p>​        在入手<strong>变量</strong>之前我们先来看看经典的编程语句 → <strong>hello world</strong></p><p>​        在python3中输出到控制台的函数是<strong>print()</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="1-1、-变量"><a href="#1-1、-变量" class="headerlink" title="1.1、 变量"></a>1.1、 变量</h3><h4 id="1-1-1、-语法"><a href="#1-1-1、-语法" class="headerlink" title="1.1.1、 语法"></a>1.1.1、 语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">变量名 &#x3D; 变量值</span><br><span class="line">注：每一个变量在使用之前都必须赋值</span><br></pre></td></tr></table></figure><h4 id="1-1-2、-示例"><a href="#1-1-2、-示例" class="headerlink" title="1.1.2、 示例"></a>1.1.2、 示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">20</span></span><br><span class="line">b = <span class="string">&quot;洋群满满&quot;</span></span><br></pre></td></tr></table></figure><h4 id="1-1-3、-本质"><a href="#1-1-3、-本质" class="headerlink" title="1.1.3、 本质"></a>1.1.3、 本质</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在 a &#x3D; 20 中，python解释器一共进行了两步操作：</span><br><span class="line">① 在内存中开辟一片内存地址用来存放数据 20；</span><br><span class="line">② 在内存中创建一个变量名为a的对象，并把它指向了数据 20。</span><br></pre></td></tr></table></figure><p>​        如图：</p><img src="/2021/01/12/Python%E5%9F%BA%E7%A1%80-%E5%88%9D%E7%AF%87/Python中变量的本质之Python基础.jpg" style="zoom:80%;"><ul><li>在python中<strong>变量是内存地址的别名</strong>，也就是说a就代表了0x1002，python没有指针；</li><li>变量a所标示的内存空间存储数据20所在内存地址的过程称为<strong>引用</strong>。</li></ul><h3 id="1-2、-注释"><a href="#1-2、-注释" class="headerlink" title="1.2、 注释"></a>1.2、 注释</h3><p>​        <a href="https://yangyangmm.cn/2021/01/11/Python%E5%9F%BA%E7%A1%80-%E6%B3%A8%E9%87%8A/">Python的注释</a>已经在另一篇文章中讲解过！这里就不再过多叙述了！</p><h3 id="1-3、-运算符"><a href="#1-3、-运算符" class="headerlink" title="1.3、 运算符"></a>1.3、 运算符</h3><p>​        <strong>运算符包括以下内容：</strong></p><ul><li>算数运算符</li><li>比较运算符</li><li>赋值运算符</li><li>逻辑运算符</li><li>身份运算符</li><li>成员运算符</li></ul><h4 id="1-3-1、-算数运算符"><a href="#1-3-1、-算数运算符" class="headerlink" title="1.3.1、 算数运算符"></a>1.3.1、 算数运算符</h4><p>​        前提：a = 20 ; b = 10</p><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>+</td><td>加法</td><td>a+b 输出 30</td></tr><tr><td>-</td><td>减法</td><td>a-b 输出 10</td></tr><tr><td>*</td><td>乘法</td><td>a*b 输出 200</td></tr><tr><td>/</td><td>除法</td><td>a/b 输出 2</td></tr><tr><td>%</td><td>取模(返回除法的余数)</td><td>a%b 输出 0</td></tr><tr><td>**</td><td>幂</td><td>a**b 输出 20的10次方</td></tr><tr><td>//</td><td>取整(向下取整)</td><td>a//b 输出 2</td></tr></tbody></table><h4 id="1-3-2、-比较运算符"><a href="#1-3-2、-比较运算符" class="headerlink" title="1.3.2、 比较运算符"></a>1.3.2、 比较运算符</h4><p>​        前提：a = 20 ; b = 10</p><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>==</td><td>等于(比较两个数是否相等)</td><td>a==b 输出 False</td></tr><tr><td>!=</td><td>不等于(比较两个数是否不等)</td><td>a!=b 输出 True</td></tr><tr><td>&gt;</td><td>大于</td><td>a&gt;b 输出 True</td></tr><tr><td>&lt;</td><td>小于</td><td>a&lt;b 输出 False</td></tr><tr><td>&gt;=</td><td>大于等于</td><td>a&gt;=b 输出 False</td></tr><tr><td>&lt;=</td><td>小于等于</td><td>a&lt;=b 输出 False</td></tr></tbody></table><h4 id="1-3-3、-赋值运算符"><a href="#1-3-3、-赋值运算符" class="headerlink" title="1.3.3、 赋值运算符"></a>1.3.3、 赋值运算符</h4><p>​        前提：a = 20 ; b = 10</p><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>=</td><td>赋值</td><td>a=b 将b赋值给a</td></tr><tr><td>+=</td><td>加等于</td><td>a+=b 等效 a = a + b</td></tr><tr><td>-=</td><td>减等于</td><td>a-=b 等效 a = a - b</td></tr><tr><td>*=</td><td>乘等于</td><td>a*=b 等效 a = a * b</td></tr><tr><td>/=</td><td>除等于</td><td>a/=b 等效 a = a / b</td></tr><tr><td>%=</td><td>模等于</td><td>a%=b 等效 a = a % b</td></tr><tr><td>**=</td><td>幂等于</td><td>a**=b 等效 a = a ** b</td></tr><tr><td>//=</td><td>取整等于</td><td>a//=b 等效 a = a // b</td></tr></tbody></table><h4 id="1-3-4、-逻辑运算符"><a href="#1-3-4、-逻辑运算符" class="headerlink" title="1.3.4、  逻辑运算符"></a>1.3.4、  逻辑运算符</h4><p>​        前提：a = True ; b = False</p><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>and</td><td>两者都为true,才是True</td><td>a and b 输出 False</td></tr><tr><td>or</td><td>两者其中一个为True,就是True</td><td>a or b 输出 True</td></tr><tr><td>not</td><td>值的反义</td><td>not a 输出 False</td></tr></tbody></table><h4 id="1-3-5、-身份运算符"><a href="#1-3-5、-身份运算符" class="headerlink" title="1.3.5、  身份运算符"></a>1.3.5、  身份运算符</h4><p>​        前提：a = True ; b = False</p><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>is</td><td>判断两者的内存地址是否一样</td><td>a is b 输出 False</td></tr><tr><td>is not</td><td>判断两者的内存地址是否不一样</td><td>a is not b 输出 True</td></tr></tbody></table><h4 id="1-3-6、-成员运算符"><a href="#1-3-6、-成员运算符" class="headerlink" title="1.3.6、  成员运算符"></a>1.3.6、  成员运算符</h4><p>​        前提：a = ＂羊群＂ ; b = ＂羊群满满＂</p><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>in</td><td>判断值是否在序列中</td><td>a in b 输出 True</td></tr><tr><td>not in</td><td>判断值是否不在序列中</td><td>a not in b 输出 False</td></tr></tbody></table><h4 id="1-3-7、-运算符优先级"><a href="#1-3-7、-运算符优先级" class="headerlink" title="1.3.7、  运算符优先级"></a>1.3.7、  运算符优先级</h4><p>​        从高到低</p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>**</td><td>指数 (最高优先级)</td></tr><tr><td>* / % //</td><td>乘，除，取模和取整除</td></tr><tr><td>+ -</td><td>加法减法</td></tr><tr><td>&lt;= &lt; &gt; &gt;=</td><td>比较运算符</td></tr><tr><td>== !=</td><td>等于运算符</td></tr><tr><td>= %= /= //= -= += *= **=</td><td>赋值运算符</td></tr><tr><td>is is not</td><td>身份运算符</td></tr><tr><td>in not in</td><td>成员运算符</td></tr><tr><td>not and or</td><td>逻辑运算符</td></tr></tbody></table><h3 id="1-4、-关键字"><a href="#1-4、-关键字" class="headerlink" title="1.4、 关键字"></a>1.4、 关键字</h3><p>​        <strong>关键字</strong>指的是被python内置默认的一些变量名，由于他有特殊的含义，所以我们在定义变量的时候，不能使用关键字作为变量名，python中一共33个关键字，后面绝大部分都会用到。</p><table><thead><tr><th>and</th><th>as</th><th>assert</th><th>break</th><th>class</th></tr></thead><tbody><tr><td>continue</td><td>def</td><td>del</td><td>elif</td><td>else</td></tr><tr><td>except</td><td>finally</td><td>for</td><td>from</td><td>False</td></tr><tr><td>global</td><td>if</td><td>import</td><td>in</td><td>is</td></tr><tr><td>lambda</td><td>nonlocal</td><td>not</td><td>None</td><td>or</td></tr><tr><td>pass</td><td>raise</td><td>return</td><td>try</td><td>True</td></tr><tr><td>while</td><td>with</td><td>yield</td><td></td><td></td></tr></tbody></table><h3 id="1-5、-数据类型"><a href="#1-5、-数据类型" class="headerlink" title="1.5、 数据类型"></a>1.5、 数据类型</h3><p>​        通过<strong>type()**函数来知晓数据的类型，或者通过</strong>isinstance()**来判断数据的类型。</p><h4 id="1-5-1、-字符串（String）"><a href="#1-5-1、-字符串（String）" class="headerlink" title="1.5.1、  字符串（String）"></a>1.5.1、  字符串（String）</h4><h5 id="1-5-1-1、-语法"><a href="#1-5-1-1、-语法" class="headerlink" title="1.5.1.1、  语法"></a>1.5.1.1、  语法</h5><blockquote><p><strong>用单引号或双引号或多引号括起来。</strong></p></blockquote><h5 id="1-5-1-2、-示例"><a href="#1-5-1-2、-示例" class="headerlink" title="1.5.1.2、  示例"></a>1.5.1.2、  示例</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&#x27;羊群满满&#x27;</span></span><br><span class="line">b = <span class="string">&quot;羊群满满&quot;</span></span><br><span class="line">c = <span class="string">&quot;&quot;&quot;羊群满满&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="1-5-2、-数字型（Number）"><a href="#1-5-2、-数字型（Number）" class="headerlink" title="1.5.2、  数字型（Number）"></a>1.5.2、  数字型（Number）</h4><p>​        <strong>整型</strong>和<strong>浮点型</strong>都是属于数字型。</p><h5 id="1-5-2-1、-语法"><a href="#1-5-2-1、-语法" class="headerlink" title="1.5.2.1、  语法"></a>1.5.2.1、  语法</h5><blockquote><p><strong>① 整型：a = 10<br>② 浮点型：b = 1.1</strong></p></blockquote><h5 id="1-5-2-2、-示例"><a href="#1-5-2-2、-示例" class="headerlink" title="1.5.2.2、  示例"></a>1.5.2.2、  示例</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = 10  --&gt; 整型</span><br><span class="line">b = 1.1  --&gt; 浮点型</span><br><span class="line">print(type(a))  --&gt; True</span><br><span class="line">print(type(b))  --&gt; False</span><br></pre></td></tr></table></figure><h4 id="1-5-3、-布尔型（Bool）"><a href="#1-5-3、-布尔型（Bool）" class="headerlink" title="1.5.3、  布尔型（Bool）"></a>1.5.3、  布尔型（Bool）</h4><p>​        <strong>Bool型</strong>其实也是数字型的一种，在这里可乐单独拿出来。</p><h5 id="1-5-3-1、-语法"><a href="#1-5-3-1、-语法" class="headerlink" title="1.5.3.1、  语法"></a>1.5.3.1、  语法</h5><blockquote><p><strong>Bool型有两个关键字：<br>① True （真）<br>② False（假）</strong></p></blockquote><h5 id="1-5-3-2、-示例"><a href="#1-5-3-2、-示例" class="headerlink" title="1.5.3.2、  示例"></a>1.5.3.2、  示例</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="literal">True</span></span><br><span class="line">b = <span class="literal">False</span></span><br></pre></td></tr></table></figure><h4 id="1-5-4、-列表（List）"><a href="#1-5-4、-列表（List）" class="headerlink" title="1.5.4、  列表（List）"></a>1.5.4、  列表（List）</h4><p>列表是有序的。</p><h5 id="1-5-4-1、-语法"><a href="#1-5-4-1、-语法" class="headerlink" title="1.5.4.1、  语法"></a>1.5.4.1、  语法</h5><blockquote><p><strong>列表用方括号和逗号隔开来表示。</strong></p></blockquote><h5 id="1-5-4-2、-示例"><a href="#1-5-4-2、-示例" class="headerlink" title="1.5.4.2、  示例"></a>1.5.4.2、  示例</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">b = [<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h5 id="1-5-4-3、-列表索引"><a href="#1-5-4-3、-列表索引" class="headerlink" title="1.5.4.3、  列表索引"></a>1.5.4.3、  列表索引</h5><p>​        如图：</p><img src="/2021/01/12/Python%E5%9F%BA%E7%A1%80-%E5%88%9D%E7%AF%87/列表元祖索引之Python基础.png" style="zoom:80%;"><p>​        在python中索引会有<strong>正序索引</strong>和<strong>负序索引</strong>，<strong>正序索引</strong>是从<strong>0</strong>开始的，<strong>负序索引</strong>是从**-1**开始的，例如列表a中数值2所对应的正序索引是0，负序索引是-4。</p><h4 id="1-5-5-元组、-（Tuple）"><a href="#1-5-5-元组、-（Tuple）" class="headerlink" title="1.5.5 元组、 （Tuple）"></a>1.5.5 元组、 （Tuple）</h4><p>​        元组是有序的。</p><h5 id="1-5-5-1、-语法"><a href="#1-5-5-1、-语法" class="headerlink" title="1.5.5.1、  语法"></a>1.5.5.1、  语法</h5><blockquote><p><strong>元组用小括号和逗号隔开来表示。<br>注：如果元组只有一个值，那么一定要用” ，”结尾 ！！！</strong></p></blockquote><h5 id="1-5-5-2、-示例"><a href="#1-5-5-2、-示例" class="headerlink" title="1.5.5.2、  示例"></a>1.5.5.2、  示例</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = (<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">b = (<span class="number">1</span>,)</span><br></pre></td></tr></table></figure><h5 id="1-5-5-3、-元组索引"><a href="#1-5-5-3、-元组索引" class="headerlink" title="1.5.5.3、  元组索引"></a>1.5.5.3、  元组索引</h5><p>​        如图：</p><img src="/2021/01/12/Python%E5%9F%BA%E7%A1%80-%E5%88%9D%E7%AF%87/列表元祖索引之Python基础.png" style="zoom:80%;"><p>​        元组和列表的索引表示方式是一样的。</p><h4 id="1-5-6-字典、-（Dict）"><a href="#1-5-6-字典、-（Dict）" class="headerlink" title="1.5.6 字典、 （Dict）"></a>1.5.6 字典、 （Dict）</h4><p>​        字典是无序的。</p><h5 id="1-5-6-1、-语法"><a href="#1-5-6-1、-语法" class="headerlink" title="1.5.6.1、  语法"></a>1.5.6.1、  语法</h5><blockquote><p><strong>① 字典用大括号的键值对表示，每个键值对之间用逗号分开，键是唯一的(否则后面的会覆盖前面的)，值可以不唯一。<br>② 键必须是不可变类型，值可以取任何类型。</strong></p></blockquote><h5 id="1-5-6-2、-示例"><a href="#1-5-6-2、-示例" class="headerlink" title="1.5.6.2、  示例"></a>1.5.6.2、  示例</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = &#123; <span class="string">&quot;name&quot;</span>: <span class="string">&quot;洋群满满&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">23</span> &#125;</span><br><span class="line">b = &#123; <span class="string">&quot;name&quot;</span>: <span class="string">&quot;洋洋是群群的呀&quot;</span> &#125;</span><br></pre></td></tr></table></figure><p>​        字典是无序的，所以没有索引的概念。</p><h4 id="1-5-7、-集合（Set）"><a href="#1-5-7、-集合（Set）" class="headerlink" title="1.5.7、  集合（Set）"></a>1.5.7、  集合（Set）</h4><p>​        集合Set是无序的不重复的数据类型。</p><h5 id="1-5-7-1、-语法"><a href="#1-5-7-1、-语法" class="headerlink" title="1.5.7.1、  语法"></a>1.5.7.1、  语法</h5><blockquote><p><strong>用大括号或者set()创建，但是没有键值对的概念。<br>注：如果创建一个空集合用set()创建，{}表示创建一个字典。</strong></p></blockquote><h5 id="1-5-7-2、-示例"><a href="#1-5-7-2、-示例" class="headerlink" title="1.5.7.2、  示例"></a>1.5.7.2、  示例</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = &#123; <span class="string">&quot;洋群满满&quot;</span>, <span class="number">23</span> &#125;</span><br><span class="line">b = <span class="built_in">set</span>()</span><br></pre></td></tr></table></figure><p>​        集合是无序的，所以没有索引的概念。</p><h5 id="1-5-8、-说明"><a href="#1-5-8、-说明" class="headerlink" title="1.5.8、  说明"></a>1.5.8、  说明</h5><ul><li><strong>可变类型</strong>：包含<strong>列表</strong>，<strong>字典</strong>。<br><strong>本质</strong>：改变原变量的值，<strong>不会</strong>改变原有的内存地址。</li><li><strong>不可变类型</strong>：<strong>字符串</strong>，<strong>数字</strong>，<strong>元组</strong>。<br><strong>本质</strong>：改变原变量的值，<strong>会</strong>改变原有的内存地址。</li></ul><p>​      到此我们在本篇当中就已经学习了python当中的变量、注释、运算符、关键字以及数据类型。下一篇洋群满满将和大家一起来看看<strong>数据类型的常用方法，条件语句和循环语句</strong>。</p>]]></content>
    
    
    <summary type="html">这是对Python基础的初步讲解！</summary>
    
    
    
    <category term="Python" scheme="https://yangyangmm.cn/categories/Python/"/>
    
    <category term="Python基础" scheme="https://yangyangmm.cn/categories/Python/Python%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Python" scheme="https://yangyangmm.cn/tags/Python/"/>
    
    <category term="Python基础" scheme="https://yangyangmm.cn/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python基础------注释</title>
    <link href="https://yangyangmm.cn/2021/01/11/Python%E5%9F%BA%E7%A1%80-%E6%B3%A8%E9%87%8A/"/>
    <id>https://yangyangmm.cn/2021/01/11/Python%E5%9F%BA%E7%A1%80-%E6%B3%A8%E9%87%8A/</id>
    <published>2021-01-11T09:35:23.000Z</published>
    <updated>2021-01-14T03:00:37.844Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a> <h1 id="Python基础——注释"><a href="#Python基础——注释" class="headerlink" title="Python基础——注释"></a>Python基础——注释</h1><h3 id="1-1、-Python的注释"><a href="#1-1、-Python的注释" class="headerlink" title="1.1、 Python的注释"></a>1.1、 Python的注释</h3><h4 id="1-1-1、-Python的注释概述"><a href="#1-1-1、-Python的注释概述" class="headerlink" title="1.1.1、 Python的注释概述"></a>1.1.1、 Python的注释概述</h4><p>​        注释（Comments）是用来向开发者（用户）提示或解释某些代码的思路、作用和功能等，可以添加到代码中的任何位置。Python 解释器（Python Interpreter）在执行程序（代码）时会忽略注释部分，不做任何处理，即注释部分不会被 Python 解释器执行。</p><p>​        在代码中添加适当的注释量很重要，注释通常占源代码的 1/3 左右。</p><p>​        Python 支持两种类型的注释：单行注释和多行注释。</p><h4 id="1-1-2、-Python-注释的作用"><a href="#1-1-2、-Python-注释的作用" class="headerlink" title="1.1.2、 Python 注释的作用"></a>1.1.2、 Python 注释的作用</h4><h5 id="1-1-2-1、-调试代码"><a href="#1-1-2-1、-调试代码" class="headerlink" title="1.1.2.1、 调试代码"></a>1.1.2.1、 调试代码</h5><p>​        在调试（Debug）程序的过程中，单行注释可以用来临时快速注释某些代码，达到缩小错误范围、提高调试程序效率的目的。</p><p>​        具体操作如下：<br>​        在不确定具体是哪一行代码出错的情况下，我们可以先把觉得可能有问题的代码注释起来，然后再运行程序观察结果。如果程序可以正常执行，则可以说明错误就是由这段代码引起的；反之，如果依然出现相同的错误，则可以说明错误不是由这段代码引起的。</p><h5 id="1-1-2-2、-提高程序的可读性"><a href="#1-1-2-2、-提高程序的可读性" class="headerlink" title="1.1.2.2、 提高程序的可读性"></a>1.1.2.2、 提高程序的可读性</h5><p>​        注释的最大作用是提高程序的可读性，没有注释的程序是很难让人看懂的，说是天书也不为过。<br>更甚至，自己写的代码，过了一段时间以后，自己也会忘记思路或者目的。</p><h4 id="1-1-3、-Python-单行注释"><a href="#1-1-3、-Python-单行注释" class="headerlink" title="1.1.3、 Python 单行注释"></a>1.1.3、 Python 单行注释</h4><h5 id="1-1-3-1、-Python-单行注释概述"><a href="#1-1-3-1、-Python-单行注释概述" class="headerlink" title="1.1.3.1、 Python 单行注释概述"></a>1.1.3.1、 Python 单行注释概述</h5><p>​        Python 中是使用井号<code>#</code>作为单行注释的符号，其语法格式如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加的注释内容</span></span><br></pre></td></tr></table></figure><p>​        对以上语法格式的说明：</p><ul><li><code>#</code>作为单行注释的符号。</li><li>从井号<code>#</code>开始，直到这行结束为止的所有内容都是注释。Python 解释器遇到<code>#</code>时，会忽略它后面的整行内容，即<code>#</code>之后的一行内容都属于注释部分。</li></ul><h5 id="1-1-3-2、-单行注释注释单行代码的情况"><a href="#1-1-3-2、-单行注释注释单行代码的情况" class="headerlink" title="1.1.3.2、 单行注释注释单行代码的情况"></a>1.1.3.2、 单行注释注释单行代码的情况</h5><p>​        单行注释注释单行代码时通常会将注释放在代码的右侧，与代码之间用两个空格隔开，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&quot;洋群满满&quot;</span>)  <span class="comment"># 输出网站的名称名称</span></span><br><span class="line">print(<span class="string">&#x27;yangyangmm.cn&#x27;</span>)  <span class="comment"># 输出本网站地址</span></span><br><span class="line">print(<span class="string">&#x27;https://blog.csdn.net/weixin_45278644&#x27;</span>)  <span class="comment"># 输出洋群满满的CSDN博客地址</span></span><br></pre></td></tr></table></figure><h5 id="1-1-3-3、-单行注释注释多行代码的情况"><a href="#1-1-3-3、-单行注释注释多行代码的情况" class="headerlink" title="1.1.3.3、 单行注释注释多行代码的情况"></a>1.1.3.3、 单行注释注释多行代码的情况</h5><p>​        单行注释注释多行代码时通常将注释放在代码的上一行，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 print() 内置函数输出字符串</span></span><br><span class="line">print(<span class="string">&quot;网站的名称名称：洋群满满&quot;</span>)  </span><br><span class="line">print(<span class="string">&#x27;本网站地址：yangyangmm.cn&#x27;</span>)  </span><br><span class="line">print(<span class="string">&#x27;CSDN博客地址： https://blog.csdn.net/weixin_45278644&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 print() 内置函数输出数字</span></span><br><span class="line">print(<span class="number">520</span>)</span><br><span class="line">print(<span class="number">521</span>)</span><br><span class="line">print(<span class="number">1314</span>)</span><br></pre></td></tr></table></figure><h4 id="1-1-4、-单行注释注意事项"><a href="#1-1-4、-单行注释注意事项" class="headerlink" title="1.1.4、 单行注释注意事项"></a>1.1.4、 单行注释注意事项</h4><h5 id="1-1-4-1、-单行注释符号作为字符串的一部分存在"><a href="#1-1-4-1、-单行注释符号作为字符串的一部分存在" class="headerlink" title="1.1.4.1、 单行注释符号作为字符串的一部分存在"></a>1.1.4.1、 单行注释符号作为字符串的一部分存在</h5><p>​        当单行注释符号<code>#</code>作为字符串的一部分出现时，就不能再将它当做单行注释标记，而应该当做是字符串的一部分（字符串的字符），如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&#x27;# 网站的名称名称：洋群满满&#x27;</span>)</span><br><span class="line">print(<span class="string">&quot;# 本网站地址：yangyangmm.cn&quot;</span>)</span><br><span class="line">print(<span class="string">&quot;# CSDN博客地址： https://blog.csdn.net/weixin_45278644&quot;</span>)</span><br></pre></td></tr></table></figure><p>​        运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 网站的名称名称：洋群满满</span></span><br><span class="line"><span class="comment"># 本网站地址：yangyangmm.cn</span></span><br><span class="line"><span class="comment"># CSDN博客地址： https://blog.csdn.net/weixin_45278644</span></span><br></pre></td></tr></table></figure><p>​        对以上代码说明：</p><ul><li>Python 没有将井号<code>#</code>当做单行注释标记，而是将它当做字符串的一部分。</li></ul><h4 id="1-1-5、Python-多行注释"><a href="#1-1-5、Python-多行注释" class="headerlink" title="1.1.5、Python 多行注释"></a>1.1.5、Python 多行注释</h4><h5 id="1-1-5-1、-Python-多行注释概述"><a href="#1-1-5-1、-Python-多行注释概述" class="headerlink" title="1.1.5.1、 Python 多行注释概述"></a>1.1.5.1、 Python 多行注释概述</h5><p>​        多行注释指的是一次性注释程序中多行代码，也可以是一行代码。</p><p>​        Python 中支持使用三个连续的单引号<code>&#39;&#39;&#39;</code>分别作为注释的开头和结尾，或者三个连续的双引号<code>&quot;&quot;&quot;</code>分别作为注释的开头和结尾，一次性注释多行或单行内容。</p><p>​        多行注释通常用来为 Python 函数、类、模块等等添加功能、版本和作者等描述信息。</p><h5 id="1-1-5-2、-三个连续的单引号注释"><a href="#1-1-5-2、-三个连续的单引号注释" class="headerlink" title="1.1.5.2、 三个连续的单引号注释"></a>1.1.5.2、 三个连续的单引号注释</h5><p>​        三个连续的单引号注释内容具体格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">使用三个连续的单引号分别作为注释的开头和结尾</span></span><br><span class="line"><span class="string">可以一次性注释多行内容或单行内容</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="1-1-5-3、-三个连续的双引号注释"><a href="#1-1-5-3、-三个连续的双引号注释" class="headerlink" title="1.1.5.3、 三个连续的双引号注释"></a>1.1.5.3、 三个连续的双引号注释</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">使用三个连续的双引号分别作为注释的开头和结尾</span></span><br><span class="line"><span class="string">可以一次性注释多行内容或单行内容</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h5 id="1-1-5-4、-多行注释也可以为函数提供说明文档"><a href="#1-1-5-4、-多行注释也可以为函数提供说明文档" class="headerlink" title="1.1.5.4、 多行注释也可以为函数提供说明文档"></a>1.1.5.4、 多行注释也可以为函数提供说明文档</h5><p>​        在 Python 中可以通过 <code>help()</code>内置函数或者<code>__doc__</code>属性查看某个函数的说明文档，如下代码所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 print() 内置函数的说明文档</span></span><br><span class="line">print(<span class="string">&#x27;--- 用 help()内置函数查看说明文档 ---&#x27;</span>)</span><br><span class="line"><span class="built_in">help</span>(<span class="built_in">print</span>)</span><br><span class="line">print(<span class="string">&#x27;--- 用 __doc__ 属性查看说明文档 ---&#x27;</span>)</span><br><span class="line">print(<span class="built_in">print</span>.__doc__)</span><br></pre></td></tr></table></figure><p>​        运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">--- 用 <span class="built_in">help</span>()内置函数查看说明文档 ---</span><br><span class="line">Help on built-<span class="keyword">in</span> function <span class="built_in">print</span> <span class="keyword">in</span> module builtins:</span><br><span class="line"></span><br><span class="line">print(...)</span><br><span class="line">    print(value, ..., sep=<span class="string">&#x27; &#x27;</span>, end=<span class="string">&#x27;\n&#x27;</span>, file=sys.stdout, flush=<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line">    Prints the values to a stream, <span class="keyword">or</span> to sys.stdout by default.</span><br><span class="line">    Optional keyword arguments:</span><br><span class="line">    file:  a file-like <span class="built_in">object</span> (stream); defaults to the current sys.stdout.</span><br><span class="line">    sep:   string inserted between values, default a space.</span><br><span class="line">    end:   string appended after the last value, default a newline.</span><br><span class="line">    flush: whether to forcibly flush the stream.</span><br><span class="line"></span><br><span class="line">--- 用 __doc__ 属性查看说明文档 ---</span><br><span class="line">print(value, ..., sep=<span class="string">&#x27; &#x27;</span>, end=<span class="string">&#x27;\n&#x27;</span>, file=sys.stdout, flush=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">Prints the values to a stream, <span class="keyword">or</span> to sys.stdout by default.</span><br><span class="line">Optional keyword arguments:</span><br><span class="line">file:  a file-like <span class="built_in">object</span> (stream); defaults to the current sys.stdout.</span><br><span class="line">sep:   string inserted between values, default a space.</span><br><span class="line">end:   string appended after the last value, default a newline.</span><br><span class="line">flush: whether to forcibly flush the stream.</span><br></pre></td></tr></table></figure><p>​        其实，函数的说明文档，本质就是一段字符串（跟多行注释符号一致），都需要程序员自己编写，只不过作为说明文档，字符串的放置位置不同而已，函数的说明文档通常位于函数内部、所有代码的最前面。</p><p>​        如何为函数设置说明文档呢？如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个比较数字大小的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">num_max</span>(<span class="params">num1, num2</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    比较两个数字的大小</span></span><br><span class="line"><span class="string">    :param num1:形参1，数字1</span></span><br><span class="line"><span class="string">    :param num2:形参2，数字2</span></span><br><span class="line"><span class="string">    :return:大的数字，max_num = num1 if num1 &gt; num2 else num2</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    max_num = num1 <span class="keyword">if</span> num1 &gt; num2 <span class="keyword">else</span> num2</span><br><span class="line">    <span class="keyword">return</span> max_num</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = num_max(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">print(result)</span><br><span class="line">print(<span class="string">&#x27;--- 用 help() 内置函数查看 num_max() 的说明文档 ---&#x27;</span>)</span><br><span class="line"><span class="built_in">help</span>(num_max)</span><br><span class="line">print(<span class="string">&#x27;--- 用 __doc__ 属性查看 num_max() 的说明文档 ---&#x27;</span>)</span><br><span class="line">print(num_max.__doc__)</span><br></pre></td></tr></table></figure><p>​        运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line">--- 用 <span class="built_in">help</span>() 内置函数查看 num_max() 的说明文档 ---</span><br><span class="line">Help on function num_max <span class="keyword">in</span> module __main__:</span><br><span class="line"></span><br><span class="line">num_max(num1, num2)</span><br><span class="line">    比较两个数字的大小</span><br><span class="line">    :param num1:形参<span class="number">1</span>，数字<span class="number">1</span></span><br><span class="line">    :param num2:形参<span class="number">2</span>，数字<span class="number">2</span></span><br><span class="line">    :<span class="keyword">return</span>:大的数字，max_num = num1 <span class="keyword">if</span> num1 &gt; num2 <span class="keyword">else</span> num2</span><br><span class="line"></span><br><span class="line">--- 用 __doc__ 属性查看 num_max() 的说明文档 ---</span><br><span class="line"></span><br><span class="line">    比较两个数字的大小</span><br><span class="line">    :param num1:形参<span class="number">1</span>，数字<span class="number">1</span></span><br><span class="line">    :param num2:形参<span class="number">2</span>，数字<span class="number">2</span></span><br><span class="line">    :<span class="keyword">return</span>:大的数字，max_num = num1 <span class="keyword">if</span> num1 &gt; num2 <span class="keyword">else</span> num2</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h4 id="1-1-6、-多行注释注意事项"><a href="#1-1-6、-多行注释注意事项" class="headerlink" title="1.1.6、 多行注释注意事项"></a>1.1.6、 多行注释注意事项</h4><h5 id="1-1-6-1、-多行注释不支持嵌套"><a href="#1-1-6-1、-多行注释不支持嵌套" class="headerlink" title="1.1.6.1、 多行注释不支持嵌套"></a>1.1.6.1、 多行注释不支持嵌套</h5><p>​        Python 多行注释不支持嵌套，如下所示为错误写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">外层注释</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    内层注释</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="1-1-6-2、多行注释符号-39-39-39-或-quot-quot-quot-作为字符串标记"><a href="#1-1-6-2、多行注释符号-39-39-39-或-quot-quot-quot-作为字符串标记" class="headerlink" title="1.1.6.2、多行注释符号&#39;&#39;&#39;或&quot;&quot;&quot;作为字符串标记"></a>1.1.6.2、多行注释符号<code>&#39;&#39;&#39;</code>或<code>&quot;&quot;&quot;</code>作为字符串标记</h5><p>​        多行注释符号<code>&#39;&#39;&#39;</code>或<code>&quot;&quot;&quot;</code>也可以作为字符串的开始和结束标记。</p><p>Python 中当多行注释符号作为字符串的一部分出现时，就不能再将它们当做多行注释标记，而应该看做是字符串的一部分，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">str_info1 = <span class="string">&#x27;&#x27;&#x27;网站的名称名称：洋群满满&#x27;&#x27;&#x27;</span></span><br><span class="line">str_info2 = <span class="string">&quot;&quot;&quot;本网站地址：yangyangmm.cn&quot;&quot;&quot;</span></span><br><span class="line">str_info3 = <span class="string">&quot;CSDN博客地址： https://blog.csdn.net/weixin_45278644&quot;</span></span><br><span class="line"></span><br><span class="line">print(str_info1)</span><br><span class="line">print(str_info2)</span><br><span class="line">print(str_info3)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">网站的名称名称：洋群满满</span><br><span class="line">博客园博客地址 本网站地址：yangyangmm.cn</span><br><span class="line">CSDN博客地址： https://blog.csdn.net/weixin_45278644</span><br></pre></td></tr></table></figure><p>对以上代码说明：</p><ul><li>Python 没有将这里的三个引号当做是多行注释，而是将它们看作字符串的开始和结束标志。</li></ul>]]></content>
    
    
    <summary type="html">这是对Python注释的讲解！</summary>
    
    
    
    <category term="Python" scheme="https://yangyangmm.cn/categories/Python/"/>
    
    <category term="Python基础" scheme="https://yangyangmm.cn/categories/Python/Python%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Python" scheme="https://yangyangmm.cn/tags/Python/"/>
    
    <category term="Python基础" scheme="https://yangyangmm.cn/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python函数</title>
    <link href="https://yangyangmm.cn/2021/01/06/Python%E5%87%BD%E6%95%B0/"/>
    <id>https://yangyangmm.cn/2021/01/06/Python%E5%87%BD%E6%95%B0/</id>
    <published>2021-01-06T03:22:32.000Z</published>
    <updated>2021-01-14T03:00:45.506Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a> <h1 id="Python函数"><a href="#Python函数" class="headerlink" title="Python函数"></a>Python函数</h1><h3 id="前言、"><a href="#前言、" class="headerlink" title="前言、"></a>前言、</h3><p>​        在实际开发中，如果有若干段代码的执行逻辑完全相同，那么阔以考虑将这些代码抽取成一个函数，这样不仅阔以提高代码的重要性，而且条理会更加的清晰，可靠性更高。</p><h3 id="1-1、什么是函数"><a href="#1-1、什么是函数" class="headerlink" title="1.1、什么是函数"></a>1.1、什么是函数</h3><p>​        函数是组织好的，可重复使用的，用来实现单一的或者相关联功能的代码段，它能够提高应用的模块化和代码的重复利用率。python提供了很多内建函数，如print()，除此之外，我们还阔以自己创建函数，也就是自定义函数，接下来看一段代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(&#39;  * &#39;)</span><br><span class="line">print(&#39; *** &#39;)</span><br><span class="line">print(&#39;*****&#39;)</span><br></pre></td></tr></table></figure><p>​        上述的代码中，使用了多个print()函数输出了一个三角形。如果需要在一个程序的不同位置输出这个图形，那么每次都是用这个print()函数输出的做法是不可取的。</p><p>​        为了提高编写效率以及代码的重用性，我们阔以把具有独特功能的代码块组织成一个小模块，这就是函数！</p><h3 id="1-2、函数的定义和调用"><a href="#1-2、函数的定义和调用" class="headerlink" title="1.2、函数的定义和调用"></a>1.2、函数的定义和调用</h3><h4 id="1-2-1、定义函数"><a href="#1-2-1、定义函数" class="headerlink" title="1.2.1、定义函数"></a>1.2.1、定义函数</h4><p>​        在python中，你阔以定义一个自己想要功能的函数，自定义函数的语法格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def 函数名(参数列表):</span><br><span class="line">    &quot;函数_文档字符串&quot;</span><br><span class="line">    函数体</span><br><span class="line">    </span><br><span class="line">    return 表达式</span><br></pre></td></tr></table></figure><pre><code>     基于上述格式，下面对函数定义的规则进行说明:</code></pre><ul><li><p>函数代码块已def开头，后面紧跟的是函数名和圆括号()、</p></li><li><p>函数名的命名规则跟变量的命名规则是一样的，即只能是字母刚、数字和下划线的任何组合，但不能以数字开头，并且不能和关键字重名、</p></li><li><p>函数的参数必须放在圆括号中、</p></li><li><p>函数的第一行语句阔以选择性的使用文档字符来存放函数说明、</p></li><li><p>函数内容以冒号起始，并且缩进、</p></li><li><p>return表达式结束函数，选择性的返回一个值给调用方，不带表达式的return相当于返回None、</p></li></ul><p>  接下来，定义一个能够完整打印信息的函数，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 接下来，定义一个能够完整打印信息的函数</span><br><span class="line">def print_info():</span><br><span class="line">    print(&#39;-----------------------------&#39;)</span><br><span class="line">    print(&#39;       人生可短，洋群满满       &#39;)</span><br><span class="line">    print(&#39;-----------------------------&#39;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1-2-2、调用函数"><a href="#1-2-2、调用函数" class="headerlink" title="1.2.2、调用函数"></a>1.2.2、调用函数</h4><p>​        定义了函数之后，就相当于有了一段具有特定功能的代码，想要这些代码能够执行，需要调用函数。调用函数的方式很简单，通过“函数名()”即可完成成调用。</p><p>​        例如，调用1.2.1中的函数的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 定义完函数后，函数是不会自动执行的，需要调用它</span><br><span class="line">print_info()</span><br></pre></td></tr></table></figure><h3 id="1-3、-函数的参数"><a href="#1-3、-函数的参数" class="headerlink" title="1.3、 函数的参数"></a>1.3、 函数的参数</h3><h4 id="1-3-1、-函数参数的传递"><a href="#1-3-1、-函数参数的传递" class="headerlink" title="1.3.1、 函数参数的传递"></a>1.3.1、 函数参数的传递</h4><p>​        在介绍函数的参数之前，我们先来解决一个问题。现在要求定义一个函数，这个函数用于计算两个数的和，并把计算的结果打印出来。把上述的要求转换为代码，示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def add():</span><br><span class="line">    c &#x3D; 11+22</span><br><span class="line">    print(c)</span><br></pre></td></tr></table></figure><p>​        以上函数的功能是计算11和22的和。此时，无论调用这个函数多少次，得到的结果永远是一样的，而且只计算固定的两个数字的和，使得这个函数的局限性很大。</p><p>​        为了能让你定义的函数更加通用，即计算任意两个数字的和，阔以在定义函数的时候添加两个参数，让两个参数来接收传给函数的值。接下来，通过一个案例来演示下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 定义接收两个参数的函数</span><br><span class="line">def add(a, b):</span><br><span class="line">    c &#x3D; a+b</span><br><span class="line">    print(c)</span><br></pre></td></tr></table></figure><p>​        在上面的例子中，定义了能接收两个参数的函数。其中，a为第一个参数，用于接收函数传递的第一个值；b为第二个参数，接收的是函数传递的第二个数值。这时，如果想调用add函数，则需要给函数的参数传递两个数值，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 调用带有参数的函数时，需要在小括号中传递数据</span><br><span class="line">add(11, 22)</span><br></pre></td></tr></table></figure><p>​        需要注意的是，如果函数定义了多个参数，那么在调用函数的时候，传递的数据要和定义的参数一一对应。</p><h4 id="1-3-2、-默认参数"><a href="#1-3-2、-默认参数" class="headerlink" title="1.3.2、 默认参数"></a>1.3.2、 默认参数</h4><p>​        定义函数时，阔以给函数的参数设置默认值，这个参数就被称为默认参数。当调用函数的时候，由于默认参数在定义时已经被赋值，所以阔以直接忽略，而其它参数是必须要传入值的。如果默认参数没有传入值是，则使用默认的值；如果默认参数传入了值，则使用传入的新值替代。</p><p>​        接下来，演示如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 接下来，定义一个能够完整打印信息的函数</span><br><span class="line">def print_info(name, age &#x3D; 25):</span><br><span class="line">    # 打印任何传入的字符串</span><br><span class="line">    print(&quot;Name:&quot;, name)</span><br><span class="line">    print(&quot;Age:&quot;, age)</span><br><span class="line">    print(&#39;*************&#39;)</span><br><span class="line"># 调用函数</span><br><span class="line">print_info(name&#x3D;&#39;洋群满满&#39;)</span><br><span class="line">print_info(name&#x3D;&#39;洋群满满&#39;, age&#x3D;22)</span><br></pre></td></tr></table></figure><p>​        在上述的案例中，定义了一个带有两个参数的函数，其中name参数没有设置默认值，age作为默认参数设置了默认值。在后面的调用函数时，第一个由于只传入了name参数的值，所以程序会使用age参数的默认值；在第二个调用时，同时传入了两个参数的值，所以程序会用传给age参数的新值。</p><p>​        运行结果如下所示:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">C:\Python\python.exe D:&#x2F;Desktop&#x2F;test&#x2F;demo.py</span><br><span class="line">Name: 洋群满满</span><br><span class="line">Age: 25</span><br><span class="line">*************</span><br><span class="line">Name: 洋群满满</span><br><span class="line">Age: 22</span><br><span class="line">*************</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        需要注意的是，带有默认值的参数一定要位于参数列表的最后面，否则程序会报错。例如，给print_info()函数添加一个参数sex，放在参数列表的最后面，则会报错如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">C:\Python\python.exe D:&#x2F;Desktop&#x2F;test&#x2F;demo.py</span><br><span class="line">  File &quot;D:&#x2F;Desktop&#x2F;test&#x2F;demo.py&quot;, line 19</span><br><span class="line">    def print_info(name, age &#x3D; 25, sex):</span><br><span class="line">                  ^</span><br><span class="line">SyntaxError: non-default argument follows default argument</span><br><span class="line"></span><br><span class="line">Process finished with exit code 1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1-3-3、-不定长参数"><a href="#1-3-3、-不定长参数" class="headerlink" title="1.3.3、 不定长参数"></a>1.3.3、 不定长参数</h4><p>​        通常在定义一个函数时， 若希望函数能够处理的参数个数能比当初定义的参数个数多，此时可以在函数中使用不定长参数。其基本语法的格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def 函数名([formal_args,] *args, **kwargs):</span><br><span class="line">    &quot;函数_文档字符串&quot;</span><br><span class="line">    函数体</span><br><span class="line">    return 表达式</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        在上述格式中，函数共有3个参数。其中formal_args为形参(也就是前面所用的参数，如a，b)，*args和**kwargs为不定长参数。当调用函数的时候，函数传入的参数个数会优先匹配formal_args参数的格个数。如果传入的参数个数和formal_args参数的个数相同，不定长参数会返回控的元祖或字典；如果传入参数的个数比formal_args参数的个数多，阔以分为如下两种情况：</p><ul><li><p>如果传入的参数没有指定名称，那么*args会以元祖的形式存放这些多余的参数；</p></li><li><p>如果传入的参数指定了名称，如m=1，那么**kwargs会以字典的形式存放这些被命名的参数，如{m:1}</p><p>为了让大家更好地理解，简单的示例演示下：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def test(a,b,*args):</span><br><span class="line">    print(a)</span><br><span class="line">    print(b)</span><br><span class="line">    print(args)</span><br><span class="line">test(11, 22)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        在上面的示例中，先定义了一个带有多个参数的test函。其中，args为不定长参数。在调用函数是，由于只传入了11和22这两个数，所以这两个数会从左向右依次匹配test函数定义时的参数a和b，此时，args参数没有接收到数据，所以为一个空的元祖。</p><p>​        程序运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">C:\Python\python.exe D:&#x2F;Desktop&#x2F;test&#x2F;demo.py</span><br><span class="line">11</span><br><span class="line">22</span><br><span class="line">()</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        如果在调用test函数时，传入了多个参数(这里指的是对于两个参数)，情况下又是怎么样的呢？</p><p>​        下面看一段演示的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def test(a,b,*args):</span><br><span class="line">    print(a)</span><br><span class="line">    print(b)</span><br><span class="line">    print(args)</span><br><span class="line">test(11, 22, 33, 44, 55, 66, 77, 88, 99)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">C:\Python\python.exe D:&#x2F;Desktop&#x2F;test&#x2F;demo.py</span><br><span class="line">11</span><br><span class="line">22</span><br><span class="line">(33, 44, 55, 66, 77, 88, 99)</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        如果在参数列表的末尾使用**kwargs参数，演示代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def test(a,b,*args, **kwargs):</span><br><span class="line">    print(a)</span><br><span class="line">    print(b)</span><br><span class="line">    print(args)</span><br><span class="line">    print(kwargs)</span><br><span class="line">test(11, 22, 33, 44, 55, 66, 77, 88, 99)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        运行的结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">C:\Python\python.exe D:&#x2F;Desktop&#x2F;test&#x2F;demo.py</span><br><span class="line">11</span><br><span class="line">22</span><br><span class="line">(33, 44, 55, 66, 77, 88, 99)</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        从两次的运行结果阔以看出，如果在调用test函数时传入多个数值，那么这些数会从左向右依次匹配函数test定义时参数。如果跟formal_args参数的个数匹配完，还有多余的参数，则这些多余的参数会组成一个元祖，和不定长参数args进行匹配。此时，kwargs参数没有接收到数据，所以为一个空字典。</p><p>​        那么思考一下，在调用函数时，在什么情况下传入数据会匹配参数kwargs呢？在上述的示例中，将调用函数的代码进行修改，修改后的代码如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def test(a,b,*args, **kwargs):</span><br><span class="line">    print(a)</span><br><span class="line">    print(b)</span><br><span class="line">    print(args)</span><br><span class="line">    print(kwargs)</span><br><span class="line">test(11, 22, 33, 44, 55, 66, 77, n&#x3D;88, m&#x3D;99)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">C:\Python\python.exe D:&#x2F;Desktop&#x2F;test&#x2F;demo.py</span><br><span class="line">11</span><br><span class="line">22</span><br><span class="line">(33, 44, 55, 66, 77)</span><br><span class="line">&#123;&#39;n&#39;: 88, &#39;m&#39;: 99&#125;</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        从上述的运行结果阔以看出，如果参数是以键值对的形式传入的，则使用**kwargs参数来接收。</p><h3 id="1-4、-函数的返回值"><a href="#1-4、-函数的返回值" class="headerlink" title="1.4、 函数的返回值"></a>1.4、 函数的返回值</h3><p>​        所谓的“返回值”，就是程序中的函数完成一件事情后，最后给调用者的结果。比如，定义了一个函数来获取“洋洋”与“群群”年龄的总和，一旦调用了这个函数，函数就会把得到总和的年龄返回给这个调用者，这个年龄总和就是函数的返回值。在python中，函数的返回值使用return语句来完成的。接下来，用一段示例代码演示一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def add(a, b):</span><br><span class="line">    c &#x3D; a+b</span><br><span class="line">    return c</span><br><span class="line"># 或者阔以这样写</span><br><span class="line">def add(a, b):</span><br><span class="line">    return a+b</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        在上述的代码中，函数add中包含的return语句，意味着这个函数有一个返回值，其结果就是a加b的结果。</p><h3 id="1-5、-函数的四种类型"><a href="#1-5、-函数的四种类型" class="headerlink" title="1.5、 函数的四种类型"></a>1.5、 函数的四种类型</h3><p>​        根据有没有参数和返回值，函数大概阔以分为四种类型：</p><ol><li><p>函数无参数，无返回值；</p></li><li><p>函数无参数，有返回值；</p></li><li><p>函数有参数，无返回值；</p></li><li><p>函数有参数，有返回值。</p><p>​    接下来，针对这四种类型的函数进行详细讲解。</p></li></ol><h4 id="1-5-1、-函数无参数，无返回值"><a href="#1-5-1、-函数无参数，无返回值" class="headerlink" title="1.5.1、 函数无参数，无返回值"></a>1.5.1、 函数无参数，无返回值</h4><p>​        无参数，无返回值的函数，既不能接收参数，也没有返回值。</p><p>​        接下来，通过一个打印提示的函数来演示这类函数的使用，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def print_menu():</span><br><span class="line">    print(&#39;---------------------&#39;)</span><br><span class="line">    print(&#39;  洋群满满  火锅菜单   &#39;)</span><br><span class="line">    print(&#39;  1、羊肉火锅&#39;)</span><br><span class="line">    print(&#39;  2、牛肉火锅&#39;)</span><br><span class="line">    print(&#39;  3、猪肉火锅&#39;)</span><br><span class="line">    print(&#39;---------------------&#39;)</span><br><span class="line">print_menu()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        运行结果如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">C:\Python\python.exe D:&#x2F;Desktop&#x2F;test&#x2F;demo.py</span><br><span class="line">---------------------</span><br><span class="line">  洋群满满  火锅菜单   </span><br><span class="line">  1、羊肉火锅</span><br><span class="line">  2、牛肉火锅</span><br><span class="line">  3、猪肉火锅</span><br><span class="line">---------------------</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1-5-2、-函数无参数，有返回值"><a href="#1-5-2、-函数无参数，有返回值" class="headerlink" title="1.5.2、 函数无参数，有返回值"></a>1.5.2、 函数无参数，有返回值</h4><p>​        此类函数不能接受参数，但是阔以返回某个数据，一般情况下，采集数据时会用此类函数。接下来，实例演示下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def get_temperature():</span><br><span class="line">    # 这里获取温度的一些过程</span><br><span class="line">    # 为了简单起见，先模拟返回一个数据即可</span><br><span class="line">    return 24</span><br><span class="line"></span><br><span class="line">temperature &#x3D; get_temperature()</span><br><span class="line">print(&#39;当前的温度为:&#39;, temperature)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C:\Python\python.exe D:&#x2F;Desktop&#x2F;test&#x2F;demo.py</span><br><span class="line">当前的温度为: 24</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1-5-3、-函数有参数，无返回值"><a href="#1-5-3、-函数有参数，无返回值" class="headerlink" title="1.5.3、 函数有参数，无返回值"></a>1.5.3、 函数有参数，无返回值</h4><p>​        在实际开发中，有参数，无返回值类型的函数用的极少，这是因为函数作为功能模块，既然传入了参数，绝大多数情况下是希望使用返回值的。这里，大家对有参数，无返回值的函数有所了解即可，示例代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def test_add(num_one, num_two):</span><br><span class="line">    result &#x3D; num_one + num_two</span><br><span class="line">    print(&#39;计算结果为&#39;, result)</span><br><span class="line">test_add(11,22)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C:\Python\python.exe D:&#x2F;Desktop&#x2F;test&#x2F;demo.py</span><br><span class="line">计算结果为 33</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1-5-4、-函数有参数，有返回值"><a href="#1-5-4、-函数有参数，有返回值" class="headerlink" title="1.5.4、 函数有参数，有返回值"></a>1.5.4、 函数有参数，有返回值</h4><p>​        此类函数不仅能接收参数，还阔以返回某个数据，一般情况下，处理数据并需要结果的应用，阔以使用此类函数。接下来，通过一个哪里演示一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 计算1~number的累积和</span><br><span class="line">def calculate(number):</span><br><span class="line">    result &#x3D; 0</span><br><span class="line">    i &#x3D; 1</span><br><span class="line">    while i&lt;&#x3D;number:</span><br><span class="line">        result &#x3D; result + i</span><br><span class="line">        i +&#x3D; 1</span><br><span class="line">    return result</span><br><span class="line">result &#x3D; calculate(100)</span><br><span class="line">print(&#39;1~100的累积和为:&#39;,result)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C:\Python\python.exe D:&#x2F;Desktop&#x2F;test&#x2F;demo.py</span><br><span class="line">1~100的累积和为: 5050</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-6、-函数案例——-名片管理器"><a href="#1-6、-函数案例——-名片管理器" class="headerlink" title="1.6、 函数案例——-名片管理器"></a>1.6、 函数案例——-名片管理器</h3><p>​        名片管理器是一款生活实用类软件，用来协助管理手机中的所有名片。为了帮助大家在实际应用中学会实用四种类型函数，接下来，我们开发一个名片管理器。这个案例要求使用函数完成各种功能，你并且根据键盘的输入来选择对应的函数完成这些功能。</p><p>​        下面是名片管理器的菜单系统，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">--------------------------------</span><br><span class="line">  洋群满满  名片管理系统    v1.0   </span><br><span class="line">  1、添加名片</span><br><span class="line">  2、删除名片</span><br><span class="line">  3、修改名片</span><br><span class="line">  4、名查询片</span><br><span class="line">  5、获取所有名片信息</span><br><span class="line">  6、退出系统</span><br><span class="line">---------------------------------</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        如上所示，名片管理系统中共有六种功能，通过接收键盘输入的序号响应用户选择的功能。一旦用户输入了“6”， 就会退出系统。</p><p>​        创建一个工程，新建一个python文件，取名为“名片管理系统”， 具体实现步骤如下：</p><h4 id="1-6-1、-输出名片管理器的菜单"><a href="#1-6-1、-输出名片管理器的菜单" class="headerlink" title="1.6.1、 输出名片管理器的菜单"></a>1.6.1、 输出名片管理器的菜单</h4><p>​        定义输出菜单功能的函数。考虑到该函数只用来输出信息，并且输出的内容是固定不变的，所以定义一个无参数，无返回值的函数display_menu，具体的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def display_menu():</span><br><span class="line">    print(&#39;-&#39;*30)</span><br><span class="line">    print(&#39;  洋群满满  名片管理系统    v1.0   &#39;)</span><br><span class="line">    print(&#39;  1、添加名片&#39;)</span><br><span class="line">    print(&#39;  2、删除名片&#39;)</span><br><span class="line">    print(&#39;  3、修改名片&#39;)</span><br><span class="line">    print(&#39;  4、名查询片&#39;)</span><br><span class="line">    print(&#39;  5、获取所有名片信息&#39;)</span><br><span class="line">    print(&#39;  6、退出系统&#39;)</span><br><span class="line">    print(&#39;-&#39;*30)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        使用while循环不间断的输出菜单功能的信息。为了检测程序的可行性，阔以将while的判断条件改为“i&lt;1”，</p><p>具体的实现代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i &#x3D; 0</span><br><span class="line">while i &lt;1:</span><br><span class="line">    # 打印菜单</span><br><span class="line">    display_menu()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        程序运行后，控制台一直不间断的输出菜单的信息。测试完毕后，使用Ctrl + F2停止程序。</p><h4 id="1-6-2、获取用户输入的信息"><a href="#1-6-2、获取用户输入的信息" class="headerlink" title="1.6.2、获取用户输入的信息"></a>1.6.2、获取用户输入的信息</h4><p>​        菜单显示后， 用户需要根据提示输入要执行的序号。通过input()函数从键盘接收用户的选择，并且把选择的序号进行返回，所以定义一个无参数，有返回值的函数get_choice()，具体代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 获取用户的选择</span><br><span class="line">def get_choice():</span><br><span class="line">    selected_key &#x3D; input(&#39;请输入您选择的序号:&#39;)</span><br><span class="line">    return int(selected_key)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        在while循环打印菜单以后，调用了get_choice()函数来获取用户输入的信息，具体如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 等待用户选择</span><br><span class="line">key &#x3D; get_choice()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">C:\Python\python.exe D:&#x2F;Desktop&#x2F;test&#x2F;aa.py</span><br><span class="line">------------------------------</span><br><span class="line">  洋群满满  名片管理系统    v1.0   </span><br><span class="line">  1、添加名片</span><br><span class="line">  2、删除名片</span><br><span class="line">  3、修改名片</span><br><span class="line">  4、名查询片</span><br><span class="line">  5、获取所有名片信息</span><br><span class="line">  6、退出系统</span><br><span class="line">------------------------------</span><br><span class="line">请入您选择的序号:</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1.6.3、 通过获取序号，执行不同的功能</p><p>​        获取序号以后，根据序号的不同执行相应的操作。在while语句的末尾，使用if-else语句根据用户的选择的序号完成相应的功能，具体如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">if key &#x3D;&#x3D; 1:</span><br><span class="line">    pass</span><br><span class="line">elif key &#x3D;&#x3D; 2:</span><br><span class="line">    pass</span><br><span class="line">elif key &#x3D;&#x3D; 3:</span><br><span class="line">    pass</span><br><span class="line">elif key &#x3D;&#x3D; 4:</span><br><span class="line">    pass</span><br><span class="line">elif key &#x3D;&#x3D; 5:</span><br><span class="line">    pass</span><br><span class="line">elif key &#x3D;&#x3D; 6:</span><br><span class="line">    pass</span><br><span class="line">else:</span><br><span class="line">    print(&#39;您的输入不符合要求或有误，请重新输入!!!&#39;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        接下来，在每个条件下来处理该序号对应的功能，这里只介绍“添加名片”和“查询名片”的功能。</p><ul><li><p>添加名片</p><p>​    要想报存所有名片的信息，需要用到一个列表。在while语句前定义一个空的列表，具体如下：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name_list &#x3D; []</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        用户选择了序号1，此时应该提示用户输入姓名，然后添加到上述的列表中，因此我们定义一个无参数，无返回值的函数，具体如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 添加名片</span><br><span class="line">def add_name():</span><br><span class="line">    new_name &#x3D; input(&#39;请输入姓名:&#39;)</span><br><span class="line">    name_list.append(new_name)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        接着在用户选择序号1的时候，调用上述函数实现的添加名片的功能，具体代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---省略其他代码---</span><br><span class="line">if key &#x3D;&#x3D; 1:</span><br><span class="line">add_name()</span><br><span class="line">elif key &#x3D;&#x3D; 2:</span><br><span class="line">---省略其他代码---</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        运行程序，控制台输出如图：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">C:\Python\python.exe D:&#x2F;Desktop&#x2F;test&#x2F;aa.py</span><br><span class="line">------------------------------</span><br><span class="line">  洋群满满  名片管理系统    v1.0   </span><br><span class="line">  1、添加名片</span><br><span class="line">  2、删除名片</span><br><span class="line">  3、修改名片</span><br><span class="line">  4、名查询片</span><br><span class="line">  5、获取所有名片信息</span><br><span class="line">  6、退出系统</span><br><span class="line">------------------------------</span><br><span class="line">请输入您选择的序号:1</span><br><span class="line">请输入姓名:洋群满满</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>查询名片</p><p>​    用户选择了序号5，此时应该从列表中获取所有的姓名信息，按照固定的格式打印，因此我们定义了一个有参数，无返回值的函数print_all_info()，具体代码如下：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def print_all_info(temp_list):</span><br><span class="line">    print(&quot;&#x3D;&quot;*30)</span><br><span class="line">    for info in temp_list:</span><br><span class="line">        print(info)</span><br><span class="line">    print(&quot;&#x3D;&quot;*30)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        紧接着在用户选择序号5的时候，调用上述方法实现产看所有名片的功能，具体如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---省略其他代码---</span><br><span class="line">elif key &#x3D;&#x3D; 5:</span><br><span class="line">print_all_info(name_list)</span><br><span class="line">elif key &#x3D;&#x3D; 6:</span><br><span class="line">---省略其他代码---</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        运行结果如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">------------------------------</span><br><span class="line">  洋群满满  名片管理系统    v1.0   </span><br><span class="line">  1、添加名片</span><br><span class="line">  2、删除名片</span><br><span class="line">  3、修改名片</span><br><span class="line">  4、名查询片</span><br><span class="line">  5、获取所有名片信息</span><br><span class="line">  6、退出系统</span><br><span class="line">------------------------------</span><br><span class="line">请输入您选择的序号:5</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">洋群满满</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-7、-函数的嵌套调用"><a href="#1-7、-函数的嵌套调用" class="headerlink" title="1.7、 函数的嵌套调用"></a>1.7、 函数的嵌套调用</h3><p>​        在一个函数的调用另一个函数，这就是所谓的函数嵌套调用。接下来，我们通过一个示例来演示下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def func_one():</span><br><span class="line">    print(&#39;------func one start------&#39;)</span><br><span class="line">    print(&#39;这里是func_one执行的代码&#39;)</span><br><span class="line">    print(&#39;------func one end------&#39;)</span><br><span class="line"></span><br><span class="line">def func_two():</span><br><span class="line">    print(&#39;------func two start------&#39;)</span><br><span class="line">    func_one()</span><br><span class="line">    print(&#39;------func two end------&#39;)</span><br><span class="line"></span><br><span class="line">func_two()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        上述示例中，定义了两个函数func_one和func_two，其中func_two函数的内部调用了func_one函数。</p><p>​        具体运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">C:\Python\python.exe D:&#x2F;Desktop&#x2F;test&#x2F;demo.py</span><br><span class="line">------func two start------</span><br><span class="line">------func one start------</span><br><span class="line">这里是func_one执行的代码</span><br><span class="line">------func one end------</span><br><span class="line">------func two end------</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-8、-变量作用域"><a href="#1-8、-变量作用域" class="headerlink" title="1.8、 变量作用域"></a>1.8、 变量作用域</h3><h4 id="1-8-1、-LEGB原则"><a href="#1-8-1、-LEGB原则" class="headerlink" title="1.8.1、 LEGB原则"></a>1.8.1、 LEGB原则</h4><p>​        Python中，程序的变量并不是在那个位置都是阔以访问的，访问的权限决定于这个变量在那里赋值的。我们先来看一段代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; 10</span><br><span class="line">&gt;&gt;&gt; def test():</span><br><span class="line">...     a &#x3D; 20</span><br><span class="line">...     print(&#39;a的值是%d&#39;%a)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; test()</span><br><span class="line">a的值是20</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        上述的代码中有两个变量a，当在test函数中输出变量a的值时，为什么输出的是20，而不是10呢？其实，这就是因为变量作用域不同导致的。</p><p>​        变量的作用域决定了在那一部分程序阔以访问那个特定的变量名称。Python变量的作用域一共分为四种。分别是：</p><ul><li>L(Local):  函数内的区域，包括局部变量和参数</li><li>E(Enclosing): 外面的嵌套函数区域，常见的是闭包函数的外层函数</li><li>G(Global): 全局作用域</li><li>B(Bulit-in): 内建作用域</li></ul><p>Python中变量是采用 L -&gt; E -&gt; G -&gt; B 的规则查找，即Python检索变量的时候，会优先在局部作用域中查找。如果没找到，便会去局部外的区域找( 例如闭包 )， 在找不到就会去全局变量作用域中找，最后再去内建作用域中找。</p><h4 id="1-8-2、-全局变量与局部变量"><a href="#1-8-2、-全局变量与局部变量" class="headerlink" title="1.8.2、 全局变量与局部变量"></a>1.8.2、 全局变量与局部变量</h4><p>​        变量的作用域始终是Python学习中一个必须理解掌握的环节，下面我们从局部变量和全局变量开始全面解析Python中变量的作用域。</p><p>​        所谓的局部变量，指的是定义在函数内部的变量。即定义在def函数内部的变量，只能在def函数内部使用，它与函数外具有相同名称的其他变量没有任何关系。不同的函数，阔以定义相同的局部名称，并且各个函数内的变量不会产生影响。示例代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; def test_one():</span><br><span class="line">...     number &#x3D; 100</span><br><span class="line">...     print(&#39;test_one函数中的number值为:%d&#39;%number)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; def test_two():</span><br><span class="line">...     number &#x3D; 200</span><br><span class="line">...     print(&#39;test_two函数中的number值为:%d&#39;%number)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; test_one()</span><br><span class="line">test_one函数中的number值为:100</span><br><span class="line">&gt;&gt;&gt; test_two()</span><br><span class="line">test_two函数中的number值为:200</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        局部变量只能在其声明的函数内部访问，而全局变量阔以在整个程序范围内部访问。全局变量是定义在函数外的变量，它拥有全局作用域。</p><p>​        接下来用一个案例来区分全局变量与局部变量，具体代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">result &#x3D; 100       # 全局变量</span><br><span class="line">def sum(a, b):</span><br><span class="line">    result &#x3D; a+b   # 局部变量</span><br><span class="line">    print(&#39;函数内部的result的值为：%d&#39; %result)   # 这里的result值为局部变量</span><br><span class="line">    return result</span><br><span class="line"># 调用sum函数</span><br><span class="line">sum(100, 200)</span><br><span class="line">print(&#39;函数外的变量result是全局变量，等于：%d&#39; %result)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C:\Python\python.exe D:&#x2F;Desktop&#x2F;test&#x2F;demo.py</span><br><span class="line">函数内部的result的值为：300</span><br><span class="line">函数外的变量result是全局变量，等于：100</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1-8-3、-global-和-nonlocal关键字"><a href="#1-8-3、-global-和-nonlocal关键字" class="headerlink" title="1.8.3、 global 和 nonlocal关键字"></a>1.8.3、 global 和 nonlocal关键字</h4><p>​        当内部作用域想修改外部作用域的变量时， 就要用到 global 和 nonlocal 关键字了。下面分别对 global 和 nonlocal 的作用进行介绍。</p><ul><li>global 关键字</li></ul><p>​       global关键字用来在函数或其他局部作用域中使用全局变量。但是如果不修改全局变量也阔以不使用global关键字。具体代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; 100</span><br><span class="line">&gt;&gt;&gt; def test():</span><br><span class="line">...     a+&#x3D;100</span><br><span class="line">...     print(a)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; test()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 2, in test</span><br><span class="line">UnboundLocalError: local variable &#39;a&#39; referenced before assignment</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        上述的程序报错，提示“在赋值前引用了局部变量 a ”。但是，前面我们明明是阔以阔以在函数中访问全局变量啊？这里为什么会出错呢？啊哦！</p><p>​        这就是Python与其他语言的不同之处了， 在Python中，如果在函数内部对全局变量a进行修改，Python会把全局变量a当做局部变量， 而在进行“a+=100”之前，我们是没有声明局部变量a的， 因此，会出现上述的错误提示。</p><p>​        为了使全局变量生效，我们阔以在函数内使用global关键字进行声明，下面，我们对程序进行修改，代码入下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; 100</span><br><span class="line">&gt;&gt;&gt; def test():</span><br><span class="line">...     global a</span><br><span class="line">...     a+&#x3D;100</span><br><span class="line">...     print(a)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; test()</span><br><span class="line">200</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        这下，程序不但没有报错，而且成功对全局变量a进行了修改。</p><ul><li><p>nonlocal关键字</p><p>​    nonlocal 是在Python 3.0 中新增的关键字，Python 2.x 不提供支持。使用nonlocal关键字阔以在一个嵌套的函数中修改嵌套作用域中的变量。接下来，看一个例子：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; def func():</span><br><span class="line">...     count &#x3D; 1</span><br><span class="line">...     def func_in():</span><br><span class="line">...             count &#x3D; 2</span><br><span class="line">...     func_in()</span><br><span class="line">...     print(count)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; func()</span><br><span class="line">1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        上面的程序中，在嵌套的func_in函数中，对变量count进行了赋值，同样会创建一个新的变量，而非使用count=1 语句中的count，如果要修改嵌套作用域中的count，就要使用nonlocal关键字了，示例代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; def func():</span><br><span class="line">...     count &#x3D; 1</span><br><span class="line">...     def func_in():</span><br><span class="line">...     nonlocal count</span><br><span class="line">...             count &#x3D; 2</span><br><span class="line">...     func_in()</span><br><span class="line">...     print(count)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; func()</span><br><span class="line">2</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        上述的代码中，在func_in()函数中使用了nonlocal关键字，就会告诉Python在func函数中使用嵌套作用域中的变量count，因此对变量count进行修改时，会直接影响到嵌套作用域中的count变量值，程序最后也就输出2了！</p><h4 id="！！！注意！！！"><a href="#！！！注意！！！" class="headerlink" title="！！！注意！！！"></a>！！！注意！！！</h4><p>​        使用global关键字修饰的变量之前是阔以不存在的，而使用nonlocal关键字修饰的变量在嵌套作用域中必须已经存在。</p><h3 id="1-9-、-递归函数与匿名函数"><a href="#1-9-、-递归函数与匿名函数" class="headerlink" title="1.9 、 递归函数与匿名函数"></a>1.9 、 递归函数与匿名函数</h3><h4 id="1-9-1、-递归函数"><a href="#1-9-1、-递归函数" class="headerlink" title="1.9.1、 递归函数"></a>1.9.1、 递归函数</h4><p>​        通过前面的学习阔以知道，一个函数的内部是阔以调用其他函数的。如果在一个函数的内部调用了函数本身，那么这个函数我们就成为递归函数。</p><p>​        接下来，通过一个计算阶乘 <em>n</em>！ = 1*2*…*n的例子来演示递归函数的使用，具体代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 递归函数</span><br><span class="line">def func(count):</span><br><span class="line">    if count &#x3D;&#x3D;1:</span><br><span class="line">        result  &#x3D; 1</span><br><span class="line">    else:</span><br><span class="line">        result &#x3D; func(count-1)*count</span><br><span class="line">    return result</span><br><span class="line">number &#x3D; int(input(&#39;请输入一个正整数:&#39;))</span><br><span class="line">print(&quot;%d! &#x3D;&quot;%number, func(number))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">C:\Python\python.exe D:&#x2F;Desktop&#x2F;test&#x2F;demo.py</span><br><span class="line">请输入一个正整数:5</span><br><span class="line">5! &#x3D; 120</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1-9-2、-匿名函数"><a href="#1-9-2、-匿名函数" class="headerlink" title="1.9.2、 匿名函数"></a>1.9.2、 匿名函数</h4><p>​        简单的来说，匿名函数就是没有名称的函数，也就是不再使用def语句定义的函数。如果要声明匿名函数，则需要使用lambda关键字，匿名函数的声明格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lambda [arg1[,arg2,...argn]]: experssion</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        上述格式中，”[arg1[,arg2,…argn]]“表示的函数的参数，”expression“表示的是函数的表达式。例如，下面声明的匿名函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">add &#x3D; lambda a, b: a+b</span><br><span class="line"># 调用add函数</span><br><span class="line">print(&quot;运行结果：&quot;, add(11, 22))</span><br><span class="line">print(&quot;运行结果：&quot;, add(22, 22))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C:\Python\python.exe D:&#x2F;Desktop&#x2F;test&#x2F;demo.py</span><br><span class="line">运行结果： 33</span><br><span class="line">运行结果： 44</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        需要注意的是，使用lambda声明的匿名函数能接收任意数量的参数，但只能返回一个表达式的值。匿名函数不能直接调用print()函数，这是因为lambda需要一个表达式。</p><p>​        在某些场景下，匿名函数非常有用。假设之前我们对两个数进行运算，如果希望声明的函数支持所有运算，阔以将匿名函数作为函数的参数进行传递。接下来，我们通过一个示例演示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 匿名函数-1</span><br><span class="line">def func(a,b,c, aa):</span><br><span class="line">    print(&quot;a &#x3D; %d&quot;%a)</span><br><span class="line">    print(&quot;b &#x3D; %d&quot;%b)</span><br><span class="line">    print(&quot;c &#x3D; %d&quot;%c)</span><br><span class="line">    print(&quot;result &#x3D; &quot;, aa(a,b))</span><br><span class="line">func(11,22,33, lambda x, y,i:x+y-i)</span><br><span class="line">print(&#39;-&#39;*20)</span><br><span class="line">func(11,22,33, lambda x, y,i:x-y+i)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">C:\Python\python.exe D:&#x2F;Desktop&#x2F;test&#x2F;demo.py</span><br><span class="line">a &#x3D; 11</span><br><span class="line">b &#x3D; 22</span><br><span class="line">c &#x3D; 33</span><br><span class="line">result &#x3D;  0</span><br><span class="line">--------------------</span><br><span class="line">a &#x3D; 11</span><br><span class="line">b &#x3D; 22</span><br><span class="line">c &#x3D; 33</span><br><span class="line">result &#x3D;  22</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        除此之外，匿名函数还通常作为内置函数的参数来使用，接下来看一个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 匿名函数-2</span><br><span class="line">students &#x3D; [</span><br><span class="line">    &#123;&#39;name&#39;:&#39;yangyang&#39;, &#39;age&#39;:&#39;23&#39;&#125;,</span><br><span class="line">    &#123;&#39;name&#39;:&#39;qunqun&#39;, &#39;age&#39;:&#39;24&#39;&#125;,</span><br><span class="line">    &#123;&#39;name&#39;:&#39;yangyangqunqun&#39;, &#39;age&#39;:&#39;47&#39;&#125;</span><br><span class="line">]</span><br><span class="line"># 按name排序</span><br><span class="line">students.sort(key&#x3D;lambda  x:x[&#39;name&#39;])</span><br><span class="line">print(&quot;按name排序后的结果为：&quot;, students)</span><br><span class="line"></span><br><span class="line"># 按age排序</span><br><span class="line">students.sort(key&#x3D;lambda  x:x[&#39;age&#39;])</span><br><span class="line">print(&quot;按name排序后的结果为：&quot;, students)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C:\Python\python.exe D:&#x2F;Desktop&#x2F;test&#x2F;demo.py</span><br><span class="line">按name排序后的结果为： [&#123;&#39;name&#39;: &#39;qunqun&#39;, &#39;age&#39;: &#39;24&#39;&#125;, &#123;&#39;name&#39;: &#39;yangyang&#39;, &#39;age&#39;: &#39;23&#39;&#125;, &#123;&#39;name&#39;: &#39;yangyangqunqun&#39;, &#39;age&#39;: &#39;47&#39;&#125;]</span><br><span class="line">按name排序后的结果为： [&#123;&#39;name&#39;: &#39;yangyang&#39;, &#39;age&#39;: &#39;23&#39;&#125;, &#123;&#39;name&#39;: &#39;qunqun&#39;, &#39;age&#39;: &#39;24&#39;&#125;, &#123;&#39;name&#39;: &#39;yangyangqunqun&#39;, &#39;age&#39;: &#39;47&#39;&#125;]</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="！！！注意！！！-1"><a href="#！！！注意！！！-1" class="headerlink" title="！！！注意！！！"></a>！！！注意！！！</h4><p>​        与def定义的函数对比，lambda定义的函数有很多不同的地方。</p><ol><li>def定义的函数是有名称的，而lambda定义的函数没有函数名称，这是最明显的区别之一；</li><li>lambda定义的函数通常会返回一个对象或者一个表达式，它不会将返回的结果赋值给一个变量，而def定义的函数就阔以；</li><li>lambda定义的函数中只有一个表达式，函数体比def定义的函数简单很多，而def定义的函数的函数体是一个语句；</li><li>lambda表达式的冒号后面只能有一个表达式，而def定义的函数则阔以有很多个；</li><li>像if或for等语句不能用于lambda定义的函数中，而def定义的函数阔以；</li><li>lambda一般用来定义简单的函数，而def定义复杂的函数；</li><li>lambda定义的函数不能共享给别的程序调用，而def定义的函数则阔以被调用。</li></ol><h3 id="1-10、-日期时间函数"><a href="#1-10、-日期时间函数" class="headerlink" title="1.10、 日期时间函数"></a>1.10、 日期时间函数</h3><p>​        Python 有很多处理日期和时间的方法，其中转换日期格式是最为常见的，Python提供了time和calendar模块用于格式化日期和时间。</p><h4 id="1-10-1、-日期函数"><a href="#1-10-1、-日期函数" class="headerlink" title="1.10.1、 日期函数"></a>1.10.1、 日期函数</h4><p>​        在Python中，通常有如下几种方式表示时间：</p><ol><li>时间戳</li><li>格式化的时间字符串</li><li>时间元祖（struct_time）</li></ol><h5 id="1-10-1-1、时间戳"><a href="#1-10-1-1、时间戳" class="headerlink" title="1.10.1.1、时间戳"></a>1.10.1.1、时间戳</h5><p>​    通常来讲，时间戳表示的是从1970年1月1日00:00:00 开始按秒计算的偏移量。返回时间戳的函数主要有time()，clock()等。</p><p>​    接下来，通过一个案例来演示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import time   # 引入time模块</span><br><span class="line">ticks &#x3D; time.time()</span><br><span class="line">print(&quot;当前的时间戳为：&quot;, ticks)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        运行的结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C:\Python\python.exe D:&#x2F;Desktop&#x2F;test&#x2F;demo.py</span><br><span class="line">当前的时间戳为： 1608983774.0507226</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="1-10-1-2、格式化的时间字符串"><a href="#1-10-1-2、格式化的时间字符串" class="headerlink" title="1.10.1.2、格式化的时间字符串"></a>1.10.1.2、格式化的时间字符串</h5><p>​        我们阔以使用time模块的strftime函数来格式化日期，其定义的格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">time.strftime(format[ ,t])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        接下来，通过一个案例来演示strftime函数的使用，示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import time   # 引入time模块</span><br><span class="line">ticks &#x3D; time.time()</span><br><span class="line">print(&quot;当前的时间戳为：&quot;, ticks)</span><br><span class="line"># 格式化成2020-12-26 20:05:49 形式</span><br><span class="line">print(time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime()))</span><br><span class="line"># 格式化成Sat Dec 26 20:07:55 2020 形式</span><br><span class="line">print(time.strftime(&quot;%a %b %d %H:%M:%S %Y&quot;, time.localtime()))</span><br><span class="line"># 将格式字符串转换成时间戳</span><br><span class="line">time_word &#x3D; &quot;Sat Dec 26 20:07:55 2020&quot;</span><br><span class="line">print(time.mktime(time.strptime(time_word, &quot;%a %b %d %H:%M:%S %Y&quot;)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">C:\Python\python.exe D:&#x2F;Desktop&#x2F;test&#x2F;demo.py</span><br><span class="line">当前的时间戳为： 1608984646.544159</span><br><span class="line">2020-12-26 20:10:46</span><br><span class="line">Sat Dec 26 20:10:46 2020</span><br><span class="line">1608984475.0</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        为了大家更全面的了解日期格式化，接下来，通过一张表来列举Python中的时间日期格式化符号，表如下：</p><table><thead><tr><th align="center">格式化字符串</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">%y</td><td align="center">两位数的年份表示（00~99）</td></tr><tr><td align="center">%Y</td><td align="center">四位数的年份表示（000~9999）</td></tr><tr><td align="center">%m</td><td align="center">月份（01~12）</td></tr><tr><td align="center">%d</td><td align="center">月内中的一天</td></tr><tr><td align="center">%H</td><td align="center">24小时制小时数（0~23）</td></tr><tr><td align="center">%I</td><td align="center">12小时制小时数（01~12）</td></tr><tr><td align="center">%M</td><td align="center">分钟数（00~59）</td></tr><tr><td align="center">%S</td><td align="center">秒（00~59）</td></tr><tr><td align="center">%a</td><td align="center">本地简化的星期名称</td></tr><tr><td align="center">%A</td><td align="center">本地完整的星期名称</td></tr><tr><td align="center">%b</td><td align="center">本地简化的月份名称</td></tr><tr><td align="center">%B</td><td align="center">本地完整的月份名称</td></tr><tr><td align="center">%c</td><td align="center">本地相应的日期表示和时间表示</td></tr><tr><td align="center">%j</td><td align="center">年内的一天（001~336）</td></tr><tr><td align="center">%p</td><td align="center">本地的A.M.或者P.M.等价符</td></tr><tr><td align="center">%U</td><td align="center">一年中的星期数（00~53），星期一为星期的开始</td></tr><tr><td align="center">%w</td><td align="center">星期（0~6），星期日为星期的开始</td></tr><tr><td align="center">%x</td><td align="center">本地相应的星期表示</td></tr><tr><td align="center">%X</td><td align="center">本地相应的时间表示</td></tr><tr><td align="center">%Z</td><td align="center">当前的时区的名称</td></tr><tr><td align="center">%%</td><td align="center">%本身</td></tr></tbody></table><h5 id="1-10-1-3、-时间元祖（struct-time）"><a href="#1-10-1-3、-时间元祖（struct-time）" class="headerlink" title="1.10.1.3、 时间元祖（struct_time）"></a>1.10.1.3、 时间元祖（struct_time）</h5><p>​        返回struct_time的函数主要有gmtime()、localtime()和striptime()，struct_time元祖共有九个元素，我们通过一张表来列出元祖中的这些元素，如下表所示：</p><table><thead><tr><th align="center">序号</th><th align="center">字段</th><th align="center">含义</th><th align="center">取值范围</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">tm_year</td><td align="center">4位数的年份</td><td align="center">例如：2020</td></tr><tr><td align="center">1</td><td align="center">tm_mon</td><td align="center">表示月份</td><td align="center">1~12</td></tr><tr><td align="center">2</td><td align="center">tm_mday</td><td align="center">表示天数</td><td align="center">1~31</td></tr><tr><td align="center">3</td><td align="center">tm_hour</td><td align="center">表示小时数</td><td align="center">0~23</td></tr><tr><td align="center">4</td><td align="center">tm_min</td><td align="center">表示分钟数</td><td align="center">0~59</td></tr><tr><td align="center">5</td><td align="center">tm_sec</td><td align="center">表示秒数</td><td align="center">0~61（60和61是闰秒）</td></tr><tr><td align="center">6</td><td align="center">tm_wday</td><td align="center">表示星期数</td><td align="center">0~6（0是周一）</td></tr><tr><td align="center">7</td><td align="center">tm_yday</td><td align="center">表示一年中的第几天</td><td align="center">1~366（儒略历）</td></tr><tr><td align="center">8</td><td align="center">tm_isdst</td><td align="center">决定是否为夏令时的标识符</td><td align="center">允许的值为-1/0/1</td></tr></tbody></table><p>​        另外，time模块还提供了很多其他的函数， 例如，sleep（）函数用于推迟调用线程的运行，接下来，通过一张表来列举time模块的其他函数，具体如下表：</p><p>​    </p><table><thead><tr><th>序号</th><th>函数名</th><th>含义</th></tr></thead><tbody><tr><td>1</td><td>time.altzone</td><td>返回格林威治西部的夏令时地区的偏移秒数。如果该地区在格林威治东部会返回负值（如西欧，包括英国）。对夏令时启用地区才能使用</td></tr><tr><td>2</td><td>time.asctime([tupletime])</td><td>接收时间元祖并返回一个可读的形式为“Tue Dec 11 18:07:14 2020”(2020年 12月 11日 周二 18点 07分 14秒)的24个字符的字符串</td></tr><tr><td>3</td><td>time.clock()</td><td>用于浮点数计算的秒数返回当前的CPU时间。用于衡量不同程序的耗时，比time.time()更有用</td></tr><tr><td>4</td><td>time.ctime([secs])</td><td>作用相当于asctime(localtime(secs)),未提供参数相当于asctime()</td></tr><tr><td>5</td><td>time.gmtime([secs])</td><td>将一个时间戳转换为UTC时区（0时区）的struct_time，可选的参数sec表示从1970-1-1以来的秒数。其默认值为time.time()，函数返回time.struct_time类型的对象。注：t.tm_isdst始终为0</td></tr><tr><td>6</td><td>time.localtime([secs])</td><td>类似gmtime()，作用是格式化时间戳为本地的时间。 如果sec参数未输入，则以当前时间为转换标准。 DST (Daylight Savings Time) flag (-1, 0 or 1) 是否是夏令时。</td></tr><tr><td>7</td><td>time.mktime(tupletime)</td><td>执行与gmtime(), localtime()相反的操作，它接收struct_time对象作为参数，返回用秒数来表示时间的浮点数。如果输入的值不是一个合法的时间，将触发 OverflowError 或 ValueError。</td></tr><tr><td>8</td><td>time.sleep(secs)</td><td>推迟调用线程的运行，可通过参数secs指秒数，表示进程挂起的时间。</td></tr><tr><td>9</td><td>time.strftime(fmt[,tupletime])</td><td>接收以时间元组，并返回以可读字符串表示的当地时间，格式由参数 format 决定。</td></tr><tr><td>10</td><td>time.strptime(str,fmt=’%a %b %d %H:%M:%S:%Y’)</td><td>根据指定的格式把一个时间字符串解析为时间元组。</td></tr><tr><td>11</td><td>time.time()</td><td>返回当前时间的时间戳（1970纪元后经过的浮点秒数）。</td></tr><tr><td>12</td><td>time.tzset()</td><td>根据环境变量TZ重新初始化时间相关设置。标准TZ环境变量格式：std offset [dst [offset [,start[/time], end[/time]]]]</td></tr></tbody></table><p>​        除此之外，time模块还包含了以下两个非常重要的属性具体如下表：</p><table><thead><tr><th>序号</th><th>名称</th><th>含义</th></tr></thead><tbody><tr><td>1</td><td>time.timezone</td><td>是当时时区（未启动夏令时）距离格林威治的偏移秒数（&gt;0,美洲；&lt;=0，大部分欧洲，亚洲，非洲）</td></tr><tr><td>2</td><td>time.tzname</td><td>包含一对根据情况的不同而不的字符串，分别是带夏令时的本地时区名称和不带名称的</td></tr></tbody></table><h4 id="1-10-2、-日历函数"><a href="#1-10-2、-日历函数" class="headerlink" title="1.10.2、 日历函数"></a>1.10.2、 日历函数</h4><p>​        calendar模块中提供了非常多的方法来处理年历和月历。例如2020年12月份的日历具体代码实现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import calendar</span><br><span class="line"></span><br><span class="line">calendar_march &#x3D; calendar.month(2020,12)</span><br><span class="line">print(&quot;以下时2020年12月份的日历：&quot;)</span><br><span class="line">print(calendar_march)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">C:\Python\python.exe D:&#x2F;Desktop&#x2F;test&#x2F;demo.py</span><br><span class="line">以下时2020年12月份的日历：</span><br><span class="line">   December 2020</span><br><span class="line">Mo Tu We Th Fr Sa Su</span><br><span class="line">    1  2  3  4  5  6</span><br><span class="line"> 7  8  9 10 11 12 13</span><br><span class="line">14 15 16 17 18 19 20</span><br><span class="line">21 22 23 24 25 26 27</span><br><span class="line">28 29 30 31</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        除此之外， calendar模块还提供了很多内置函数，具体如下表：</p><table><thead><tr><th>序号</th><th>名称</th><th>含义</th></tr></thead><tbody><tr><td>1</td><td>calendar.calendar(year,w=2,I=1,c=6,m=3)</td><td>以多行字符串形式返回一年的日历，<code>w</code>每个单元格宽度，默认2，内部已做处理，最小宽度为2，<code>l</code>每列换l行，默认为1，内部已做处理，至少换行1行，<code>c</code>表示月与月之间的间隔宽度，默认为6，内部已做处理，最小宽度为2，<code>m</code>表示将12个月分为m列</td></tr><tr><td>2</td><td>calendar.firstweekday()</td><td>返回一周的第一天，0是星期一，…，6为星期日</td></tr><tr><td>3</td><td>calendar.isleap(year)</td><td>判断指定是否是闰年，闰年为True，平年为False</td></tr><tr><td>4</td><td>calendar.ieapdays(y1,y2)</td><td>返回<code>y1</code>与<code>y2</code>年份之间的闰年数量，<code>y1</code>与<code>y2</code>皆为年份。包括起始年，不包括结束年：</td></tr><tr><td>5</td><td>calendar.month(year,month,w=2,I=1)</td><td>返回一个月的日历的多行文本字符串。<code>year</code>指定年份，<code>month</code>指定月份，<code>w</code>每个单元格宽度，默认0，内部已做处理，最小宽度为2，<code>l</code>每列换l行，默认为0，内部已做处理，至少换行1行</td></tr><tr><td>6</td><td>calendar.monthcalendar(year,month)</td><td>返回一个月中天数列表(不是当前月份的天数为0)，按周划分，为一个二维数组。包括月份开始那周的所有日期和月份结束那周的所有日期</td></tr><tr><td>7</td><td>calendar.monthrange(year, month)</td><td>返回一个由一个月第一个天的星期与当前月的天数组成的元组</td></tr><tr><td>8</td><td>calendar.prcal(year,w=2,I=1,c=6,m=3)</td><td>打印一年的日历，<code>w</code>每个单元格宽度，默认0，内部已做处理，最小宽度为2，<code>l</code>每列换l行，默认为0，内部已做处理，至少换行1行，<code>c</code>表示月与月之间的间隔宽度，默认为6，内部已做处理，最小宽度为2，<code>m</code>表示将12个月分为m列</td></tr><tr><td>9</td><td>calendar.prmonth(year,month,w=2,I=1)</td><td>打印一个月的日历，<code>theyear</code>指定年份，<code>themonth</code>指定月份，<code>w</code>每个单元格宽度，默认0，内部已做处理，最小宽度为2，<code>l</code>每列换l行，默认为0，内部已做处理，至少换行1行</td></tr><tr><td>10</td><td>calendar.setfirstweekday(firstweekday)</td><td>指定一周的第一天，0是星期一，…，6为星期日</td></tr><tr><td>11</td><td>calendar.timegm(tupletime)</td><td>该函数将一个元组时间变成时间戳。</td></tr><tr><td>12</td><td>calendar.weekday(year,month, day)</td><td>获取指定日期为星期几</td></tr></tbody></table><h3 id="1-11、-随机数函数"><a href="#1-11、-随机数函数" class="headerlink" title="1.11、 随机数函数"></a>1.11、 随机数函数</h3><p>​        Python中的random模块用于生成随机数，它提供了很多函数。接下来，针对常见的随机数函数进行讲解，具体如下：</p><h4 id="1-11-1、-random-random"><a href="#1-11-1、-random-random" class="headerlink" title="1.11.1、 random.random()"></a>1.11.1、 random.random()</h4><p>​        返回0-1之间的浮点数N，范围为0&lt;= N &lt;=1.0。</p><p>​        接下来，通过一个示例来演示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line"># 生成第一个随机数</span><br><span class="line">print(&#39;random():&#39;, random.random())</span><br><span class="line"># 生成第二个随机数</span><br><span class="line">print(&#39;random():&#39;, random.random())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C:\Python\python.exe D:&#x2F;Desktop&#x2F;test&#x2F;demo.py</span><br><span class="line">random(): 0.9414705808484405</span><br><span class="line">random(): 0.5730106704826693</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1-11-2、-random-uniform-a-b"><a href="#1-11-2、-random-uniform-a-b" class="headerlink" title="1.11.2、 random.uniform(a,b)"></a>1.11.2、 random.uniform(a,b)</h4><p>​        返回a与b之间的随机浮点数N，范围为[a,b]。 如果a的值小于b的值，则生成的随机浮点数N的取值范围为：a&lt;=  N  &lt;=b; 如果a的值大于b的值，则生成的随机浮点数N的取值范围为：b&lt;= N &lt;=a。示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">print(&#39;random():&#39;, random.uniform(50,100))</span><br><span class="line">print(&#39;random():&#39;, random.uniform(100,50))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        运行结果如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C:\Python\python.exe D:&#x2F;Desktop&#x2F;test&#x2F;demo.py</span><br><span class="line">random(): 94.65991375247847</span><br><span class="line">random(): 60.57936076593128</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1-11-3、-random-randint-a-b"><a href="#1-11-3、-random-randint-a-b" class="headerlink" title="1.11.3、 random.randint(a,b)"></a>1.11.3、 random.randint(a,b)</h4><p>​    返回一个随机整数N，N的取值范围为：a&lt;= N &lt;=b。 需要注意的是，a和b的取值必须是整数，并且a的值一定要小于b的值， 示例代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line"># 生成随机数的范围为[12,20]</span><br><span class="line">print(&#39;random.randint:&#39;, random.randint(12,20))</span><br><span class="line"># 生成随机数的范围为[20,20], 结果永远为20</span><br><span class="line">print(&#39;random.randint:&#39;, random.randint(12,20))</span><br><span class="line"></span><br><span class="line">#print(&#39;random.randint:&#39;, random.randint(20,12))# 该语句是错误的，a的值必须小于b</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C:\Python\python.exe D:&#x2F;Desktop&#x2F;test&#x2F;demo.py</span><br><span class="line">random.randint: 16</span><br><span class="line">random.randint: 19</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1-11-4、-random-randrange-start-stop-step"><a href="#1-11-4、-random-randrange-start-stop-step" class="headerlink" title="1.11.4、 random.randrange([start], stop[,step])"></a>1.11.4、 random.randrange([start], stop[,step])</h4><p>​        返回指定递增基数集合中的一个随机数，基数默认值为1。其中，<code>start</code>参数用于指定范围内的开始值，其包含在范围内；<code>end</code>参数用于指定范围内的结束值，其不包含在范围内；<code>step</code>表示递增的基数。</p><p>​        上述这些参数必须为整数。例如：random.randrange(10, 100, 2)相当于从[10,12,14……96,98]中获取一个随机数。</p><h4 id="1-11-5、-random-choice-sequence"><a href="#1-11-5、-random-choice-sequence" class="headerlink" title="1.11.5、 random.choice(sequence)"></a>1.11.5、 random.choice(sequence)</h4><p>​        从sequence中返回一个随机的元素。其中，sequence参数可以是列表、元祖或者字符串。示例代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">print(&#39;random.choice&#39;, random.choice(&#39;洋群满满&#39;))</span><br><span class="line">print(&#39;random.choice&#39;, random.choice([&#39;洋&#39;,&#39;群满&#39;,&#39;满&#39;]))</span><br><span class="line">print(&#39;random.choice&#39;, random.choice((&#39;洋群&#39;, &#39;满满&#39;)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">C:\Python\python.exe D:&#x2F;Desktop&#x2F;test&#x2F;demo.py</span><br><span class="line">random.choice: 满</span><br><span class="line">random.choice: 洋</span><br><span class="line">random.choice: 洋群</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1-11-6、-random-shuffle-x-random"><a href="#1-11-6、-random-shuffle-x-random" class="headerlink" title="1.11.6、 random.shuffle(x,[,random])"></a>1.11.6、 random.shuffle(x,[,random])</h4><p>​        用于将列表中的元素打乱顺序，俗称为<code>洗牌</code>。示例代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">demo_list &#x3D; [&#39;python&#39;,&#39;洋群满满&#39;, &#39;java&#39;,&#39;C&#39;, &#39;javascript&#39;]</span><br><span class="line">random.shuffle(demo_list)</span><br><span class="line">print(demo_list)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C:\Python\python.exe D:&#x2F;Desktop&#x2F;test&#x2F;demo.py</span><br><span class="line">[&#39;python&#39;, &#39;C&#39;, &#39;洋群满满&#39;, &#39;java&#39;, &#39;javascript&#39;]</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1-11-7、-random-sample-sequence-k"><a href="#1-11-7、-random-sample-sequence-k" class="headerlink" title="1.11.7、 random.sample(sequence, k)"></a>1.11.7、 random.sample(sequence, k)</h4><p>​        从指定序列中随机获取K个元素作为一个片段返回，sample函数不会修改原有序列。示例代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">num_list &#x3D; [1,2,3,4,5,6,7,8,9,10]</span><br><span class="line">slice &#x3D; random.sample(num_list,5) # 从num_list中随机获取5个元素，作为一个片段返回</span><br><span class="line">print(slice)</span><br><span class="line">print(num_list) # 原有的序列顺序未改变</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C:\Python\python.exe D:&#x2F;Desktop&#x2F;test&#x2F;demo.py</span><br><span class="line">[6, 3, 1, 5, 9]</span><br><span class="line">[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">这是Python函数的基本教程以及时间与日期函数，随机函数的讲解！</summary>
    
    
    
    <category term="Python" scheme="https://yangyangmm.cn/categories/Python/"/>
    
    <category term="Python基础" scheme="https://yangyangmm.cn/categories/Python/Python%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Python" scheme="https://yangyangmm.cn/tags/Python/"/>
    
    <category term="Python基础" scheme="https://yangyangmm.cn/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+GitHub</title>
    <link href="https://yangyangmm.cn/2021/01/04/Hexo-GitHub/"/>
    <id>https://yangyangmm.cn/2021/01/04/Hexo-GitHub/</id>
    <published>2021-01-04T04:13:44.000Z</published>
    <updated>2021-01-14T02:47:53.374Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a> <h1 id="使用-Hexo-GitHub-搭建个人免费博客教程"><a href="#使用-Hexo-GitHub-搭建个人免费博客教程" class="headerlink" title="使用 Hexo+GitHub 搭建个人免费博客教程"></a>使用 Hexo+GitHub 搭建个人免费博客教程</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近些年来很多用户都喜欢使用 GitHub Pages 来搭建 Hexo 静态博客网站，其最吸引人的莫过于完全免费使用，并且非常稳定。</p><p>虽然搭建时比较麻烦，有点折腾，但是配置完成后，基本不需要操心维护的事，甚至放了几年都忘记了，打开来看文章依然还在。</p><p>本文就详细介绍下如何使用 Hexo + GitHub 搭建免费个人博客网站的教程。</p><p>本文教程链接在此<a href="https://zhuanlan.zhihu.com/p/60578464">cv</a>，中间的踩坑部分，我也会指出！</p><h2 id="简介：GitHub-Pages-和-Hexo-amp-原理"><a href="#简介：GitHub-Pages-和-Hexo-amp-原理" class="headerlink" title="简介：GitHub Pages 和 Hexo &amp; 原理"></a>简介：GitHub Pages 和 Hexo &amp; 原理</h2><h3 id="GitHub-Pages-是什么？"><a href="#GitHub-Pages-是什么？" class="headerlink" title="** GitHub Pages 是什么？**"></a>** GitHub Pages 是什么？**</h3><ul><li><a href="https://docs.github.com/en/free-pro-team@latest/github/working-with-github-pages/about-github-pages">What is GitHub Pages? - GitHub Help</a></li></ul><p>GitHub Pages 是由 GitHub 官方提供的一种免费的静态站点托管服务，让我们可以在 GitHub 仓库里托管和发布自己的静态网站页面。</p><h3 id="Hexo-是什么？"><a href="#Hexo-是什么？" class="headerlink" title="** Hexo 是什么？**"></a>** Hexo 是什么？**</h3><ul><li>官网：<a href="https://hexo.io/zh-cn/">hexo.io</a></li></ul><p>Hexo 是一个快速、简洁且高效的静态博客框架，它基于 Node.js 运行，可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。</p><h3 id="Hexo-GitHub-文章发布原理"><a href="#Hexo-GitHub-文章发布原理" class="headerlink" title="** Hexo + GitHub 文章发布原理**"></a>** Hexo + GitHub 文章发布原理**</h3><p>在本地撰写 Markdown 格式文章后，通过 Hexo 解析文档，渲染生成具有主题样式的 HTML 静态网页，再推送到 GitHub 上完成博文的发布。</p><p><img src="/2021/01/04/Hexo-GitHub/Hexo+GithubPages%E5%8F%91%E6%96%87%E6%B5%81%E7%A8%8B.jpg"></p><h3 id="优点和不足"><a href="#优点和不足" class="headerlink" title="** 优点和不足**"></a>** 优点和不足**</h3><p><strong>优点：</strong>完全免费；静态站点，轻量快速；可按需求自由定制改造；托管在 GitHub，安全省心；迁移方便……</p><p><strong>不足：</strong>发文不便，依赖于本地环境；更适合个人博客使用；GitHub 在国内访问速度有点不快。</p><h2 id="1、-准备：环境搭建"><a href="#1、-准备：环境搭建" class="headerlink" title="1、 准备：环境搭建"></a>1、 准备：环境搭建</h2><h3 id="1-1、-注意事项"><a href="#1-1、-注意事项" class="headerlink" title="1.1、  注意事项"></a>1.1、  注意事项</h3><ul><li>输入代码时，核对准确，最好切换成英文输入法；</li><li>将文中的 “用户名” 和 “邮箱” 替换为自己的 GitHub 账户名和绑定的邮箱；</li><li>统一使用 Git Bash 进行操作（支持 Win、Mac）；</li><li>小白请严格按步骤进行，不要跳！</li></ul><h3 id="1-2、-环境搭建"><a href="#1-2、-环境搭建" class="headerlink" title="1.2、  环境搭建"></a>1.2、  环境搭建</h3><p>​            Hexo 基于 Node.js，搭建过程中还需要使用 npm（Node.js 已带） 和 git，因此先搭建本地操作环境，安装 Node.js 和 Git。</p><ul><li><p>Node.js：<a href="https://link.zhihu.com/?target=https://nodejs.org/zh-cn">https://nodejs.org/zh-cn</a></p></li><li><p>Git：<a href="https://link.zhihu.com/?target=https://git-scm.com/downloads">https://git-scm.com/downloads</a></p><p>​    下载 Node.js 和 Git 程序并安装，一路点 “下一步” 按默认配置完成安装。</p></li></ul><p>​            安装完成后，Win+R 输入 cmd 并打开，依次输入 <code>node -v</code>、<code>npm -v</code> 和 <code>git --version</code> 并回车，如下图出现程序版本号即可。（由于我的git未设置环境变量，就在Git Bash里面进行测试了）</p><p><img src="/2021/01/04/Hexo-GitHub/nodejs+git%E5%AE%89%E8%A3%85%E6%B5%8B%E8%AF%95.jpg"></p><h2 id="2、-连接-Github"><a href="#2、-连接-Github" class="headerlink" title="2、 连接 Github"></a>2、 连接 Github</h2><h4 id="注册github"><a href="#注册github" class="headerlink" title="注册github"></a>注册github</h4><p>使用邮箱注册 <a href="https://link.zhihu.com/?target=https://github.com/">GitHub</a> 账户，选择免费账户（Free），并完成邮件验证。</p><p>​        右键 -&gt; Git Bash Here，<strong>设置用户名和邮箱</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;GitHub 用户名&quot;</span><br><span class="line">git config --global user.email &quot;GitHub 邮箱&quot;</span><br></pre></td></tr></table></figure><h4 id="创建-SSH-密匙"><a href="#创建-SSH-密匙" class="headerlink" title="创建 SSH 密匙"></a><strong>创建 SSH 密匙</strong></h4><p>​        输入 <code>ssh-keygen -t rsa -C &quot;GitHub 邮箱&quot;</code>，然后一路回车。</p><h4 id="添加密匙"><a href="#添加密匙" class="headerlink" title="添加密匙"></a><strong>添加密匙</strong></h4><p>​        进入 [C:\Users\用户名.ssh] 目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。</p><h4 id="登陆-GitHub"><a href="#登陆-GitHub" class="headerlink" title="登陆 GitHub"></a>登陆 GitHub</h4><p>​        进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。</p><p>​        Title 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。</p><p>​        <img src="/2021/01/04/Hexo-GitHub/github添加ssh(1).jpg" style="zoom:80%;"></p><img src="/2021/01/04/Hexo-GitHub/github添加ssh(2).jpg" style="zoom:80%;"><h4 id="验证连接"><a href="#验证连接" class="headerlink" title="验证连接"></a>验证连接</h4><p>​        打开 Git Bash，输入 <code>ssh -T git@github.com</code> 出现 “Are you sure……”，输入 yes 回车确认。</p><p><img src="/2021/01/04/Hexo-GitHub/git%E7%99%BB%E5%BD%95github.jpg"></p><p>​        由于我之前登录过，就直接登录了，不用确认了！</p><h2 id="3、-创建-Github-Pages-仓库"><a href="#3、-创建-Github-Pages-仓库" class="headerlink" title="3、 创建 Github Pages 仓库"></a>3、 创建 Github Pages 仓库</h2><p>GitHub 主页右上角加号 -&gt; New repository：</p><ul><li>Repository name 中输入 <code>用户名.github.io</code></li><li>勾选 “Initialize this repository with a README”</li><li>Description 选填</li></ul><p>填好后点击 Create repository 创建。</p><img src="/2021/01/04/Hexo-GitHub/github创建 Github Pages 仓库.jpg" style="zoom:80%;"><p>​        创建后默认自动启用 HTTPS，博客地址为：<code>https://用户名.github.io</code></p><h2 id="4、-本地安装-Hexo-博客程序"><a href="#4、-本地安装-Hexo-博客程序" class="headerlink" title="4、 本地安装 Hexo 博客程序"></a>4、 本地安装 Hexo 博客程序</h2><p>​        新建一个文件夹用来存放 Hexo 的程序文件，如 Blog。打开该文件夹，右键 -&gt; Git Bash Here。</p><h3 id="4-1、-安装-Hexo"><a href="#4-1、-安装-Hexo" class="headerlink" title="4.1、  安装 Hexo"></a>4.1、  安装 Hexo</h3><p>​        使用 npm 一键安装 Hexo 博客程序：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>​        Mac 用户需要管理员权限（sudo），运行这条命令：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>​        安装时间有点久（真的很慢！主要看网速），界面也没任何反应，<strong>耐心等待</strong>，安装完成后如下图。</p><p><img src="/2021/01/04/Hexo-GitHub/git%E5%AE%89%E8%A3%85hexo.jpg"></p><p>​        由于我已安装好，故出现下图更新界面！—中间的警告阔以忽略，是linux与windows的兼容问题！</p><h3 id="4-2、-Hexo-初始化和本地预览"><a href="#4-2、-Hexo-初始化和本地预览" class="headerlink" title="4.2、  Hexo 初始化和本地预览"></a>4.2、  Hexo 初始化和本地预览</h3><p>​        <strong>初始化并安装所需组件：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init      # 初始化</span><br><span class="line">npm install    # 安装组件</span><br></pre></td></tr></table></figure><p>​        完成后依次输入下面命令，<strong>启动本地服务器进行预览</strong>：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g   # 生成页面</span><br><span class="line">hexo s   # 启动预览</span><br></pre></td></tr></table></figure><p>​        <strong>访问</strong> <code>http://localhost:4000</code><strong>，出现 Hexo 默认页面，本地博客安装成功！</strong></p><p><img src="/2021/01/04/Hexo-GitHub/hxo%E5%88%9D%E5%A7%8B%E5%8C%96%E7%BD%91%E9%A1%B5.jpg"></p><p><strong>Tips：</strong></p><ul><li><p>如果出现页面加载不出来，可能是端口被占用了。Ctrl+C 关闭服务器，运行 <code>hexo server -p 5000</code> 更改端口号后重试。</p></li><li><p>在git中复制粘贴的快捷键为：复制—&gt;shift+del        粘贴—&gt;shift+insert</p><p>​    </p><p>Hexo 博客文件夹目录结构如下：</p></li></ul><p><img src="/2021/01/04/Hexo-GitHub/hexo%E5%8D%9A%E5%AE%A2%E6%96%87%E4%BB%B6%E5%A4%B9%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.jpg"></p><h2 id="5、-部署-Hexo-到-GitHub-Pages"><a href="#5、-部署-Hexo-到-GitHub-Pages" class="headerlink" title="5、 部署 Hexo 到 GitHub Pages"></a>5、 部署 Hexo 到 GitHub Pages</h2><p>​        本地博客测试成功后，就是上传到 GitHub 进行部署，使其能够在网络上访问。</p><h4 id="安装-hexo-deployer-git："><a href="#安装-hexo-deployer-git：" class="headerlink" title="安装 hexo-deployer-git："></a><strong>安装 hexo-deployer-git</strong>：</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h4 id="修改-站点配置文件（-config-yml）"><a href="#修改-站点配置文件（-config-yml）" class="headerlink" title="修改 站点配置文件（ _config.yml）"></a>修改 站点配置文件（ _config.yml）</h4><p>​        然后<strong>修改 _config.yml</strong> 文件末尾的 Deployment 部分，修改成如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:用户名/用户名.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><h4 id="Tips"><a href="#Tips" class="headerlink" title="Tips:"></a><strong>Tips</strong>:</h4><ul><li>原作者的格式和我的不一样的原因是应为随着版本的更新，配置文件的简易性与效益性显著提升，具体配置还是得看配置文件中的提供的Docs文档地址！如图：</li></ul><p><img src="/2021/01/04/Hexo-GitHub/hexo%E7%AB%99%E7%82%B9%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84Docs%E6%96%87%E6%A1%A3%E6%8F%90%E7%A4%BA.jpg"></p><p>​        完成后运行 <code>hexo d</code> 将网站上传部署到 GitHub Pages。</p><p>​        完成！这时访问我们的 GitHub 域名 <code>https://用户名.github.io</code> 就可以看到 Hexo 网站了。</p><h2 id="6、-绑定域名（可选）"><a href="#6、-绑定域名（可选）" class="headerlink" title="6、 绑定域名（可选）"></a>6、 绑定域名（可选）</h2><p>​        博客搭建完成使用的是 GitHub 的子域名（用户名.github.io），我们可以为 Hexo 博客绑定自己的域名替换 GitHub 域名，更加个性化和专业，也利于 SEO。</p><p>​        我自己购买的域名是在<a href="https://wanwang.aliyun.com/">阿里云的万网</a>平台购买，各大平台的价格基本一致，剩下来的选择就是因为后续的服务便捷。具体操作如下：</p><ol><li><p>注册登录阿里云</p></li><li><p>进入万网界面，购买域名，com稍贵、cn适中（二者的区别是前者表示公司，属于国际域名，后者表示中国，属于国内域名……），购买完成之后需要进行邮箱验证和实名认证。实名认证后显示需要三个工作日内审查，我们不用管，他是阔以让我们正常直接操作的！</p></li><li><p>点击右上角的控制台<img src="/2021/01/04/Hexo-GitHub/%E9%98%BF%E9%87%8C%E4%BA%91%E6%8E%A7%E5%88%B6%E5%8F%B0.jpg"></p></li><li><p>点击左上角三条杠杠，之后选择域名<img src="/2021/01/04/Hexo-GitHub/%E9%98%BF%E9%87%8C%E4%BA%91%E5%9F%9F%E5%90%8D1.jpg"></p></li><li><p>选择域名解析<img src="/2021/01/04/Hexo-GitHub/阿里云域名解析1.jpg" style="zoom:80%;"></p></li><li><p>然后我们点击右上角的新手引导，这里需要输入自己仓库所在的地址：用户名.github.io<img src="/2021/01/04/Hexo-GitHub/阿里云域名解析2.jpg" style="zoom:80%;"></p></li><li><p>确定之后，开始解析的具体设置<img src="/2021/01/04/Hexo-GitHub/阿里云域名解析3.jpg" style="zoom:80%;"></p></li><li><p>设置成功如图所示<img src="/2021/01/04/Hexo-GitHub/阿里云域名解析完成.jpg" style="zoom:80%;"></p></li><li><p>接下来到我们进入该仓库中 点击 setting 往下滑 会看到<strong>custom domain</strong>!将自己购买的域名填写进去<img src="/2021/01/04/Hexo-GitHub/github绑定域名.jpg"><img src="/2021/01/04/Hexo-GitHub/github绑定域名1.jpg" style="zoom:80%;"></p></li><li><p>最后一步就是在我们的本地博客路径下的source文件夹里新建一个CNAME的文件， 里面输入我们的域名<img src="/2021/01/04/Hexo-GitHub/站点配置域名.jpg" style="zoom:80%;"></p></li><li><p>然后执行命令 hexo d 重新部署 然后打开我们的域名 就可以访问啦（当然，我这个界面是已经配置好next主题样式的，后面会具体为大家讲解！）<img src="/2021/01/04/Hexo-GitHub/%E6%B4%8B%E7%BE%A4%E6%BB%A1%E6%BB%A1.jpg"></p></li></ol><h2 id="7、-开始使用"><a href="#7、-开始使用" class="headerlink" title="7、 开始使用"></a>7、 开始使用</h2><h3 id="7-1、-发布文章"><a href="#7-1、-发布文章" class="headerlink" title="7.1、  发布文章"></a>7.1、  发布文章</h3><p>​        进入博客所在目录，右键打开 Git Bash Here，创建博文：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;My New Post&quot;</span><br></pre></td></tr></table></figure><p>​        然后 source 文件夹中会出现一个 My New Post.md 文件，就可以使用 Markdown 编辑器在该文件中撰写文章了。</p><p>​        写完后运行下面代码将文章渲染并部署到 GitHub Pages 上完成发布。<strong>以后每次发布文章都是这两条命令。</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g   # 生成页面</span><br><span class="line">hexo d   # 部署发布</span><br></pre></td></tr></table></figure><p>也可以不使用命令自己创建 .md 文件，只需在文件开头手动加入如下格式 Front-matter 即可，写完后运行 <code>hexo g</code> 和 <code>hexo d</code> 发布。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World # 标题</span><br><span class="line">date: 2020/12/21 hh:mm:ss # 时间</span><br><span class="line">categories: # 分类</span><br><span class="line">- Diary</span><br><span class="line">tags: # 标签</span><br><span class="line">- PS3</span><br><span class="line">- Games</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">摘要</span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line">正文</span><br></pre></td></tr></table></figure><h3 id="7-2、-网站设置"><a href="#7-2、-网站设置" class="headerlink" title="7.2、  网站设置"></a>7.2、  网站设置</h3><p>​        包括网站名称、描述、作者、链接样式等，全部在网站目录下的 _config.yml 文件中，参考<a href="https://hexo.io/zh-cn/docs/configuration">官方文档</a>按需要编辑。（后续会为大家具体讲解）</p><p>​        注意：冒号后要加一个空格！</p><h3 id="7-3、-更换主题"><a href="#7-3、-更换主题" class="headerlink" title="7.3、  更换主题"></a>7.3、  更换主题</h3><p>​        在 <a href="https://hexo.io/themes/">Themes | Hexo</a> 选择一个喜欢的主题，比如 <a href="http://theme-next.iissnan.com/getting-started.html">NexT</a>，进入网站目录打开 Git Bash Here 下载主题：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>​        然后修改 _config.yml 中的 theme 为新主题名称 next，发布。（有的主题需要将 _config.yml 替换为主题自带的，参考主题说明。（后续会为大家具体讲解）</p><h3 id="7-4、-常用命令"><a href="#7-4、-常用命令" class="headerlink" title="7.4、  常用命令"></a>7.4、  常用命令</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;name&quot;       # 新建文章</span><br><span class="line">hexo new page &quot;name&quot;  # 新建页面</span><br><span class="line">hexo g                # 生成页面</span><br><span class="line">hexo d                # 部署</span><br><span class="line">hexo g -d             # 生成页面并部署</span><br><span class="line">hexo s                # 本地预览</span><br><span class="line">hexo clean            # 清除缓存和已生成的静态文件</span><br><span class="line">hexo help             # 帮助</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">这是使用 Hexo+GitHub 搭建个人免费博客教程</summary>
    
    
    
    <category term="Hexo" scheme="https://yangyangmm.cn/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="https://yangyangmm.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>echarts------dataset</title>
    <link href="https://yangyangmm.cn/2020/12/17/echarts------dataset/"/>
    <id>https://yangyangmm.cn/2020/12/17/echarts------dataset/</id>
    <published>2020-12-17T07:30:48.000Z</published>
    <updated>2021-01-14T03:05:55.700Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a> <h2 id="dataset—数据集"><a href="#dataset—数据集" class="headerlink" title="dataset—数据集"></a>dataset—数据集</h2><p>用于单独的数据集声明，从而数据可以单独管理，被多个组件复用，并且可以自由指定数据到视觉的映射。这在不少场景下能带来使用上的方便。</p><h4 id="dataset-id"><a href="#dataset-id" class="headerlink" title="dataset. id"></a><a href="https://www.echartsjs.com/zh/option.html#dataset">dataset.</a> <a href="https://www.echartsjs.com/zh/option.html#dataset.id">id</a></h4><p>string</p><p>组件 ID。默认不指定。指定则可用于在 option 或者 API 中引用组件。</p><h4 id="dataset-source"><a href="#dataset-source" class="headerlink" title="dataset. source"></a><a href="https://www.echartsjs.com/zh/option.html#dataset">dataset.</a> <a href="https://www.echartsjs.com/zh/option.html#dataset.source">source</a></h4><p>ArrayObject</p><p>原始数据。一般来说，原始数据表达的是二维表。可以用如下这些格式表达二维表：</p><p>二维数组，其中第一行/列可以给出 <a href="https://www.echartsjs.com/zh/option.html#dataset.dimensions">维度名</a>，也可以不给出，直接就是数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    [<span class="string">&#x27;product&#x27;</span>, <span class="string">&#x27;2015&#x27;</span>, <span class="string">&#x27;2016&#x27;</span>, <span class="string">&#x27;2017&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;Matcha Latte&#x27;</span>, <span class="number">43.3</span>, <span class="number">85.8</span>, <span class="number">93.7</span>],</span><br><span class="line">    [<span class="string">&#x27;Milk Tea&#x27;</span>, <span class="number">83.1</span>, <span class="number">73.4</span>, <span class="number">55.1</span>],</span><br><span class="line">    [<span class="string">&#x27;Cheese Cocoa&#x27;</span>, <span class="number">86.4</span>, <span class="number">65.2</span>, <span class="number">82.5</span>],</span><br><span class="line">    [<span class="string">&#x27;Walnut Brownie&#x27;</span>, <span class="number">72.4</span>, <span class="number">53.9</span>, <span class="number">39.1</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>按行的 key-value 形式（对象数组），其中键（key）表明了 <a href="https://www.echartsjs.com/zh/option.html#dataset.dimensions">维度名</a>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;<span class="attr">product</span>: <span class="string">&#x27;Matcha Latte&#x27;</span>, <span class="attr">count</span>: <span class="number">823</span>, <span class="attr">score</span>: <span class="number">95.8</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">product</span>: <span class="string">&#x27;Milk Tea&#x27;</span>, <span class="attr">count</span>: <span class="number">235</span>, <span class="attr">score</span>: <span class="number">81.4</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">product</span>: <span class="string">&#x27;Cheese Cocoa&#x27;</span>, <span class="attr">count</span>: <span class="number">1042</span>, <span class="attr">score</span>: <span class="number">91.2</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">product</span>: <span class="string">&#x27;Walnut Brownie&#x27;</span>, <span class="attr">count</span>: <span class="number">988</span>, <span class="attr">score</span>: <span class="number">76.9</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>按列的 key-value 形式，每一项表示二维表的 “一列”：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&#x27;product&#x27;</span>: [<span class="string">&#x27;Matcha Latte&#x27;</span>, <span class="string">&#x27;Milk Tea&#x27;</span>, <span class="string">&#x27;Cheese Cocoa&#x27;</span>, <span class="string">&#x27;Walnut Brownie&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;count&#x27;</span>: [<span class="number">823</span>, <span class="number">235</span>, <span class="number">1042</span>, <span class="number">988</span>],</span><br><span class="line">    <span class="string">&#x27;score&#x27;</span>: [<span class="number">95.8</span>, <span class="number">81.4</span>, <span class="number">91.2</span>, <span class="number">76.9</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于 <code>dataset</code> 的详情，请参见[教程](<a href="https://www.echartsjs.com/zh/tutorial.html#%E4%BD%BF%E7%94%A8">https://www.echartsjs.com/zh/tutorial.html#使用</a> dataset 管理数据)。</p><h4 id="dataset-dimensions"><a href="#dataset-dimensions" class="headerlink" title="dataset. dimensions"></a><a href="https://www.echartsjs.com/zh/option.html#dataset">dataset.</a> <a href="https://www.echartsjs.com/zh/option.html#dataset.dimensions">dimensions</a></h4><p>Array</p><p>使用 dimensions 定义 <code>series.data</code> 或者 <code>dataset.source</code> 的每个维度的信息。</p><p>注意：如果使用了 <a href="https://www.echartsjs.com/zh/option.html#dataset">dataset</a>，那么可以在 <a href="https://www.echartsjs.com/zh/option.html#dataset.source">dataset.source</a> 的第一行/列中给出 dimension 名称。于是就不用在这里指定 dimension。但是，如果在这里指定了 <code>dimensions</code>，那么 ECharts 不再会自动从 <code>dataset.source</code> 的第一行/列中获取维度信息。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">option = &#123;</span><br><span class="line">    dataset: &#123;</span><br><span class="line">        source: [</span><br><span class="line">            <span class="comment">// 有了上面 dimensions 定义后，下面这五个维度的名称分别为：</span></span><br><span class="line">            <span class="comment">// &#x27;date&#x27;, &#x27;open&#x27;, &#x27;close&#x27;, &#x27;highest&#x27;, &#x27;lowest&#x27;</span></span><br><span class="line">            [<span class="number">12</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>, <span class="number">2</span>],</span><br><span class="line">            [<span class="number">23</span>, <span class="number">6</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">1</span>],</span><br><span class="line">            ...</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    series: &#123;</span><br><span class="line">        type: <span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">        <span class="comment">// 定义了每个维度的名称。这个名称会被显示到默认的 tooltip 中。</span></span><br><span class="line">        dimensions: [<span class="string">&#x27;date&#x27;</span>, <span class="string">&#x27;open&#x27;</span>, <span class="string">&#x27;close&#x27;</span>, <span class="string">&#x27;highest&#x27;</span>, <span class="string">&#x27;lowest&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">series: &#123;</span><br><span class="line">    type: <span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">    dimensions: [</span><br><span class="line">        <span class="literal">null</span>,                <span class="comment">// 如果此维度不想给出定义，则使用 null 即可</span></span><br><span class="line">        &#123;<span class="attr">type</span>: <span class="string">&#x27;ordinal&#x27;</span>&#125;,   <span class="comment">// 只定义此维度的类型。</span></span><br><span class="line">                             <span class="comment">// &#x27;ordinal&#x27; 表示离散型，一般文本使用这种类型。</span></span><br><span class="line">                             <span class="comment">// 如果类型没有被定义，会自动猜测类型。</span></span><br><span class="line">        &#123;<span class="attr">name</span>: <span class="string">&#x27;good&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;number&#x27;</span>&#125;,</span><br><span class="line">        <span class="string">&#x27;bad&#x27;</span>                <span class="comment">// 等同于 &#123;name: &#x27;bad&#x27;&#125;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>dimensions</code> 数组中的每一项可以是：</p><ul><li><p><code>string</code>，如 <code>&#39;someName&#39;</code>，等同于 <code>&#123;name: &#39;someName&#39;&#125;</code></p></li><li><pre><code>Object<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">，属性可以有：</span><br><span class="line"></span><br><span class="line">- name: &#96;string&#96;。</span><br><span class="line"></span><br><span class="line">- type:</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br></pre></td></tr></table></figure>  string</code></pre><p>  ，支持</p><ul><li><p><code>number</code>，默认，表示普通数据。</p></li><li><p><code>ordinal</code>，对于类目、文本这些 string 类型的数据，如果需要能在数轴上使用，须是 ‘ordinal’ 类型。ECharts 默认会自动判断这个类型。但是自动判断也是不可能很完备的，所以使用者也可以手动强制指定。</p></li><li><p><code>float</code>，即 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array">Float64Array</a>。</p></li><li><p><code>int</code>，即 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array">Int32Array</a>。</p></li><li><p><code>time</code>，表示时间类型。设置成 ‘time’ 则能支持自动解析数据成时间戳（timestamp），比如该维度的数据是 ‘2017-05-10’，会自动被解析。时间类型的支持参见 <a href="https://www.echartsjs.com/zh/option.html#series.data">data</a>。</p></li><li><p>displayName: 一般用于 tooltip 中维度名的展示。<code>string</code> 如果没有指定，默认使用 name 来展示。</p></li></ul></li></ul><p>值得一提的是，当定义了 <code>dimensions</code> 后，默认 <code>tooltip</code> 中对个维度的显示，会变为『竖排』，从而方便显示每个维度的名称。如果没有定义 <code>dimensions</code>，则默认 <code>tooltip</code> 会横排显示，且只显示数值没有维度名称可显示。</p><h4 id="dataset-sourceHeader"><a href="#dataset-sourceHeader" class="headerlink" title="dataset. sourceHeader"></a><a href="https://www.echartsjs.com/zh/option.html#dataset">dataset.</a> <a href="https://www.echartsjs.com/zh/option.html#dataset.sourceHeader">sourceHeader</a></h4><p>boolean</p><p><code>dataset.source</code> 第一行/列是否是 <a href="https://www.echartsjs.com/zh/dataset.dimensions">维度名</a> 信息。可选值：</p><ul><li><code>null/undefine</code>：默认，自动探测。</li><li><code>true</code>：第一行/列是维度名信息。</li><li><code>false</code>：第一行/列直接开始是数据。</li></ul><p>注意：“第一行/列” 的意思是，如果 <a href="https://www.echartsjs.com/zh/option.html#series.seriesLayoutBy">series.seriesLayoutBy</a> 设置为 <code>&#39;column&#39;</code>（默认值），则取第一行，如果 <code>series.seriesLayoutBy</code> 设置为 <code>&#39;row&#39;</code>，则取第一列。</p>]]></content>
    
    
    <summary type="html">这是echarts中dataset---数据集的配置项</summary>
    
    
    
    <category term="echarts" scheme="https://yangyangmm.cn/categories/echarts/"/>
    
    
    <category term="echarts" scheme="https://yangyangmm.cn/tags/echarts/"/>
    
  </entry>
  
  <entry>
    <title>echarts------xAxis</title>
    <link href="https://yangyangmm.cn/2020/12/16/echarts------xAxis/"/>
    <id>https://yangyangmm.cn/2020/12/16/echarts------xAxis/</id>
    <published>2020-12-16T08:29:02.000Z</published>
    <updated>2021-01-14T03:04:28.127Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a> <h1 id="xAxis—直角坐标系-grid-中的-x-轴"><a href="#xAxis—直角坐标系-grid-中的-x-轴" class="headerlink" title="xAxis—直角坐标系 grid 中的 x 轴"></a>xAxis—直角坐标系 grid 中的 x 轴</h1><h4 id="xAxis-id"><a href="#xAxis-id" class="headerlink" title="xAxis. id"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.id">id</a></h4><p>string</p><p>组件 ID。默认不指定。指定则可用于在 option 或者 API 中引用组件。</p><h4 id="xAxis-show-true"><a href="#xAxis-show-true" class="headerlink" title="xAxis. show = true"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.show">show</a> = true</h4><p>boolean</p><p>是否显示 x 轴。</p><h4 id="xAxis-gridIndex"><a href="#xAxis-gridIndex" class="headerlink" title="xAxis. gridIndex"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.gridIndex">gridIndex</a></h4><p>number</p><p>x 轴所在的 grid 的索引，默认位于第一个 grid。</p><h4 id="xAxis-position"><a href="#xAxis-position" class="headerlink" title="xAxis. position"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.position">position</a></h4><p>string</p><p>x 轴的位置。</p><p>可选：</p><ul><li><code>&#39;top&#39;</code></li><li><code>&#39;bottom&#39;</code></li></ul><p>默认 grid 中的第一个 x 轴在 grid 的下方（<code>&#39;bottom&#39;</code>），第二个 x 轴视第一个 x 轴的位置放在另一侧。</p><h4 id="xAxis-offset"><a href="#xAxis-offset" class="headerlink" title="xAxis. offset"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.offset">offset</a></h4><p>number</p><p>X 轴相对于默认位置的偏移，在相同的 <code>position</code> 上有多个 X 轴的时候有用。</p><h4 id="xAxis-type-‘category’"><a href="#xAxis-type-‘category’" class="headerlink" title="xAxis. type = ‘category’"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.type">type</a> = ‘category’</h4><p>string</p><p>坐标轴类型。</p><p>可选：</p><ul><li><code>&#39;value&#39;</code> 数值轴，适用于连续数据。</li><li><code>&#39;category&#39;</code> 类目轴，适用于离散的类目数据，为该类型时必须通过 <a href="https://www.echartsjs.com/zh/option.html#xAxis.data">data</a> 设置类目数据。</li><li><code>&#39;time&#39;</code> 时间轴，适用于连续的时序数据，与数值轴相比时间轴带有时间的格式化，在刻度计算上也有所不同，例如会根据跨度的范围来决定使用月，星期，日还是小时范围的刻度。</li><li><code>&#39;log&#39;</code> 对数轴。适用于对数数据。</li></ul><h4 id="xAxis-name"><a href="#xAxis-name" class="headerlink" title="xAxis. name"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.name">name</a></h4><p>string</p><p>坐标轴名称。</p><h4 id="xAxis-nameLocation-‘end’"><a href="#xAxis-nameLocation-‘end’" class="headerlink" title="xAxis. nameLocation = ‘end’"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.nameLocation">nameLocation</a> = ‘end’</h4><p>string</p><p>坐标轴名称显示位置。</p><p><strong>可选：</strong></p><ul><li><code>&#39;start&#39;</code></li><li><code>&#39;middle&#39;</code> 或者 <code>&#39;center&#39;</code></li><li><code>&#39;end&#39;</code></li></ul><h4 id="xAxis-nameTextStyle"><a href="#xAxis-nameTextStyle" class="headerlink" title="xAxis. nameTextStyle"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle">nameTextStyle</a></h4><p>Object</p><p>坐标轴名称的文字样式。</p><h4 id="xAxis-nameTextStyle-color"><a href="#xAxis-nameTextStyle-color" class="headerlink" title="xAxis.nameTextStyle. color"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle">nameTextStyle.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle.color">color</a></h4><p>Color</p><p>坐标轴名称的颜色，默认取 <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLine.lineStyle.color">axisLine.lineStyle.color</a>。</p><h4 id="xAxis-nameTextStyle-fontStyle-‘normal’"><a href="#xAxis-nameTextStyle-fontStyle-‘normal’" class="headerlink" title="xAxis.nameTextStyle. fontStyle = ‘normal’"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle">nameTextStyle.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle.fontStyle">fontStyle</a> = ‘normal’</h4><p>string</p><p>坐标轴名称文字字体的风格</p><p>可选：</p><ul><li><code>&#39;normal&#39;</code></li><li><code>&#39;italic&#39;</code></li><li><code>&#39;oblique&#39;</code></li></ul><h4 id="xAxis-nameTextStyle-fontWeight-normal"><a href="#xAxis-nameTextStyle-fontWeight-normal" class="headerlink" title="xAxis.nameTextStyle. fontWeight = normal"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle">nameTextStyle.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle.fontWeight">fontWeight</a> = normal</h4><p>stringnumber</p><p>坐标轴名称文字字体的粗细</p><p>可选：</p><ul><li><code>&#39;normal&#39;</code></li><li><code>&#39;bold&#39;</code></li><li><code>&#39;bolder&#39;</code></li><li><code>&#39;lighter&#39;</code></li><li>100 | 200 | 300 | 400…</li></ul><h4 id="xAxis-nameTextStyle-fontFamily-‘sans-serif’"><a href="#xAxis-nameTextStyle-fontFamily-‘sans-serif’" class="headerlink" title="xAxis.nameTextStyle. fontFamily = ‘sans-serif’"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle">nameTextStyle.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle.fontFamily">fontFamily</a> = ‘sans-serif’</h4><p>string</p><p>坐标轴名称文字的字体系列</p><p>还可以是 ‘serif’ , ‘monospace’, ‘Arial’, ‘Courier New’, ‘Microsoft YaHei’, …</p><h4 id="xAxis-nameTextStyle-fontSize-12"><a href="#xAxis-nameTextStyle-fontSize-12" class="headerlink" title="xAxis.nameTextStyle. fontSize = 12"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle">nameTextStyle.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle.fontSize">fontSize</a> = 12</h4><p>number</p><p>坐标轴名称文字的字体大小</p><h4 id="xAxis-nameTextStyle-align"><a href="#xAxis-nameTextStyle-align" class="headerlink" title="xAxis.nameTextStyle. align"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle">nameTextStyle.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle.align">align</a></h4><p>string</p><p>文字水平对齐方式，默认自动。</p><p>可选：</p><ul><li><code>&#39;left&#39;</code></li><li><code>&#39;center&#39;</code></li><li><code>&#39;right&#39;</code></li></ul><p><code>rich</code> 中如果没有设置 <code>align</code>，则会取父层级的 <code>align</code>。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    align: right,</span><br><span class="line">    rich: &#123;</span><br><span class="line">        a: &#123;</span><br><span class="line">            <span class="comment">// 没有设置 `align`，则 `align` 为 right</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="xAxis-nameTextStyle-verticalAlign"><a href="#xAxis-nameTextStyle-verticalAlign" class="headerlink" title="xAxis.nameTextStyle. verticalAlign"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle">nameTextStyle.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle.verticalAlign">verticalAlign</a></h4><p>string</p><p>文字垂直对齐方式，默认自动。</p><p>可选：</p><ul><li><code>&#39;top&#39;</code></li><li><code>&#39;middle&#39;</code></li><li><code>&#39;bottom&#39;</code></li></ul><p><code>rich</code> 中如果没有设置 <code>verticalAlign</code>，则会取父层级的 <code>verticalAlign</code>。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    verticalAlign: bottom,</span><br><span class="line">    rich: &#123;</span><br><span class="line">        a: &#123;</span><br><span class="line">            <span class="comment">// 没有设置 `verticalAlign`，则 `verticalAlign` 为 bottom</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="xAxis-nameTextStyle-lineHeight"><a href="#xAxis-nameTextStyle-lineHeight" class="headerlink" title="xAxis.nameTextStyle. lineHeight"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle">nameTextStyle.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle.lineHeight">lineHeight</a></h4><p>number</p><p>行高。</p><p><code>rich</code> 中如果没有设置 <code>lineHeight</code>，则会取父层级的 <code>lineHeight</code>。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    lineHeight: <span class="number">56</span>,</span><br><span class="line">    rich: &#123;</span><br><span class="line">        a: &#123;</span><br><span class="line">            <span class="comment">// 没有设置 `lineHeight`，则 `lineHeight` 为 56</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="xAxis-nameTextStyle-backgroundColor-‘transparent’"><a href="#xAxis-nameTextStyle-backgroundColor-‘transparent’" class="headerlink" title="xAxis.nameTextStyle. backgroundColor = ‘transparent’"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle">nameTextStyle.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle.backgroundColor">backgroundColor</a> = ‘transparent’</h4><p>stringObject</p><p>文字块背景色。</p><p>可以是直接的颜色值，例如：<code>&#39;#123234&#39;</code>, <code>&#39;red&#39;</code>, <code>&#39;rgba(0,23,11,0.3)&#39;</code>。</p><p>可以支持使用图片，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">backgroundColor: &#123;</span><br><span class="line">    image: <span class="string">&#x27;xxx/xxx.png&#x27;</span></span><br><span class="line">    <span class="comment">// 这里可以是图片的 URL，</span></span><br><span class="line">    <span class="comment">// 或者图片的 dataURI，</span></span><br><span class="line">    <span class="comment">// 或者 HTMLImageElement 对象，</span></span><br><span class="line">    <span class="comment">// 或者 HTMLCanvasElement 对象。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当使用图片的时候，可以使用 <code>width</code> 或 <code>height</code> 指定高宽，也可以不指定自适应。</p><h4 id="xAxis-nameTextStyle-borderColor-‘transparent’"><a href="#xAxis-nameTextStyle-borderColor-‘transparent’" class="headerlink" title="xAxis.nameTextStyle. borderColor = ‘transparent’"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle">nameTextStyle.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle.borderColor">borderColor</a> = ‘transparent’</h4><p>Color</p><p>文字块边框颜色。</p><h4 id="xAxis-nameTextStyle-borderWidth"><a href="#xAxis-nameTextStyle-borderWidth" class="headerlink" title="xAxis.nameTextStyle. borderWidth"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle">nameTextStyle.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle.borderWidth">borderWidth</a></h4><p>number</p><p>文字块边框宽度。</p><h4 id="xAxis-nameTextStyle-borderRadius"><a href="#xAxis-nameTextStyle-borderRadius" class="headerlink" title="xAxis.nameTextStyle. borderRadius"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle">nameTextStyle.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle.borderRadius">borderRadius</a></h4><p>numberArray</p><p>文字块的圆角。</p><h4 id="xAxis-nameTextStyle-padding"><a href="#xAxis-nameTextStyle-padding" class="headerlink" title="xAxis.nameTextStyle. padding"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle">nameTextStyle.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle.padding">padding</a></h4><p>numberArray</p><p>文字块的内边距。例如：</p><ul><li><code>padding: [3, 4, 5, 6]</code>：表示 <code>[上, 右, 下, 左]</code> 的边距。</li><li><code>padding: 4</code>：表示 <code>padding: [4, 4, 4, 4]</code>。</li><li><code>padding: [3, 4]</code>：表示 <code>padding: [3, 4, 3, 4]</code>。</li></ul><p>注意，文字块的 <code>width</code> 和 <code>height</code> 指定的是内容高宽，不包含 <code>padding</code>。</p><h4 id="xAxis-nameTextStyle-shadowColor-‘transparent’"><a href="#xAxis-nameTextStyle-shadowColor-‘transparent’" class="headerlink" title="xAxis.nameTextStyle. shadowColor = ‘transparent’"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle">nameTextStyle.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle.shadowColor">shadowColor</a> = ‘transparent’</h4><p>Color</p><p>文字块的背景阴影颜色。</p><h4 id="xAxis-nameTextStyle-shadowBlur"><a href="#xAxis-nameTextStyle-shadowBlur" class="headerlink" title="xAxis.nameTextStyle. shadowBlur"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle">nameTextStyle.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle.shadowBlur">shadowBlur</a></h4><p>number</p><p>文字块的背景阴影长度。</p><h4 id="xAxis-nameTextStyle-shadowOffsetX"><a href="#xAxis-nameTextStyle-shadowOffsetX" class="headerlink" title="xAxis.nameTextStyle. shadowOffsetX"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle">nameTextStyle.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle.shadowOffsetX">shadowOffsetX</a></h4><p>number</p><p>文字块的背景阴影 X 偏移。</p><h4 id="xAxis-nameTextStyle-shadowOffsetY"><a href="#xAxis-nameTextStyle-shadowOffsetY" class="headerlink" title="xAxis.nameTextStyle. shadowOffsetY"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle">nameTextStyle.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle.shadowOffsetY">shadowOffsetY</a></h4><p>number</p><p>文字块的背景阴影 Y 偏移。</p><h4 id="xAxis-nameTextStyle-width"><a href="#xAxis-nameTextStyle-width" class="headerlink" title="xAxis.nameTextStyle. width"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle">nameTextStyle.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle.width">width</a></h4><p>numberstring</p><p>文字块的宽度。一般不用指定，不指定则自动是文字的宽度。在想做表格项或者使用图片（参见 <code>backgroundColor</code>）时，可能会使用它。</p><p>注意，文字块的 <code>width</code> 和 <code>height</code> 指定的是内容高宽，不包含 <code>padding</code>。</p><p><code>width</code> 也可以是百分比字符串，如 <code>&#39;100%&#39;</code>。表示的是所在文本块的 <code>contentWidth</code>（即不包含文本块的 <code>padding</code>）的百分之多少。之所以以 <code>contentWidth</code> 做基数，因为每个文本片段只能基于 <code>content box</code> 布局。如果以 <code>outerWidth</code> 做基数，则百分比的计算在实用中不具有意义，可能会超出。</p><p>注意，如果不定义 <code>rich</code> 属性，则不能指定 <code>width</code> 和 <code>height</code>。</p><h4 id="xAxis-nameTextStyle-height"><a href="#xAxis-nameTextStyle-height" class="headerlink" title="xAxis.nameTextStyle. height"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle">nameTextStyle.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle.height">height</a></h4><p>numberstring</p><p>文字块的高度。一般不用指定，不指定则自动是文字的高度。在使用图片（参见 <code>backgroundColor</code>）时，可能会使用它。</p><p>注意，文字块的 <code>width</code> 和 <code>height</code> 指定的是内容高宽，不包含 <code>padding</code>。</p><p>注意，如果不定义 <code>rich</code> 属性，则不能指定 <code>width</code> 和 <code>height</code>。</p><h4 id="xAxis-nameTextStyle-textBorderColor-‘transparent’"><a href="#xAxis-nameTextStyle-textBorderColor-‘transparent’" class="headerlink" title="xAxis.nameTextStyle. textBorderColor = ‘transparent’"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle">nameTextStyle.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle.textBorderColor">textBorderColor</a> = ‘transparent’</h4><p>Color</p><p>文字本身的描边颜色。</p><h4 id="xAxis-nameTextStyle-textBorderWidth"><a href="#xAxis-nameTextStyle-textBorderWidth" class="headerlink" title="xAxis.nameTextStyle. textBorderWidth"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle">nameTextStyle.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle.textBorderWidth">textBorderWidth</a></h4><p>number</p><p>文字本身的描边宽度。</p><h4 id="xAxis-nameTextStyle-textShadowColor-‘transparent’"><a href="#xAxis-nameTextStyle-textShadowColor-‘transparent’" class="headerlink" title="xAxis.nameTextStyle. textShadowColor = ‘transparent’"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle">nameTextStyle.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle.textShadowColor">textShadowColor</a> = ‘transparent’</h4><p>Color</p><p>文字本身的阴影颜色。</p><h4 id="xAxis-nameTextStyle-textShadowBlur"><a href="#xAxis-nameTextStyle-textShadowBlur" class="headerlink" title="xAxis.nameTextStyle. textShadowBlur"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle">nameTextStyle.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle.textShadowBlur">textShadowBlur</a></h4><p>number</p><p>文字本身的阴影长度。</p><h4 id="xAxis-nameTextStyle-textShadowOffsetX"><a href="#xAxis-nameTextStyle-textShadowOffsetX" class="headerlink" title="xAxis.nameTextStyle. textShadowOffsetX"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle">nameTextStyle.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle.textShadowOffsetX">textShadowOffsetX</a></h4><p>number</p><p>文字本身的阴影 X 偏移。</p><h4 id="xAxis-nameTextStyle-textShadowOffsetY"><a href="#xAxis-nameTextStyle-textShadowOffsetY" class="headerlink" title="xAxis.nameTextStyle. textShadowOffsetY"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle">nameTextStyle.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle.textShadowOffsetY">textShadowOffsetY</a></h4><p>number</p><p>文字本身的阴影 Y 偏移。</p><h4 id="xAxis-nameTextStyle-rich"><a href="#xAxis-nameTextStyle-rich" class="headerlink" title="xAxis.nameTextStyle. rich"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle">nameTextStyle.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle.rich">rich</a></h4><p>Object</p><p>在 <code>rich</code> 里面，可以自定义富文本样式。利用富文本样式，可以在标签中做出非常丰富的效果。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">label: &#123;</span><br><span class="line">    <span class="comment">// 在文本中，可以对部分文本采用 rich 中定义样式。</span></span><br><span class="line">    <span class="comment">// 这里需要在文本中使用标记符号：</span></span><br><span class="line">    <span class="comment">// `&#123;styleName|text content text content&#125;` 标记样式名。</span></span><br><span class="line">    <span class="comment">// 注意，换行仍是使用 &#x27;\n&#x27;。</span></span><br><span class="line">    formatter: [</span><br><span class="line">        <span class="string">&#x27;&#123;a|这段文本采用样式a&#125;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;&#123;b|这段文本采用样式b&#125;这段用默认样式&#123;x|这段用样式x&#125;&#x27;</span></span><br><span class="line">    ].join(<span class="string">&#x27;\n&#x27;</span>),</span><br><span class="line"></span><br><span class="line">    rich: &#123;</span><br><span class="line">        a: &#123;</span><br><span class="line">            color: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">            lineHeight: <span class="number">10</span></span><br><span class="line">        &#125;,</span><br><span class="line">        b: &#123;</span><br><span class="line">            backgroundColor: &#123;</span><br><span class="line">                image: <span class="string">&#x27;xxx/xxx.jpg&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            height: <span class="number">40</span></span><br><span class="line">        &#125;,</span><br><span class="line">        x: &#123;</span><br><span class="line">            fontSize: <span class="number">18</span>,</span><br><span class="line">            fontFamily: <span class="string">&#x27;Microsoft YaHei&#x27;</span>,</span><br><span class="line">            borderColor: <span class="string">&#x27;#449933&#x27;</span>,</span><br><span class="line">            borderRadius: <span class="number">4</span></span><br><span class="line">        &#125;,</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>详情参见教程：<a href="https://www.echartsjs.com/zh/tutorial.html#%E5%AF%8C%E6%96%87%E6%9C%AC%E6%A0%87%E7%AD%BE">富文本标签</a></p><h5 id="所有属性"><a href="#所有属性" class="headerlink" title="所有属性"></a>所有属性</h5><p>{ <a href="https://www.echartsjs.com/zh/option.html#xAxis.nameTextStyle.rich."></a> }</p><h4 id="xAxis-nameGap-15"><a href="#xAxis-nameGap-15" class="headerlink" title="xAxis. nameGap = 15"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.nameGap">nameGap</a> = 15</h4><p>number</p><p>坐标轴名称与轴线之间的距离。</p><h4 id="xAxis-nameRotate"><a href="#xAxis-nameRotate" class="headerlink" title="xAxis. nameRotate"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.nameRotate">nameRotate</a></h4><p>number</p><p>坐标轴名字旋转，角度值。</p><h4 id="xAxis-inverse"><a href="#xAxis-inverse" class="headerlink" title="xAxis. inverse"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.inverse">inverse</a></h4><p>boolean</p><p>是否是反向坐标轴。ECharts 3 中新加。</p><h4 id="xAxis-boundaryGap"><a href="#xAxis-boundaryGap" class="headerlink" title="xAxis. boundaryGap"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.boundaryGap">boundaryGap</a></h4><p>booleanArray</p><p>坐标轴两边留白策略，类目轴和非类目轴的设置和表现不一样。</p><p>类目轴中 <code>boundaryGap</code> 可以配置为 <code>true</code> 和 <code>false</code>。默认为 <code>true</code>，这时候<a href="https://www.echartsjs.com/zh/option.html#xAxis.axisTick">刻度</a>只是作为分隔线，标签和数据点都会在两个<a href="https://www.echartsjs.com/zh/option.html#xAxis.axisTick">刻度</a>之间的带(band)中间。</p><p>非类目轴，包括时间，数值，对数轴，<code>boundaryGap</code>是一个两个值的数组，分别表示数据最小值和最大值的延伸范围，可以直接设置数值或者相对的百分比，在设置 <a href="https://www.echartsjs.com/zh/option.html#xAxis.min">min</a> 和 <a href="https://www.echartsjs.com/zh/option.html#xAxis.max">max</a> 后无效。 <strong>示例：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">boundaryGap: [<span class="string">&#x27;20%&#x27;</span>, <span class="string">&#x27;20%&#x27;</span>]</span><br></pre></td></tr></table></figure><h4 id="xAxis-min"><a href="#xAxis-min" class="headerlink" title="xAxis. min"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.min">min</a></h4><p>numberstringFunction</p><p>坐标轴刻度最小值。</p><p>可以设置成特殊值 <code>&#39;dataMin&#39;</code>，此时取数据在该轴上的最小值作为最小刻度。</p><p>不设置时会自动计算最小值保证坐标轴刻度的均匀分布。</p><p>在类目轴中，也可以设置为类目的序数（如类目轴 <code>data: [&#39;类A&#39;, &#39;类B&#39;, &#39;类C&#39;]</code> 中，序数 <code>2</code> 表示 <code>&#39;类C&#39;</code>。也可以设置为负数，如 <code>-3</code>）。</p><p>当设置成 <code>function</code> 形式时，可以根据计算得出的数据最大最小值设定坐标轴的最小值。如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">min: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value.min - <span class="number">20</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>value</code> 是一个包含 <code>min</code> 和 <code>max</code> 的对象，分别表示数据的最大最小值，这个函数应该返回坐标轴的最小值。</p><h4 id="xAxis-max"><a href="#xAxis-max" class="headerlink" title="xAxis. max"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.max">max</a></h4><p>numberstringFunction</p><p>坐标轴刻度最大值。</p><p>可以设置成特殊值 <code>&#39;dataMax&#39;</code>，此时取数据在该轴上的最大值作为最大刻度。</p><p>不设置时会自动计算最大值保证坐标轴刻度的均匀分布。</p><p>在类目轴中，也可以设置为类目的序数（如类目轴 <code>data: [&#39;类A&#39;, &#39;类B&#39;, &#39;类C&#39;]</code> 中，序数 <code>2</code> 表示 <code>&#39;类C&#39;</code>。也可以设置为负数，如 <code>-3</code>）。</p><p>当设置成 <code>function</code> 形式时，可以根据计算得出的数据最大最小值设定坐标轴的最小值。如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">max: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value.max - <span class="number">20</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>value</code> 是一个包含 <code>min</code> 和 <code>max</code> 的对象，分别表示数据的最大最小值，这个函数应该返回坐标轴的最大值。</p><h4 id="xAxis-scale"><a href="#xAxis-scale" class="headerlink" title="xAxis. scale"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.scale">scale</a></h4><p>boolean</p><p>只在数值轴中（<a href="https://www.echartsjs.com/zh/option.html#xAxis.type">type</a>: ‘value’）有效。</p><p>是否是脱离 0 值比例。设置成 <code>true</code> 后坐标刻度不会强制包含零刻度。在双数值轴的散点图中比较有用。</p><p>在设置 <a href="https://www.echartsjs.com/zh/option.html#xAxis.min">min</a> 和 <a href="https://www.echartsjs.com/zh/option.html#xAxis.max">max</a> 之后该配置项无效。</p><h4 id="xAxis-splitNumber-5"><a href="#xAxis-splitNumber-5" class="headerlink" title="xAxis. splitNumber = 5"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.splitNumber">splitNumber</a> = 5</h4><p>number</p><p>坐标轴的分割段数，需要注意的是这个分割段数只是个预估值，最后实际显示的段数会在这个基础上根据分割后坐标轴刻度显示的易读程度作调整。</p><p>在类目轴中无效。</p><h4 id="xAxis-minInterval"><a href="#xAxis-minInterval" class="headerlink" title="xAxis. minInterval"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.minInterval">minInterval</a></h4><p>number</p><p>自动计算的坐标轴最小间隔大小。</p><p>例如可以设置成<code>1</code>保证坐标轴分割刻度显示成整数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    minInterval: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>只在数值轴或时间轴中（<a href="https://www.echartsjs.com/zh/option.html#xAxis.type">type</a>: ‘value’ 或 ‘time’）有效。</p><h4 id="xAxis-maxInterval"><a href="#xAxis-maxInterval" class="headerlink" title="xAxis. maxInterval"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.maxInterval">maxInterval</a></h4><p>number</p><p>自动计算的坐标轴最大间隔大小。</p><p>例如，在时间轴（（<a href="https://www.echartsjs.com/zh/option.html#xAxis.type">type</a>: ‘time’））可以设置成 <code>3600 * 24 * 1000</code> 保证坐标轴分割刻度最大为一天。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    maxInterval: <span class="number">3600</span> * <span class="number">24</span> * <span class="number">1000</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>只在数值轴或时间轴中（<a href="https://www.echartsjs.com/zh/option.html#xAxis.type">type</a>: ‘value’ 或 ‘time’）有效。</p><h4 id="xAxis-interval"><a href="#xAxis-interval" class="headerlink" title="xAxis. interval"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.interval">interval</a></h4><p>number</p><p>强制设置坐标轴分割间隔。</p><p>因为 <a href="https://www.echartsjs.com/zh/option.html#xAxis.splitNumber">splitNumber</a> 是预估的值，实际根据策略计算出来的刻度可能无法达到想要的效果，这时候可以使用 interval 配合 <a href="https://www.echartsjs.com/zh/option.html#xAxis.min">min</a>、<a href="https://www.echartsjs.com/zh/option.html#xAxis.max">max</a> 强制设定刻度划分，一般不建议使用。</p><p>无法在类目轴中使用。在时间轴（<a href="https://www.echartsjs.com/zh/option.html#xAxis.type">type</a>: ‘time’）中需要传时间戳，在对数轴（<a href="https://www.echartsjs.com/zh/option.html#xAxis.type">type</a>: ‘log’）中需要传指数值。</p><h4 id="xAxis-logBase-10"><a href="#xAxis-logBase-10" class="headerlink" title="xAxis. logBase = 10"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.logBase">logBase</a> = 10</h4><p>number</p><p>对数轴的底数，只在对数轴中（<a href="https://www.echartsjs.com/zh/option.html#xAxis.type">type</a>: ‘log’）有效。</p><h4 id="xAxis-silent"><a href="#xAxis-silent" class="headerlink" title="xAxis. silent"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.silent">silent</a></h4><p>boolean</p><p>坐标轴是否是静态无法交互。</p><h4 id="xAxis-triggerEvent"><a href="#xAxis-triggerEvent" class="headerlink" title="xAxis. triggerEvent"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.triggerEvent">triggerEvent</a></h4><p>boolean</p><p>坐标轴的标签是否响应和触发鼠标事件，默认不响应。</p><p>事件参数如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 组件类型，xAxis, yAxis, radiusAxis, angleAxis</span></span><br><span class="line">    <span class="comment">// 对应组件类型都会有一个属性表示组件的 index，例如 xAxis 就是 xAxisIndex</span></span><br><span class="line">    componentType: string,</span><br><span class="line">    <span class="comment">// 未格式化过的刻度值, 点击刻度标签有效</span></span><br><span class="line">    value: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="comment">// 坐标轴名称, 点击坐标轴名称有效</span></span><br><span class="line">    name: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="xAxis-axisLine"><a href="#xAxis-axisLine" class="headerlink" title="xAxis. axisLine"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLine">axisLine</a></h4><p>Object</p><p>坐标轴轴线相关设置。</p><h4 id="xAxis-axisLine-show-true"><a href="#xAxis-axisLine-show-true" class="headerlink" title="xAxis.axisLine. show = true"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLine">axisLine.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLine.show">show</a> = true</h4><p>boolean</p><p>是否显示坐标轴轴线。</p><h4 id="xAxis-axisLine-onZero-true"><a href="#xAxis-axisLine-onZero-true" class="headerlink" title="xAxis.axisLine. onZero = true"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLine">axisLine.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLine.onZero">onZero</a> = true</h4><p>boolean</p><p>X 轴或者 Y 轴的轴线是否在另一个轴的 0 刻度上，只有在另一个轴为数值轴且包含 0 刻度时有效。</p><h4 id="xAxis-axisLine-onZeroAxisIndex"><a href="#xAxis-axisLine-onZeroAxisIndex" class="headerlink" title="xAxis.axisLine. onZeroAxisIndex"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLine">axisLine.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLine.onZeroAxisIndex">onZeroAxisIndex</a></h4><p>number</p><p>当有双轴时，可以用这个属性手动指定，在哪个轴的 0 刻度上。</p><h4 id="xAxis-axisLine-symbol-‘none’"><a href="#xAxis-axisLine-symbol-‘none’" class="headerlink" title="xAxis.axisLine. symbol = ‘none’"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLine">axisLine.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLine.symbol">symbol</a> = ‘none’</h4><p>stringArray</p><p>轴线两边的箭头。可以是字符串，表示两端使用同样的箭头；或者长度为 2 的字符串数组，分别表示两端的箭头。默认不显示箭头，即 <code>&#39;none&#39;</code>。两端都显示箭头可以设置为 <code>&#39;arrow&#39;</code>，只在末端显示箭头可以设置为 <code>[&#39;none&#39;, &#39;arrow&#39;]</code>。</p><h4 id="xAxis-axisLine-symbolSize-10-15"><a href="#xAxis-axisLine-symbolSize-10-15" class="headerlink" title="xAxis.axisLine. symbolSize = [10, 15]"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLine">axisLine.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLine.symbolSize">symbolSize</a> = [10, 15]</h4><p>Array</p><p>轴线两边的箭头的大小，第一个数字表示宽度（垂直坐标轴方向），第二个数字表示高度（平行坐标轴方向）。</p><h4 id="xAxis-axisLine-symbolOffset-0-0"><a href="#xAxis-axisLine-symbolOffset-0-0" class="headerlink" title="xAxis.axisLine. symbolOffset = [0, 0]"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLine">axisLine.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLine.symbolOffset">symbolOffset</a> = [0, 0]</h4><p>Arraynumber</p><p>轴线两边的箭头的偏移，如果是数组，第一个数字表示起始箭头的偏移，第二个数字表示末端箭头的偏移；如果是数字，表示这两个箭头使用同样的偏移。</p><h4 id="xAxis-axisLine-lineStyle"><a href="#xAxis-axisLine-lineStyle" class="headerlink" title="xAxis.axisLine. lineStyle"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLine">axisLine.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLine.lineStyle">lineStyle</a></h4><p>Object</p><h5 id="所有属性-1"><a href="#所有属性-1" class="headerlink" title="所有属性"></a>所有属性</h5><p>{ <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLine.lineStyle.color">color</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLine.lineStyle.width">width</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLine.lineStyle.type">type</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLine.lineStyle.shadowBlur">shadowBlur</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLine.lineStyle.shadowColor">shadowColor</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLine.lineStyle.shadowOffsetX">shadowOffsetX</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLine.lineStyle.shadowOffsetY">shadowOffsetY</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLine.lineStyle.opacity">opacity</a> }</p><h4 id="xAxis-axisTick"><a href="#xAxis-axisTick" class="headerlink" title="xAxis. axisTick"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisTick">axisTick</a></h4><p>Object</p><p>坐标轴刻度相关设置。</p><h4 id="xAxis-axisTick-show-true"><a href="#xAxis-axisTick-show-true" class="headerlink" title="xAxis.axisTick. show = true"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisTick">axisTick.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisTick.show">show</a> = true</h4><p>boolean</p><p>是否显示坐标轴刻度。</p><h4 id="xAxis-axisTick-alignWithLabel"><a href="#xAxis-axisTick-alignWithLabel" class="headerlink" title="xAxis.axisTick. alignWithLabel"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisTick">axisTick.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisTick.alignWithLabel">alignWithLabel</a></h4><p>boolean</p><p>类目轴中在 <code>boundaryGap</code> 为 <code>true</code> 的时候有效，可以保证刻度线和标签对齐。如下图：</p><p><img src="https://www.echartsjs.com/zh/documents/asset/img/axis-align-with-label.png" alt="img"></p><h4 id="xAxis-axisTick-interval-‘auto’"><a href="#xAxis-axisTick-interval-‘auto’" class="headerlink" title="xAxis.axisTick. interval = ‘auto’"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisTick">axisTick.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisTick.interval">interval</a> = ‘auto’</h4><p>numberFunction</p><p>坐标轴刻度的显示间隔，在类目轴中有效。默认同 <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel.interval">axisLabel.interval</a> 一样。</p><p>默认会采用标签不重叠的策略间隔显示标签。</p><p>可以设置成 0 强制显示所有标签。</p><p>如果设置为 <code>1</code>，表示『隔一个标签显示一个标签』，如果值为 <code>2</code>，表示隔两个标签显示一个标签，以此类推。</p><p>可以用数值表示间隔的数据，也可以通过回调函数控制。回调函数格式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(index:number, <span class="attr">value</span>: string) =&gt; boolean</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第一个参数是类目的 index，第二个值是类目名称，如果跳过则返回 <code>false</code>。</p><h4 id="xAxis-axisTick-inside"><a href="#xAxis-axisTick-inside" class="headerlink" title="xAxis.axisTick. inside"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisTick">axisTick.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisTick.inside">inside</a></h4><p>boolean</p><p>坐标轴刻度是否朝内，默认朝外。</p><h4 id="xAxis-axisTick-length-5"><a href="#xAxis-axisTick-length-5" class="headerlink" title="xAxis.axisTick. length = 5"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisTick">axisTick.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisTick.length">length</a> = 5</h4><p>number</p><p>坐标轴刻度的长度。</p><h4 id="xAxis-axisTick-lineStyle"><a href="#xAxis-axisTick-lineStyle" class="headerlink" title="xAxis.axisTick. lineStyle"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisTick">axisTick.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisTick.lineStyle">lineStyle</a></h4><p>Object</p><p>刻度线的样式设置。</p><h5 id="所有属性-2"><a href="#所有属性-2" class="headerlink" title="所有属性"></a>所有属性</h5><p>{ <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisTick.lineStyle.color">color</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisTick.lineStyle.width">width</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisTick.lineStyle.type">type</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisTick.lineStyle.shadowBlur">shadowBlur</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisTick.lineStyle.shadowColor">shadowColor</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisTick.lineStyle.shadowOffsetX">shadowOffsetX</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisTick.lineStyle.shadowOffsetY">shadowOffsetY</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisTick.lineStyle.opacity">opacity</a> }</p><h4 id="xAxis-minorTick"><a href="#xAxis-minorTick" class="headerlink" title="xAxis. minorTick"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.minorTick">minorTick</a></h4><p>Object</p><p>坐标轴次刻度线相关设置。</p><p>注意：次刻度线无法在类目轴（<a href="https://www.echartsjs.com/zh/option.html#xAxis.type">type</a>: <code>&#39;category&#39;</code>）中使用。</p><p>示例：</p><ol><li>函数绘图中使用次刻度线</li></ol><iframe data-src="https://www.echartsjs.com/examples/en/view.html?c=line-function&amp;edit=1&amp;reset=1" width="600" height="350" __idm_frm__="1225" style="box-sizing: border-box; border: 1px solid rgb(204, 204, 204); display: block; margin-top: 5px; max-width: 100%;"></iframe>2) 在对数轴中使用次刻度线<iframe data-src="https://www.echartsjs.com/examples/en/view.html?c=line-log&amp;edit=1&amp;reset=1" width="600" height="350" __idm_frm__="1226" style="box-sizing: border-box; border: 1px solid rgb(204, 204, 204); display: block; margin-top: 5px; max-width: 100%;"></iframe>####  [xAxis.](https://www.echartsjs.com/zh/option.html#xAxis)[minorTick.](https://www.echartsjs.com/zh/option.html#xAxis.minorTick) [show](https://www.echartsjs.com/zh/option.html#xAxis.minorTick.show)<p>boolean</p><p>是否显示次刻度线。</p><h4 id="xAxis-minorTick-splitNumber-5"><a href="#xAxis-minorTick-splitNumber-5" class="headerlink" title="xAxis.minorTick. splitNumber = 5"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.minorTick">minorTick.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.minorTick.splitNumber">splitNumber</a> = 5</h4><p>number</p><p>次刻度线分割数，默认会分割成 5 段</p><h4 id="xAxis-minorTick-length-3"><a href="#xAxis-minorTick-length-3" class="headerlink" title="xAxis.minorTick. length = 3"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.minorTick">minorTick.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.minorTick.length">length</a> = 3</h4><p>number</p><p>次刻度线的长度。</p><h4 id="xAxis-minorTick-lineStyle"><a href="#xAxis-minorTick-lineStyle" class="headerlink" title="xAxis.minorTick. lineStyle"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.minorTick">minorTick.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.minorTick.lineStyle">lineStyle</a></h4><p>Object</p><h5 id="所有属性-3"><a href="#所有属性-3" class="headerlink" title="所有属性"></a>所有属性</h5><p>{ <a href="https://www.echartsjs.com/zh/option.html#xAxis.minorTick.lineStyle.color">color</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.minorTick.lineStyle.width">width</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.minorTick.lineStyle.type">type</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.minorTick.lineStyle.shadowBlur">shadowBlur</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.minorTick.lineStyle.shadowColor">shadowColor</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.minorTick.lineStyle.shadowOffsetX">shadowOffsetX</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.minorTick.lineStyle.shadowOffsetY">shadowOffsetY</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.minorTick.lineStyle.opacity">opacity</a> }</p><h4 id="xAxis-axisLabel"><a href="#xAxis-axisLabel" class="headerlink" title="xAxis. axisLabel"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel">axisLabel</a></h4><p>Object</p><p>坐标轴刻度标签的相关设置。</p><h4 id="xAxis-axisLabel-show-true"><a href="#xAxis-axisLabel-show-true" class="headerlink" title="xAxis.axisLabel. show = true"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel">axisLabel.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel.show">show</a> = true</h4><p>boolean</p><p>是否显示刻度标签。</p><h4 id="xAxis-axisLabel-interval-‘auto’"><a href="#xAxis-axisLabel-interval-‘auto’" class="headerlink" title="xAxis.axisLabel. interval = ‘auto’"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel">axisLabel.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel.interval">interval</a> = ‘auto’</h4><p>numberFunction</p><p>坐标轴刻度标签的显示间隔，在类目轴中有效。</p><p>默认会采用标签不重叠的策略间隔显示标签。</p><p>可以设置成 0 强制显示所有标签。</p><p>如果设置为 <code>1</code>，表示『隔一个标签显示一个标签』，如果值为 <code>2</code>，表示隔两个标签显示一个标签，以此类推。</p><p>可以用数值表示间隔的数据，也可以通过回调函数控制。回调函数格式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(index:number, <span class="attr">value</span>: string) =&gt; boolean</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第一个参数是类目的 index，第二个值是类目名称，如果跳过则返回 <code>false</code>。</p><h4 id="xAxis-axisLabel-inside"><a href="#xAxis-axisLabel-inside" class="headerlink" title="xAxis.axisLabel. inside"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel">axisLabel.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel.inside">inside</a></h4><p>boolean</p><p>刻度标签是否朝内，默认朝外。</p><h4 id="xAxis-axisLabel-rotate"><a href="#xAxis-axisLabel-rotate" class="headerlink" title="xAxis.axisLabel. rotate"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel">axisLabel.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel.rotate">rotate</a></h4><p>number</p><p>刻度标签旋转的角度，在类目轴的类目标签显示不下的时候可以通过旋转防止标签之间重叠。</p><p>旋转的角度从 -90 度到 90 度。</p><h4 id="xAxis-axisLabel-margin-8"><a href="#xAxis-axisLabel-margin-8" class="headerlink" title="xAxis.axisLabel. margin = 8"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel">axisLabel.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel.margin">margin</a> = 8</h4><p>number</p><p>刻度标签与轴线之间的距离。</p><h4 id="xAxis-axisLabel-formatter"><a href="#xAxis-axisLabel-formatter" class="headerlink" title="xAxis.axisLabel. formatter"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel">axisLabel.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel.formatter">formatter</a></h4><p>stringFunction</p><p>刻度标签的内容格式器，支持字符串模板和回调函数两种形式。</p><p>示例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用字符串模板，模板变量为刻度默认标签 &#123;value&#125;</span></span><br><span class="line">formatter: <span class="string">&#x27;&#123;value&#125; kg&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用函数模板，函数参数分别为刻度数值（类目），刻度的索引</span></span><br><span class="line">formatter: <span class="function"><span class="keyword">function</span> (<span class="params">value, index</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 格式化成月/日，只在第一个刻度显示年份</span></span><br><span class="line">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(value);</span><br><span class="line">    <span class="keyword">var</span> texts = [(date.getMonth() + <span class="number">1</span>), date.getDate()];</span><br><span class="line">    <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">        texts.unshift(date.getYear());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> texts.join(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="xAxis-axisLabel-showMinLabel"><a href="#xAxis-axisLabel-showMinLabel" class="headerlink" title="xAxis.axisLabel. showMinLabel"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel">axisLabel.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel.showMinLabel">showMinLabel</a></h4><p>boolean</p><p>是否显示最小 tick 的 label。可取值 <code>true</code>, <code>false</code>, <code>null</code>。默认自动判定（即如果标签重叠，不会显示最小 tick 的 label）。</p><h4 id="xAxis-axisLabel-showMaxLabel"><a href="#xAxis-axisLabel-showMaxLabel" class="headerlink" title="xAxis.axisLabel. showMaxLabel"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel">axisLabel.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel.showMaxLabel">showMaxLabel</a></h4><p>boolean</p><p>是否显示最大 tick 的 label。可取值 <code>true</code>, <code>false</code>, <code>null</code>。默认自动判定（即如果标签重叠，不会显示最大 tick 的 label）。</p><h4 id="xAxis-axisLabel-color"><a href="#xAxis-axisLabel-color" class="headerlink" title="xAxis.axisLabel. color"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel">axisLabel.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel.color">color</a></h4><p>ColorFunction</p><p>刻度标签文字的颜色，默认取 <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLine.lineStyle.color">axisLine.lineStyle.color</a>。支持回调函数，格式如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(val: string) =&gt; Color</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参数是标签的文本，返回颜色值，如下示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">textStyle: &#123;</span><br><span class="line">    color: <span class="function"><span class="keyword">function</span> (<span class="params">value, index</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value &gt;= <span class="number">0</span> ? <span class="string">&#x27;green&#x27;</span> : <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="xAxis-axisLabel-fontStyle-‘normal’"><a href="#xAxis-axisLabel-fontStyle-‘normal’" class="headerlink" title="xAxis.axisLabel. fontStyle = ‘normal’"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel">axisLabel.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel.fontStyle">fontStyle</a> = ‘normal’</h4><p>string</p><p>文字字体的风格</p><p>可选：</p><ul><li><code>&#39;normal&#39;</code></li><li><code>&#39;italic&#39;</code></li><li><code>&#39;oblique&#39;</code></li></ul><h4 id="xAxis-axisLabel-fontWeight-normal"><a href="#xAxis-axisLabel-fontWeight-normal" class="headerlink" title="xAxis.axisLabel. fontWeight = normal"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel">axisLabel.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel.fontWeight">fontWeight</a> = normal</h4><p>stringnumber</p><p>文字字体的粗细</p><p>可选：</p><ul><li><code>&#39;normal&#39;</code></li><li><code>&#39;bold&#39;</code></li><li><code>&#39;bolder&#39;</code></li><li><code>&#39;lighter&#39;</code></li><li>100 | 200 | 300 | 400…</li></ul><h4 id="xAxis-axisLabel-fontFamily-‘sans-serif’"><a href="#xAxis-axisLabel-fontFamily-‘sans-serif’" class="headerlink" title="xAxis.axisLabel. fontFamily = ‘sans-serif’"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel">axisLabel.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel.fontFamily">fontFamily</a> = ‘sans-serif’</h4><p>string</p><p>文字的字体系列</p><p>还可以是 ‘serif’ , ‘monospace’, ‘Arial’, ‘Courier New’, ‘Microsoft YaHei’, …</p><h4 id="xAxis-axisLabel-fontSize-12"><a href="#xAxis-axisLabel-fontSize-12" class="headerlink" title="xAxis.axisLabel. fontSize = 12"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel">axisLabel.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel.fontSize">fontSize</a> = 12</h4><p>number</p><p>文字的字体大小</p><h4 id="xAxis-axisLabel-align"><a href="#xAxis-axisLabel-align" class="headerlink" title="xAxis.axisLabel. align"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel">axisLabel.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel.align">align</a></h4><p>string</p><p>文字水平对齐方式，默认自动。</p><p>可选：</p><ul><li><code>&#39;left&#39;</code></li><li><code>&#39;center&#39;</code></li><li><code>&#39;right&#39;</code></li></ul><p><code>rich</code> 中如果没有设置 <code>align</code>，则会取父层级的 <code>align</code>。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    align: right,</span><br><span class="line">    rich: &#123;</span><br><span class="line">        a: &#123;</span><br><span class="line">            <span class="comment">// 没有设置 `align`，则 `align` 为 right</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="xAxis-axisLabel-verticalAlign"><a href="#xAxis-axisLabel-verticalAlign" class="headerlink" title="xAxis.axisLabel. verticalAlign"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel">axisLabel.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel.verticalAlign">verticalAlign</a></h4><p>string</p><p>文字垂直对齐方式，默认自动。</p><p>可选：</p><ul><li><code>&#39;top&#39;</code></li><li><code>&#39;middle&#39;</code></li><li><code>&#39;bottom&#39;</code></li></ul><p><code>rich</code> 中如果没有设置 <code>verticalAlign</code>，则会取父层级的 <code>verticalAlign</code>。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    verticalAlign: bottom,</span><br><span class="line">    rich: &#123;</span><br><span class="line">        a: &#123;</span><br><span class="line">            <span class="comment">// 没有设置 `verticalAlign`，则 `verticalAlign` 为 bottom</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="xAxis-axisLabel-lineHeight"><a href="#xAxis-axisLabel-lineHeight" class="headerlink" title="xAxis.axisLabel. lineHeight"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel">axisLabel.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel.lineHeight">lineHeight</a></h4><p>number</p><p>行高。</p><p><code>rich</code> 中如果没有设置 <code>lineHeight</code>，则会取父层级的 <code>lineHeight</code>。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    lineHeight: <span class="number">56</span>,</span><br><span class="line">    rich: &#123;</span><br><span class="line">        a: &#123;</span><br><span class="line">            <span class="comment">// 没有设置 `lineHeight`，则 `lineHeight` 为 56</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="xAxis-axisLabel-backgroundColor-‘transparent’"><a href="#xAxis-axisLabel-backgroundColor-‘transparent’" class="headerlink" title="xAxis.axisLabel. backgroundColor = ‘transparent’"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel">axisLabel.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel.backgroundColor">backgroundColor</a> = ‘transparent’</h4><p>stringObject</p><p>文字块背景色。</p><p>可以是直接的颜色值，例如：<code>&#39;#123234&#39;</code>, <code>&#39;red&#39;</code>, <code>&#39;rgba(0,23,11,0.3)&#39;</code>。</p><p>可以支持使用图片，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">backgroundColor: &#123;</span><br><span class="line">    image: <span class="string">&#x27;xxx/xxx.png&#x27;</span></span><br><span class="line">    <span class="comment">// 这里可以是图片的 URL，</span></span><br><span class="line">    <span class="comment">// 或者图片的 dataURI，</span></span><br><span class="line">    <span class="comment">// 或者 HTMLImageElement 对象，</span></span><br><span class="line">    <span class="comment">// 或者 HTMLCanvasElement 对象。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当使用图片的时候，可以使用 <code>width</code> 或 <code>height</code> 指定高宽，也可以不指定自适应。</p><h4 id="xAxis-axisLabel-borderColor-‘transparent’"><a href="#xAxis-axisLabel-borderColor-‘transparent’" class="headerlink" title="xAxis.axisLabel. borderColor = ‘transparent’"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel">axisLabel.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel.borderColor">borderColor</a> = ‘transparent’</h4><p>Color</p><p>文字块边框颜色。</p><h4 id="xAxis-axisLabel-borderWidth"><a href="#xAxis-axisLabel-borderWidth" class="headerlink" title="xAxis.axisLabel. borderWidth"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel">axisLabel.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel.borderWidth">borderWidth</a></h4><p>number</p><p>文字块边框宽度。</p><h4 id="xAxis-axisLabel-borderRadius"><a href="#xAxis-axisLabel-borderRadius" class="headerlink" title="xAxis.axisLabel. borderRadius"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel">axisLabel.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel.borderRadius">borderRadius</a></h4><p>numberArray</p><p>文字块的圆角。</p><h4 id="xAxis-axisLabel-padding"><a href="#xAxis-axisLabel-padding" class="headerlink" title="xAxis.axisLabel. padding"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel">axisLabel.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel.padding">padding</a></h4><p>numberArray</p><p>文字块的内边距。例如：</p><ul><li><code>padding: [3, 4, 5, 6]</code>：表示 <code>[上, 右, 下, 左]</code> 的边距。</li><li><code>padding: 4</code>：表示 <code>padding: [4, 4, 4, 4]</code>。</li><li><code>padding: [3, 4]</code>：表示 <code>padding: [3, 4, 3, 4]</code>。</li></ul><p>注意，文字块的 <code>width</code> 和 <code>height</code> 指定的是内容高宽，不包含 <code>padding</code>。</p><h4 id="xAxis-axisLabel-shadowColor-‘transparent’"><a href="#xAxis-axisLabel-shadowColor-‘transparent’" class="headerlink" title="xAxis.axisLabel. shadowColor = ‘transparent’"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel">axisLabel.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel.shadowColor">shadowColor</a> = ‘transparent’</h4><p>Color</p><p>文字块的背景阴影颜色。</p><h4 id="xAxis-axisLabel-shadowBlur"><a href="#xAxis-axisLabel-shadowBlur" class="headerlink" title="xAxis.axisLabel. shadowBlur"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel">axisLabel.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel.shadowBlur">shadowBlur</a></h4><p>number</p><p>文字块的背景阴影长度。</p><h4 id="xAxis-axisLabel-shadowOffsetX"><a href="#xAxis-axisLabel-shadowOffsetX" class="headerlink" title="xAxis.axisLabel. shadowOffsetX"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel">axisLabel.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel.shadowOffsetX">shadowOffsetX</a></h4><p>number</p><p>文字块的背景阴影 X 偏移。</p><h4 id="xAxis-axisLabel-shadowOffsetY"><a href="#xAxis-axisLabel-shadowOffsetY" class="headerlink" title="xAxis.axisLabel. shadowOffsetY"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel">axisLabel.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel.shadowOffsetY">shadowOffsetY</a></h4><p>number</p><p>文字块的背景阴影 Y 偏移。</p><h4 id="xAxis-axisLabel-width"><a href="#xAxis-axisLabel-width" class="headerlink" title="xAxis.axisLabel. width"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel">axisLabel.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel.width">width</a></h4><p>numberstring</p><p>文字块的宽度。一般不用指定，不指定则自动是文字的宽度。在想做表格项或者使用图片（参见 <code>backgroundColor</code>）时，可能会使用它。</p><p>注意，文字块的 <code>width</code> 和 <code>height</code> 指定的是内容高宽，不包含 <code>padding</code>。</p><p><code>width</code> 也可以是百分比字符串，如 <code>&#39;100%&#39;</code>。表示的是所在文本块的 <code>contentWidth</code>（即不包含文本块的 <code>padding</code>）的百分之多少。之所以以 <code>contentWidth</code> 做基数，因为每个文本片段只能基于 <code>content box</code> 布局。如果以 <code>outerWidth</code> 做基数，则百分比的计算在实用中不具有意义，可能会超出。</p><p>注意，如果不定义 <code>rich</code> 属性，则不能指定 <code>width</code> 和 <code>height</code>。</p><h4 id="xAxis-axisLabel-height"><a href="#xAxis-axisLabel-height" class="headerlink" title="xAxis.axisLabel. height"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel">axisLabel.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel.height">height</a></h4><p>numberstring</p><p>文字块的高度。一般不用指定，不指定则自动是文字的高度。在使用图片（参见 <code>backgroundColor</code>）时，可能会使用它。</p><p>注意，文字块的 <code>width</code> 和 <code>height</code> 指定的是内容高宽，不包含 <code>padding</code>。</p><p>注意，如果不定义 <code>rich</code> 属性，则不能指定 <code>width</code> 和 <code>height</code>。</p><h4 id="xAxis-axisLabel-textBorderColor-‘transparent’"><a href="#xAxis-axisLabel-textBorderColor-‘transparent’" class="headerlink" title="xAxis.axisLabel. textBorderColor = ‘transparent’"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel">axisLabel.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel.textBorderColor">textBorderColor</a> = ‘transparent’</h4><p>Color</p><p>文字本身的描边颜色。</p><h4 id="xAxis-axisLabel-textBorderWidth"><a href="#xAxis-axisLabel-textBorderWidth" class="headerlink" title="xAxis.axisLabel. textBorderWidth"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel">axisLabel.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel.textBorderWidth">textBorderWidth</a></h4><p>number</p><p>文字本身的描边宽度。</p><h4 id="xAxis-axisLabel-textShadowColor-‘transparent’"><a href="#xAxis-axisLabel-textShadowColor-‘transparent’" class="headerlink" title="xAxis.axisLabel. textShadowColor = ‘transparent’"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel">axisLabel.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel.textShadowColor">textShadowColor</a> = ‘transparent’</h4><p>Color</p><p>文字本身的阴影颜色。</p><h4 id="xAxis-axisLabel-textShadowBlur"><a href="#xAxis-axisLabel-textShadowBlur" class="headerlink" title="xAxis.axisLabel. textShadowBlur"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel">axisLabel.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel.textShadowBlur">textShadowBlur</a></h4><p>number</p><p>文字本身的阴影长度。</p><h4 id="xAxis-axisLabel-textShadowOffsetX"><a href="#xAxis-axisLabel-textShadowOffsetX" class="headerlink" title="xAxis.axisLabel. textShadowOffsetX"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel">axisLabel.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel.textShadowOffsetX">textShadowOffsetX</a></h4><p>number</p><p>文字本身的阴影 X 偏移。</p><h4 id="xAxis-axisLabel-textShadowOffsetY"><a href="#xAxis-axisLabel-textShadowOffsetY" class="headerlink" title="xAxis.axisLabel. textShadowOffsetY"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel">axisLabel.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel.textShadowOffsetY">textShadowOffsetY</a></h4><p>number</p><p>文字本身的阴影 Y 偏移。</p><h4 id="xAxis-axisLabel-rich"><a href="#xAxis-axisLabel-rich" class="headerlink" title="xAxis.axisLabel. rich"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel">axisLabel.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel.rich">rich</a></h4><p>Object</p><p>在 <code>rich</code> 里面，可以自定义富文本样式。利用富文本样式，可以在标签中做出非常丰富的效果。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">label: &#123;</span><br><span class="line">    <span class="comment">// 在文本中，可以对部分文本采用 rich 中定义样式。</span></span><br><span class="line">    <span class="comment">// 这里需要在文本中使用标记符号：</span></span><br><span class="line">    <span class="comment">// `&#123;styleName|text content text content&#125;` 标记样式名。</span></span><br><span class="line">    <span class="comment">// 注意，换行仍是使用 &#x27;\n&#x27;。</span></span><br><span class="line">    formatter: [</span><br><span class="line">        <span class="string">&#x27;&#123;a|这段文本采用样式a&#125;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;&#123;b|这段文本采用样式b&#125;这段用默认样式&#123;x|这段用样式x&#125;&#x27;</span></span><br><span class="line">    ].join(<span class="string">&#x27;\n&#x27;</span>),</span><br><span class="line"></span><br><span class="line">    rich: &#123;</span><br><span class="line">        a: &#123;</span><br><span class="line">            color: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">            lineHeight: <span class="number">10</span></span><br><span class="line">        &#125;,</span><br><span class="line">        b: &#123;</span><br><span class="line">            backgroundColor: &#123;</span><br><span class="line">                image: <span class="string">&#x27;xxx/xxx.jpg&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            height: <span class="number">40</span></span><br><span class="line">        &#125;,</span><br><span class="line">        x: &#123;</span><br><span class="line">            fontSize: <span class="number">18</span>,</span><br><span class="line">            fontFamily: <span class="string">&#x27;Microsoft YaHei&#x27;</span>,</span><br><span class="line">            borderColor: <span class="string">&#x27;#449933&#x27;</span>,</span><br><span class="line">            borderRadius: <span class="number">4</span></span><br><span class="line">        &#125;,</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>详情参见教程：<a href="https://www.echartsjs.com/zh/tutorial.html#%E5%AF%8C%E6%96%87%E6%9C%AC%E6%A0%87%E7%AD%BE">富文本标签</a></p><h5 id="所有属性-4"><a href="#所有属性-4" class="headerlink" title="所有属性"></a>所有属性</h5><p>{ <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel.rich."></a> }</p><h4 id="xAxis-splitLine"><a href="#xAxis-splitLine" class="headerlink" title="xAxis. splitLine"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.splitLine">splitLine</a></h4><p>Object</p><p>坐标轴在 <a href="https://www.echartsjs.com/zh/option.html#grid">grid</a> 区域中的分隔线。</p><h4 id="xAxis-splitLine-show-true"><a href="#xAxis-splitLine-show-true" class="headerlink" title="xAxis.splitLine. show = true"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.splitLine">splitLine.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.splitLine.show">show</a> = true</h4><p>boolean</p><p>是否显示分隔线。默认数值轴显示，类目轴不显示。</p><h4 id="xAxis-splitLine-interval-‘auto’"><a href="#xAxis-splitLine-interval-‘auto’" class="headerlink" title="xAxis.splitLine. interval = ‘auto’"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.splitLine">splitLine.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.splitLine.interval">interval</a> = ‘auto’</h4><p>numberFunction</p><p>坐标轴分隔线的显示间隔，在类目轴中有效。默认同 <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel.interval">axisLabel.interval</a> 一样。</p><p>默认会采用标签不重叠的策略间隔显示标签。</p><p>可以设置成 0 强制显示所有标签。</p><p>如果设置为 <code>1</code>，表示『隔一个标签显示一个标签』，如果值为 <code>2</code>，表示隔两个标签显示一个标签，以此类推。</p><p>可以用数值表示间隔的数据，也可以通过回调函数控制。回调函数格式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(index:number, <span class="attr">value</span>: string) =&gt; boolean</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第一个参数是类目的 index，第二个值是类目名称，如果跳过则返回 <code>false</code>。</p><h4 id="xAxis-splitLine-lineStyle"><a href="#xAxis-splitLine-lineStyle" class="headerlink" title="xAxis.splitLine. lineStyle"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.splitLine">splitLine.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.splitLine.lineStyle">lineStyle</a></h4><p>Object</p><h5 id="所有属性-5"><a href="#所有属性-5" class="headerlink" title="所有属性"></a>所有属性</h5><p>{ <a href="https://www.echartsjs.com/zh/option.html#xAxis.splitLine.lineStyle.color">color</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.splitLine.lineStyle.width">width</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.splitLine.lineStyle.type">type</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.splitLine.lineStyle.shadowBlur">shadowBlur</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.splitLine.lineStyle.shadowColor">shadowColor</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.splitLine.lineStyle.shadowOffsetX">shadowOffsetX</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.splitLine.lineStyle.shadowOffsetY">shadowOffsetY</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.splitLine.lineStyle.opacity">opacity</a> }</p><h4 id="xAxis-minorSplitLine"><a href="#xAxis-minorSplitLine" class="headerlink" title="xAxis. minorSplitLine"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.minorSplitLine">minorSplitLine</a></h4><p>Object</p><p>坐标轴在 <a href="https://www.echartsjs.com/zh/option.html#grid">grid</a> 区域中的次分隔线。次分割线会对齐次刻度线 <a href="https://www.echartsjs.com/zh/option.html#xAxis.minorTick">minorTick</a></p><h4 id="xAxis-minorSplitLine-show"><a href="#xAxis-minorSplitLine-show" class="headerlink" title="xAxis.minorSplitLine. show"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.minorSplitLine">minorSplitLine.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.minorSplitLine.show">show</a></h4><p>boolean</p><p>是否显示次分隔线。默认不显示。</p><h5 id="所有属性-6"><a href="#所有属性-6" class="headerlink" title="所有属性"></a>所有属性</h5><p>{ <a href="https://www.echartsjs.com/zh/option.html#xAxis.minorSplitLine.show.color">color</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.minorSplitLine.show.width">width</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.minorSplitLine.show.type">type</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.minorSplitLine.show.shadowBlur">shadowBlur</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.minorSplitLine.show.shadowColor">shadowColor</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.minorSplitLine.show.shadowOffsetX">shadowOffsetX</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.minorSplitLine.show.shadowOffsetY">shadowOffsetY</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.minorSplitLine.show.opacity">opacity</a> }</p><h4 id="xAxis-splitArea"><a href="#xAxis-splitArea" class="headerlink" title="xAxis. splitArea"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.splitArea">splitArea</a></h4><p>Object</p><p>坐标轴在 <a href="https://www.echartsjs.com/zh/option.html#grid">grid</a> 区域中的分隔区域，默认不显示。</p><h4 id="xAxis-splitArea-interval-‘auto’"><a href="#xAxis-splitArea-interval-‘auto’" class="headerlink" title="xAxis.splitArea. interval = ‘auto’"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.splitArea">splitArea.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.splitArea.interval">interval</a> = ‘auto’</h4><p>numberFunction</p><p>坐标轴分隔区域的显示间隔，在类目轴中有效。默认同 <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisLabel.interval">axisLabel.interval</a> 一样。</p><p>默认会采用标签不重叠的策略间隔显示标签。</p><p>可以设置成 0 强制显示所有标签。</p><p>如果设置为 <code>1</code>，表示『隔一个标签显示一个标签』，如果值为 <code>2</code>，表示隔两个标签显示一个标签，以此类推。</p><p>可以用数值表示间隔的数据，也可以通过回调函数控制。回调函数格式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(index:number, <span class="attr">value</span>: string) =&gt; boolean</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第一个参数是类目的 index，第二个值是类目名称，如果跳过则返回 <code>false</code>。</p><h4 id="xAxis-splitArea-show"><a href="#xAxis-splitArea-show" class="headerlink" title="xAxis.splitArea. show"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.splitArea">splitArea.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.splitArea.show">show</a></h4><p>boolean</p><p>是否显示分隔区域。</p><h4 id="xAxis-splitArea-areaStyle"><a href="#xAxis-splitArea-areaStyle" class="headerlink" title="xAxis.splitArea. areaStyle"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.splitArea">splitArea.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.splitArea.areaStyle">areaStyle</a></h4><p>Object</p><p>分隔区域的样式设置。</p><h5 id="所有属性-7"><a href="#所有属性-7" class="headerlink" title="所有属性"></a>所有属性</h5><p>{ <a href="https://www.echartsjs.com/zh/option.html#xAxis.splitArea.areaStyle.color">color</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.splitArea.areaStyle.shadowBlur">shadowBlur</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.splitArea.areaStyle.shadowColor">shadowColor</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.splitArea.areaStyle.shadowOffsetX">shadowOffsetX</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.splitArea.areaStyle.shadowOffsetY">shadowOffsetY</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.splitArea.areaStyle.opacity">opacity</a> }</p><h4 id="xAxis-data"><a href="#xAxis-data" class="headerlink" title="xAxis. data"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.data">data</a></h4><p>Array</p><p>类目数据，在类目轴（<a href="https://www.echartsjs.com/zh/option.html#xAxis.type">type</a>: <code>&#39;category&#39;</code>）中有效。</p><p>如果没有设置 <a href="https://www.echartsjs.com/zh/option.html#xAxis.type">type</a>，但是设置了 <code>axis.data</code>，则认为 <code>type</code> 是 <code>&#39;category&#39;</code>。</p><p>如果设置了 <a href="https://www.echartsjs.com/zh/option.html#xAxis.type">type</a> 是 <code>&#39;category&#39;</code>，但没有设置 <code>axis.data</code>，则 <code>axis.data</code> 的内容会自动从 <a href="https://www.echartsjs.com/zh/option.html#series.data">series.data</a> 中获取，这会比较方便。不过注意，<code>axis.data</code> 指明的是 <code>&#39;category&#39;</code> 轴的取值范围。如果不指定而是从 <a href="https://www.echartsjs.com/zh/option.html#series.data">series.data</a> 中获取，那么只能获取到 <a href="https://www.echartsjs.com/zh/option.html#series.data">series.data</a> 中出现的值。比如说，假如 <a href="https://www.echartsjs.com/zh/option.html#series.data">series.data</a> 为空时，就什么也获取不到。</p><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有类目名称列表</span></span><br><span class="line">data: [<span class="string">&#x27;周一&#x27;</span>, <span class="string">&#x27;周二&#x27;</span>, <span class="string">&#x27;周三&#x27;</span>, <span class="string">&#x27;周四&#x27;</span>, <span class="string">&#x27;周五&#x27;</span>, <span class="string">&#x27;周六&#x27;</span>, <span class="string">&#x27;周日&#x27;</span>]</span><br><span class="line"><span class="comment">// 每一项也可以是具体的配置项，此时取配置项中的 `value` 为类目名</span></span><br><span class="line">data: [&#123;</span><br><span class="line">    value: <span class="string">&#x27;周一&#x27;</span>,</span><br><span class="line">    <span class="comment">// 突出周一</span></span><br><span class="line">    textStyle: &#123;</span><br><span class="line">        fontSize: <span class="number">20</span>,</span><br><span class="line">        color: <span class="string">&#x27;red&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="string">&#x27;周二&#x27;</span>, <span class="string">&#x27;周三&#x27;</span>, <span class="string">&#x27;周四&#x27;</span>, <span class="string">&#x27;周五&#x27;</span>, <span class="string">&#x27;周六&#x27;</span>, <span class="string">&#x27;周日&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="xAxis-data-value"><a href="#xAxis-data-value" class="headerlink" title="xAxis.data. value"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.data">data.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.data.value">value</a></h4><p>string</p><p>单个类目名称。</p><h4 id="xAxis-data-textStyle"><a href="#xAxis-data-textStyle" class="headerlink" title="xAxis.data. textStyle"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.data">data.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.data.textStyle">textStyle</a></h4><p>Object</p><p>类目标签的文字样式。</p><h5 id="所有属性-8"><a href="#所有属性-8" class="headerlink" title="所有属性"></a>所有属性</h5><p>{ <a href="https://www.echartsjs.com/zh/option.html#xAxis.data.textStyle.color">color</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.data.textStyle.fontStyle">fontStyle</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.data.textStyle.fontWeight">fontWeight</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.data.textStyle.fontFamily">fontFamily</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.data.textStyle.fontSize">fontSize</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.data.textStyle.align">align</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.data.textStyle.verticalAlign">verticalAlign</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.data.textStyle.lineHeight">lineHeight</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.data.textStyle.backgroundColor">backgroundColor</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.data.textStyle.borderColor">borderColor</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.data.textStyle.borderWidth">borderWidth</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.data.textStyle.borderRadius">borderRadius</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.data.textStyle.padding">padding</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.data.textStyle.shadowColor">shadowColor</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.data.textStyle.shadowBlur">shadowBlur</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.data.textStyle.shadowOffsetX">shadowOffsetX</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.data.textStyle.shadowOffsetY">shadowOffsetY</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.data.textStyle.width">width</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.data.textStyle.height">height</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.data.textStyle.textBorderColor">textBorderColor</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.data.textStyle.textBorderWidth">textBorderWidth</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.data.textStyle.textShadowColor">textShadowColor</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.data.textStyle.textShadowBlur">textShadowBlur</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.data.textStyle.textShadowOffsetX">textShadowOffsetX</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.data.textStyle.textShadowOffsetY">textShadowOffsetY</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.data.textStyle.rich">rich</a> }</p><h4 id="xAxis-axisPointer"><a href="#xAxis-axisPointer" class="headerlink" title="xAxis. axisPointer"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer">axisPointer</a></h4><p>Object</p><p>axisPointer settings on axis.</p><h4 id="xAxis-axisPointer-show"><a href="#xAxis-axisPointer-show" class="headerlink" title="xAxis.axisPointer. show"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer">axisPointer.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.show">show</a></h4><p>boolean</p><p>默认不显示。但是如果 <a href="https://www.echartsjs.com/zh/option.html#tooltip.trigger">tooltip.trigger</a> 设置为 <code>&#39;axis&#39;</code> 或者 <a href="https://www.echartsjs.com/zh/option.html#tooltip.axisPointer.type">tooltip.axisPointer.type</a> 设置为 <code>&#39;cross&#39;</code>，则自动显示 axisPointer。坐标系会自动选择显示显示哪个轴的 axisPointer，也可以使用 <a href="https://www.echartsjs.com/zh/option.html#tooltip.axisPointer.axis">tooltip.axisPointer.axis</a> 改变这种选择。</p><h4 id="xAxis-axisPointer-type-‘line’"><a href="#xAxis-axisPointer-type-‘line’" class="headerlink" title="xAxis.axisPointer. type = ‘line’"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer">axisPointer.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.type">type</a> = ‘line’</h4><p>string</p><p>指示器类型。</p><p>可选</p><ul><li><code>&#39;line&#39;</code> 直线指示器</li><li><code>&#39;shadow&#39;</code> 阴影指示器</li><li><code>&#39;none&#39;</code> 无指示器</li></ul><h4 id="xAxis-axisPointer-snap"><a href="#xAxis-axisPointer-snap" class="headerlink" title="xAxis.axisPointer. snap"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer">axisPointer.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.snap">snap</a></h4><p>boolean</p><p>坐标轴指示器是否自动吸附到点上。默认自动判断。</p><p>这个功能在数值轴和时间轴上比较有意义，可以自动寻找细小的数值点。</p><h4 id="xAxis-axisPointer-z"><a href="#xAxis-axisPointer-z" class="headerlink" title="xAxis.axisPointer. z"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer">axisPointer.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.z">z</a></h4><p>number</p><p>坐标轴指示器的 z 值。控制图形的前后顺序。<code>z</code>值小的图形会被<code>z</code>值大的图形覆盖。</p><h4 id="xAxis-axisPointer-label"><a href="#xAxis-axisPointer-label" class="headerlink" title="xAxis.axisPointer. label"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer">axisPointer.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.label">label</a></h4><p>Object</p><p>坐标轴指示器的文本标签。</p><h5 id="所有属性-9"><a href="#所有属性-9" class="headerlink" title="所有属性"></a>所有属性</h5><p>{ <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.label.show">show</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.label.precision">precision</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.label.formatter">formatter</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.label.margin">margin</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.label.color">color</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.label.fontStyle">fontStyle</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.label.fontWeight">fontWeight</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.label.fontFamily">fontFamily</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.label.fontSize">fontSize</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.label.lineHeight">lineHeight</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.label.width">width</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.label.height">height</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.label.textBorderColor">textBorderColor</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.label.textBorderWidth">textBorderWidth</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.label.textShadowColor">textShadowColor</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.label.textShadowBlur">textShadowBlur</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.label.textShadowOffsetX">textShadowOffsetX</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.label.textShadowOffsetY">textShadowOffsetY</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.label.padding">padding</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.label.backgroundColor">backgroundColor</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.label.borderColor">borderColor</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.label.borderWidth">borderWidth</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.label.shadowBlur">shadowBlur</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.label.shadowColor">shadowColor</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.label.shadowOffsetX">shadowOffsetX</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.label.shadowOffsetY">shadowOffsetY</a> }</p><h4 id="xAxis-axisPointer-lineStyle"><a href="#xAxis-axisPointer-lineStyle" class="headerlink" title="xAxis.axisPointer. lineStyle"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer">axisPointer.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.lineStyle">lineStyle</a></h4><p>Object</p><p><a href="https://www.echartsjs.com/zh/option.html#tooltip.axisPointer.type">axisPointer.type</a> 为 <code>&#39;line&#39;</code> 时有效。</p><h5 id="所有属性-10"><a href="#所有属性-10" class="headerlink" title="所有属性"></a>所有属性</h5><p>{ <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.lineStyle.color">color</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.lineStyle.width">width</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.lineStyle.type">type</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.lineStyle.shadowBlur">shadowBlur</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.lineStyle.shadowColor">shadowColor</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.lineStyle.shadowOffsetX">shadowOffsetX</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.lineStyle.shadowOffsetY">shadowOffsetY</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.lineStyle.opacity">opacity</a> }</p><h4 id="xAxis-axisPointer-shadowStyle"><a href="#xAxis-axisPointer-shadowStyle" class="headerlink" title="xAxis.axisPointer. shadowStyle"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer">axisPointer.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.shadowStyle">shadowStyle</a></h4><p>Object</p><p><a href="https://www.echartsjs.com/zh/option.html#tooltip.axisPointer.type">axisPointer.type</a> 为 <code>&#39;shadow&#39;</code> 时有效。</p><h5 id="所有属性-11"><a href="#所有属性-11" class="headerlink" title="所有属性"></a>所有属性</h5><p>{ <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.shadowStyle.color">color</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.shadowStyle.shadowBlur">shadowBlur</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.shadowStyle.shadowColor">shadowColor</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.shadowStyle.shadowOffsetX">shadowOffsetX</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.shadowStyle.shadowOffsetY">shadowOffsetY</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.shadowStyle.opacity">opacity</a> }</p><h4 id="xAxis-axisPointer-triggerTooltip-true"><a href="#xAxis-axisPointer-triggerTooltip-true" class="headerlink" title="xAxis.axisPointer. triggerTooltip = true"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer">axisPointer.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.triggerTooltip">triggerTooltip</a> = true</h4><p>boolean</p><p>是否触发 tooltip。如果不想触发 tooltip 可以关掉。</p><h4 id="xAxis-axisPointer-value"><a href="#xAxis-axisPointer-value" class="headerlink" title="xAxis.axisPointer. value"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer">axisPointer.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.value">value</a></h4><p>number</p><p>当前的 value。在使用 <a href="https://www.echartsjs.com/zh/xAxisPointer.handle">axisPointer.handle</a> 时，可以设置此值进行初始值设定，从而决定 axisPointer 的初始位置。</p><h4 id="xAxis-axisPointer-status"><a href="#xAxis-axisPointer-status" class="headerlink" title="xAxis.axisPointer. status"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer">axisPointer.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.status">status</a></h4><p>boolean</p><p>当前的状态，可取值为 <code>&#39;show&#39;</code> 和 <code>&#39;hide&#39;</code>。</p><h4 id="xAxis-axisPointer-handle"><a href="#xAxis-axisPointer-handle" class="headerlink" title="xAxis.axisPointer. handle"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a><a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer">axisPointer.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.handle">handle</a></h4><p>Object</p><p>拖拽手柄，适用于触屏的环境。参见 <a href="https://www.echartsjs.com/examples/en/editor.html?c=line-tooltip-touch&edit=1&reset=1">例子</a>。</p><h5 id="所有属性-12"><a href="#所有属性-12" class="headerlink" title="所有属性"></a>所有属性</h5><p>{ <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.handle.show">show</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.handle.icon">icon</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.handle.size">size</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.handle.margin">margin</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.handle.color">color</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.handle.throttle">throttle</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.handle.shadowBlur">shadowBlur</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.handle.shadowColor">shadowColor</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.handle.shadowOffsetX">shadowOffsetX</a> , <a href="https://www.echartsjs.com/zh/option.html#xAxis.axisPointer.handle.shadowOffsetY">shadowOffsetY</a> }</p><h4 id="xAxis-zlevel"><a href="#xAxis-zlevel" class="headerlink" title="xAxis. zlevel"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.zlevel">zlevel</a></h4><p>number</p><p>X 轴所有图形的 zlevel 值。</p><p><code>zlevel</code>用于 Canvas 分层，不同<code>zlevel</code>值的图形会放置在不同的 Canvas 中，Canvas 分层是一种常见的优化手段。我们可以把一些图形变化频繁（例如有动画）的组件设置成一个单独的<code>zlevel</code>。需要注意的是过多的 Canvas 会引起内存开销的增大，在手机端上需要谨慎使用以防崩溃。</p><p><code>zlevel</code> 大的 Canvas 会放在 <code>zlevel</code> 小的 Canvas 的上面。</p><h4 id="xAxis-z"><a href="#xAxis-z" class="headerlink" title="xAxis. z"></a><a href="https://www.echartsjs.com/zh/option.html#xAxis">xAxis.</a> <a href="https://www.echartsjs.com/zh/option.html#xAxis.z">z</a></h4><p>number</p><p>X 轴组件的所有图形的<code>z</code>值。控制图形的前后顺序。<code>z</code>值小的图形会被<code>z</code>值大的图形覆盖。</p><p><code>z</code>相比<code>zlevel</code>优先级更低，而且不会创建新的 Canvas。</p>]]></content>
    
    
    <summary type="html">echarts中xAxis---直角坐标系 grid 中的 x 轴的相关设置项</summary>
    
    
    
    
    <category term="echarts" scheme="https://yangyangmm.cn/tags/echarts/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://yangyangmm.cn/2020/12/15/hello-world/"/>
    <id>https://yangyangmm.cn/2020/12/15/hello-world/</id>
    <published>2020-12-15T05:54:13.645Z</published>
    <updated>2021-01-14T03:01:52.057Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a> <p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">这是hexo搭建完成后自动带有的教程！！！</summary>
    
    
    
    
  </entry>
  
</feed>
